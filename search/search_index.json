{"config":{"lang":["en"],"separator":"[\\s\\-,:!?=\\[\\]()<>{}\"/\\\\]+|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#renovate-documentation","title":"Renovate documentation","text":"<p>Automated dependency updates. Multi-platform and multi-language.</p>"},{"location":"#why-use-renovate","title":"Why use Renovate?","text":"<ul> <li>Get pull requests to update your dependencies and lock files</li> <li>Reduce noise by scheduling when Renovate creates PRs</li> <li>Renovate finds relevant package files automatically, including in monorepos</li> <li>You can customize the bot's behavior with configuration files</li> <li>Share your configuration with ESLint-like config presets</li> <li>Get replacement PRs to migrate from a deprecated dependency to the community suggested replacement (npm packages only)</li> <li>Open source</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>Renovate works on these platforms:</p> <ul> <li>GitHub (.com and Enterprise Server)</li> <li>GitLab (.com and CE/EE)</li> <li>Bitbucket Cloud</li> <li>Bitbucket Server</li> <li>Azure DevOps</li> <li>AWS CodeCommit</li> <li>Gitea</li> </ul>"},{"location":"#who-uses-renovate","title":"Who Uses Renovate?","text":"<p>Renovate is used by:</p> <p></p>"},{"location":"#ways-to-run-renovate","title":"Ways to run Renovate","text":"<p>You can run Renovate as:</p> <ul> <li>an Open Source npm package</li> <li>a pre-built Open Source image on Docker Hub</li> <li>a free GitHub App that is hosted by Mend</li> </ul> <p>Install our GitHub app now Check out our tutorial</p>"},{"location":"about-us/","title":"About us","text":"<p>Renovate was created by Mend staff and they continue to work on Renovate.</p> <p>More than 750 outside contributors helped improve Renovate.</p>"},{"location":"about-us/#special-thanks","title":"Special thanks","text":"<p>We want to highlight the work of these awesome people. Thank you for your time and effort!</p>"},{"location":"about-us/#maintainers","title":"Maintainers","text":"<p>Renovate is maintained by:</p> <ul> <li>@rarkins</li> <li>@viceice</li> <li>@JamieMagee</li> <li>@secustor</li> </ul>"},{"location":"about-us/#maintainers-for-features","title":"Maintainers for features","text":"<p>Next up, we have these people who help maintain parts of Renovate:</p> <ul> <li>@zharinov focused on parsing, Gradle and Maven</li> <li>@secustor worked on Terraform and Helm</li> <li>@fgreinacher worked on NuGet</li> <li>@Turbo87 has helped in multiple areas, especially Cargo</li> </ul>"},{"location":"about-us/#valuable-contributions","title":"Valuable contributions","text":"<p>We want to highlight these valuable contributions, even if they are one-offs. Some features made a lot of people happy, and efficient!</p> <ul> <li>@HonkingGoose worked on the docs and was community manager</li> <li>@ikesyo regularly helpful</li> <li>@astellingwerf reviews PRs</li> <li>@danports worked on the Flux manager, and other managers. Feel free to ping <code>@danports</code> for any Flux-related issue or PR</li> <li>@shegox worked on the Go manager, and improved our docs</li> <li>@setchy focused on Bitbucket Cloud and replacement features</li> </ul>"},{"location":"about-us/#renovate-development","title":"Renovate development","text":"<p>The source code for Renovate is available on GitHub at <code>renovatebot/renovate</code>. This is where we do most of the development.</p>"},{"location":"about-us/#about-these-docs","title":"About these docs","text":"<p>The Renovate docs are built from Markdown files in our <code>renovatebot/renovate</code> repository. Most of the source files can be found in the <code>docs/usage/</code> directory.</p>"},{"location":"bazel/","title":"Bazel","text":"<p>Renovate supports upgrading dependencies in Bazel <code>WORKSPACE</code> files.</p>"},{"location":"bazel/#how-it-works","title":"How it works","text":"<ol> <li>Bazel support is enabled automatically</li> <li>Renovate will search repositories for any <code>WORKSPACE</code> files in the repository</li> <li>Existing dependencies will be extracted from <code>container_pull</code>, <code>oci_pull</code>, <code>git_repository</code>, <code>go_repository</code>, <code>maven_install</code>, and <code>http_archive</code>/<code>http_file</code> declarations</li> <li>Renovate will replace any old versions with the latest version available</li> </ol>"},{"location":"bazel/#git_repository","title":"git_repository","text":"<p>Renovate will update any <code>git_repository</code> declaration that has the following:</p> <ol> <li>name</li> <li>remote matching <code>https://github.com/&lt;owner&gt;/&lt;repo&gt;.git</code></li> <li>tag using a valid SemVer</li> </ol> <p>e.g.:</p> <pre><code>git_repository(\n    name = \"build_bazel_rules_typescript\",\n    remote = \"https://github.com/bazelbuild/rules_typescript.git\",\n    tag = \"0.6.1\",\n)\n</code></pre> <p>Renovate uses the list of tags on the remote repository (GitHub) to detect a new version.</p>"},{"location":"bazel/#http_archive-and-http_file","title":"http_archive and http_file","text":"<p>Renovate will update any <code>http_archive</code> or <code>http_file</code> declaration that has the following:</p> <ol> <li>name</li> <li>url matching <code>https://github.com/&lt;owner&gt;/&lt;repo&gt;/releases/download/&lt;semver&gt;/&lt;repo&gt;.tar.gz</code></li> <li>sha256</li> </ol> <p>e.g.:</p> <pre><code>http_archive(\n    name = \"io_bazel_rules_go\",\n    url = \"https://github.com/bazelbuild/rules_go/releases/download/0.7.1/rules_go-0.7.1.tar.gz\",\n    sha256 = \"341d5eacef704415386974bc82a1783a8b7ffbff2ab6ba02375e1ca20d9b031c\",\n)\n</code></pre> <p>Renovate uses the list of releases that it finds at the <code>url</code> to detect a new version.</p>"},{"location":"bazel/#maven_install","title":"maven_install","text":"<p>By default, Maven dependencies are extracted in the context of Gradle versioning scheme. To change it, configure <code>packageRules</code> like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"bazel\"],\n\"matchDatasources\": [\"maven\"],\n\"versioning\": \"maven\"\n}\n]\n}\n</code></pre>"},{"location":"bazel/#future-work","title":"Future work","text":"<p>Contributions and/or feature requests are welcome to support more patterns or additional use cases.</p>"},{"location":"bicep/","title":"Bicep","text":"<p>Renovate supports upgrading API versions in <code>resource</code> references. Upgrading <code>module</code> versions is not supported.</p>"},{"location":"bicep/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches for <code>.bicep</code> files.</li> <li>Renovate parses the files for <code>resource</code> types and API versions.</li> <li>Renovate looks up the latest version in the Azure/bicep-types-az repository.</li> </ol>"},{"location":"bicep/#known-issues","title":"Known issues","text":"<p>API version updates of nested resources are not supported.</p> <p>The API version of the <code>blobServices</code> resource below for example, will not be upgraded:</p> <pre><code>resource storageAccount 'Microsoft.Storage/storageAccounts@2022-05-01' = {\n  name: 'test'\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_LRS'\n  }\n  location: location\n\n  resource blobServices 'blobServices@2022-05-01' = {\n    name: 'default'\n  }\n}\n</code></pre>"},{"location":"bicep/#future-work","title":"Future work","text":"<ul> <li>Support versioned nested resource API version upgrades.</li> <li>Support module version upgrades.</li> <li>Public registry module references.</li> <li>Private registry module references.</li> <li>Template spec module references.</li> <li>Module aliases support.</li> </ul>"},{"location":"config-presets/","title":"Shareable Config Presets","text":"<p>This page describes how to configure your shared presets. Read the Key concepts, presets page to learn more about presets in general.</p> <p>Shareable config presets must use the JSON or JSON5 formats, other formats are not supported.</p> <p>Warning</p> <p>Only use <code>default.json</code> for your presets.</p> <p>Warning</p> <p>We've deprecated using a <code>renovate.json</code> file for presets, as this causes issues if the repository configuration also uses a <code>renovate.json</code> file. If you're using a <code>renovate.json</code> file to share your presets, rename it to <code>default.json</code>.</p> <p>Tip</p> <p>Describe what your preset does in the <code>\"description\"</code> field. This way your configuration is self-documenting.</p>"},{"location":"config-presets/#extending-from-a-preset","title":"Extending from a preset","text":"<p>To use a preset put it in an <code>extends</code> array within your Renovate config. Presets can be nested.</p>"},{"location":"config-presets/#preset-hosting","title":"Preset Hosting","text":"<p>Presets should be hosted in repositories, which usually means the same platform host as Renovate is running against.</p> <p>Warning</p> <p>We deprecated npm-based presets. We plan to drop the npm-based presets feature in a future major release of Renovate.</p> <p>You can set a Git tag (like a SemVer) to use a specific release of your shared config.</p>"},{"location":"config-presets/#github","title":"GitHub","text":"name example use preset resolves as filename Git tag GitHub default <code>github&gt;abc/foo</code> <code>default</code> <code>https://github.com/abc/foo</code> <code>default.json</code> Default branch GitHub with preset name <code>github&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> Default branch GitHub with preset name (JSON5) <code>github&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json5</code> Default branch GitHub with preset name and path <code>github&gt;abc/foo//path/xyz</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>path/xyz.json</code> Default branch GitHub default with a tag <code>github&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://github.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> GitHub with preset name with a tag <code>github&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> GitHub with preset name and path with a tag <code>github&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://github.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> GitHub with subpreset name and tag <code>github&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://github.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#gitlab","title":"GitLab","text":"name example use preset resolves as filename Git tag GitLab default <code>gitlab&gt;abc/foo</code> <code>default</code> <code>https://gitlab.com/abc/foo</code> <code>default.json</code> Default branch GitLab with preset name <code>gitlab&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> Default branch GitLab with preset name (JSON5) <code>gitlab&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json5</code> Default branch GitLab default with a tag <code>gitlab&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://gitlab.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> GitLab with preset name with a tag <code>gitlab&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> GitLab with preset name and path with a tag <code>gitlab&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://gitlab.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> GitLab with subpreset name and tag <code>gitlab&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://gitlab.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#gitea","title":"Gitea","text":"name example use preset resolves as filename Git tag Gitea default <code>gitea&gt;abc/foo</code> <code>default</code> <code>https://gitea.com/abc/foo</code> <code>default.json</code> Default branch Gitea with preset name <code>gitea&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> Default branch Gitea with preset name (JSON5) <code>gitea&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json5</code> Default branch Gitea default with a tag <code>gitea&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://gitea.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> Gitea with preset name with a tag <code>gitea&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> Gitea with preset name and path with a tag <code>gitea&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://gitea.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> Gitea with subpreset name and tag <code>gitea&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://gitea.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code>"},{"location":"config-presets/#self-hosted-git","title":"Self-hosted Git","text":"name example use preset resolves as filename Git tag Local default <code>local&gt;abc/foo</code> <code>default</code> <code>https://github.company.com/abc/foo</code> <code>default.json</code> Default branch Local with preset path <code>local&gt;abc/foo:xyz</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> Default branch Local with preset path (JSON5) <code>local&gt;abc/foo:xyz.json5</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json5</code> Default branch Local with preset name and path <code>local&gt;abc/foo//path/xyz</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>path/xyz.json</code> Default branch Local default with a tag <code>local&gt;abc/foo#1.2.3</code> <code>default</code> <code>https://github.company.com/abc/foo</code> <code>default.json</code> <code>1.2.3</code> Local with preset name with a tag <code>local&gt;abc/foo:xyz#1.2.3</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> Local with preset name and path with a tag <code>local&gt;abc/foo//path/xyz#1.2.3</code> <code>xyz</code> <code>https://github.company.com/abc/foo</code> <code>path/xyz.json</code> <code>1.2.3</code> Local with subpreset name and tag <code>local&gt;abc/foo:xyz/sub#1.2.3</code> <code>sub</code> <code>https://github.company.com/abc/foo</code> <code>xyz.json</code> <code>1.2.3</code> <p>Tip</p> <p>You can't combine the path and sub-preset syntaxes. This means that anything in the form <code>provider&gt;owner/repo//path/to/file:subsubpreset</code> is not supported. One workaround is to use distinct files instead of sub-presets.</p>"},{"location":"config-presets/#example-configs","title":"Example configs","text":"<p>An example of a small rule is <code>:preserveSemverRanges</code>, which has the description \"Preserve (but continue to upgrade) any existing SemVer ranges.\". It simply sets the configuration option <code>rangeStrategy</code> to <code>replace</code>.</p> <p>An example of a full config is <code>config:base</code>, which is Renovate's default configuration. It mostly uses Renovate config defaults but adds a few smart customizations such as grouping monorepo packages together.</p> <p>Note</p> <p>The <code>:xyz</code> naming convention (with <code>:</code> prefix) is shorthand for the <code>default:</code> presets. For example: <code>:xyz</code> is the same as <code>default:xyz</code>.</p>"},{"location":"config-presets/#how-to-use-preset-configs","title":"How to Use Preset Configs","text":"<p>By default, Renovate App's onboarding PR suggests the <code>[\"config:base]\"</code> preset. If you're self hosting, and want to use the <code>config:base</code> preset, then you must add <code>\"onboardingConfig\": { \"extends\": [\"config:base\"] }</code> to your bot's config.</p> <p>Read the Full Config Presets page to learn more about our <code>config:</code> presets.</p> <p>A typical onboarding <code>renovate.json</code> looks like this:</p> <pre><code>{\n\"extends\": [\"config:base\"]\n}\n</code></pre> <p>Here's an example of using presets to change Renovate's behavior. You're happy with the <code>config:base</code> preset, but want Renovate to create PRs when you're not at the office. You look at our <code>schedule:</code> presets, and find the <code>schedule:nonOfficeHours</code> preset. You put <code>schedule:nonOfficeHours</code> in the <code>extends</code> array of your <code>renovate.json</code> file, like this:</p> <pre><code>{\n\"extends\": [\"config:base\", \"schedule:nonOfficeHours\"]\n}\n</code></pre>"},{"location":"config-presets/#preset-parameters","title":"Preset Parameters","text":"<p>If you browse the \"default\" presets, you will see some that have parameters, e.g.:</p> <pre><code>{\n\"labels\": {\n\"description\": \"Apply labels &lt;code&gt;{{arg0}}&lt;/code&gt; and &lt;code&gt;{{arg1}}&lt;/code&gt; to PRs\",\n\"labels\": [\"{{arg0}}\", \"{{arg1}}\"]\n},\n\"assignee\": {\n\"description\": \"Assign PRs to &lt;code&gt;{{arg0}}&lt;/code&gt;\",\n\"assignees\": [\"{{arg0}}\"]\n}\n}\n</code></pre> <p>Here is how you would use these in your Renovate config:</p> <pre><code>{\n\"extends\": [\":labels(dependencies,devops)\", \":assignee(rarkins)\"]\n}\n</code></pre> <p>In short, the number of <code>{{argx}}</code> parameters in the definition is how many parameters you need to provide. Parameters must be strings, non-quoted, and separated by commas if there are more than one.</p> <p>If you find that you are repeating config a lot, you might consider publishing one of these types of parameterised presets yourself. Or if you think your preset would be valuable for others, please contribute a PR to the Renovate repository, see Contributing to presets.</p>"},{"location":"config-presets/#github-hosted-presets","title":"GitHub-hosted Presets","text":"<p>To host your preset config on GitHub:</p> <ul> <li>Create a new repository. Normally you'd call it <code>renovate-config</code> but it can be named anything</li> <li>Add configuration files to this new repo for any presets you want to share. For the default preset, <code>default.json</code> will be checked. For named presets, <code>&lt;preset-name&gt;.json</code> will be loaded. For example, loading preset <code>library</code> would load <code>library.json</code>. No other files are necessary.</li> <li>In other repos, reference it in an extends array like \"github&gt;owner/name\", for example:</li> </ul> <pre><code>{\n\"extends\": [\"github&gt;rarkins/renovate-config\"]\n}\n</code></pre> <p>From then on Renovate will use the Renovate config from the preset repo's default branch. You do not need to add it as a devDependency or add any other files to the preset repo.</p>"},{"location":"config-presets/#gitlab-hosted-presets","title":"GitLab-hosted Presets","text":"<p>For a private GitLab repository Renovate requires at least <code>Reporter</code> level access.</p> <p>To host your preset config on GitLab:</p> <ul> <li>Create a new repository on GitLab. Normally you'd call it <code>renovate-config</code> but it can be named anything</li> <li>Add a <code>default.json</code> to this new repo containing the preset config. No other files are necessary</li> <li>In other repos, reference it in an extends array like \"gitlab&gt;owner/name\", e.g. \"gitlab&gt;rarkins/renovate-config\"</li> </ul>"},{"location":"config-presets/#gitea-hosted-presets","title":"Gitea-hosted Presets","text":"<p>To host your preset config on Gitea:</p> <ul> <li>Create a new repository on Gitea. Normally you'd call it <code>renovate-config</code> but you can use any name you want</li> <li>Add a <code>default.json</code> to this new repository containing the preset config. No other files are necessary</li> <li>In other repositories, reference it in an extends array like <code>\"gitea&gt;owner/name\"</code>, e.g. <code>\"gitea&gt;rarkins/renovate-config\"</code></li> </ul>"},{"location":"config-presets/#local-presets","title":"Local presets","text":"<p>Renovate also supports local presets, e.g. presets that are hosted on the same platform as the target repository. This is especially helpful in self-hosted scenarios where public presets cannot be used. Local presets are specified either by leaving out any prefix, e.g. <code>owner/name</code>, or explicitly by adding a <code>local&gt;</code> prefix, e.g. <code>local&gt;owner/name</code>. Renovate will determine the current platform and look up the preset from there.</p>"},{"location":"config-presets/#contributing-to-presets","title":"Contributing to presets","text":"<p>Have you configured a rule that you think others might benefit from? Please consider contributing it to the Renovate repository so that it gains higher visibility and saves others from reinventing the same thing.</p> <p>Create a discussion to propose your preset to the Renovate maintainers. The maintainers can also help improve the preset, and let you know where to put it in the code.</p>"},{"location":"config-presets/#organization-level-presets","title":"Organization level presets","text":"<p>Whenever repository onboarding happens, Renovate checks if the current user/group/org has a default config to extend. It looks for:</p> <ul> <li>A repository called <code>renovate-config</code> under the same user/group/org with a <code>default.json</code> file or</li> <li>A repository named like <code>.{{platform}}</code> (e.g. <code>.github</code>) under the same user/group/org with <code>renovate-config.json</code></li> </ul> <p>If found, that repository's preset will be suggested as the sole extended preset, and any existing <code>onboardingConfig</code> config will be ignored/overridden. For example the result may be:</p> <pre><code>{\n\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n\"extends\": [\"local&gt;myorgname/.github:renovate-config\"]\n}\n</code></pre>"},{"location":"config-presets/#npm-hosted-presets","title":"npm-hosted presets","text":"<p>Warning</p> <p>Using npm-hosted presets is deprecated, we recommend you do not follow these instructions and instead use a <code>local</code> preset.</p> <p>If you manage multiple repositories using Renovate and want the same custom config across all or most of them, then you might want to consider publishing your own preset config so that you can \"extend\" it in every applicable repository. That way when you want to change your Renovate configuration you can make the change in one location rather than having to copy/paste it to every repository individually.</p> <p>Let's say that your username on npm and elsewhere is \"fastcore\". In that case, you can choose between publishing your preset config package as <code>@fastcore/renovate-config</code> or <code>renovate-config-fastcore</code>. Let's assume you choose <code>renovate-config-fastcore</code> as the package name.</p> <p>You then need to publish the <code>renovate-config-fastcore</code> package where the <code>package.json</code> has the field <code>renovate-config</code> and then put your config under the field <code>default</code>. For example:</p> <pre><code>{\n\"name\": \"renovate-config-fastcore\",\n\"version\": \"0.0.1\",\n\"renovate-config\": {\n\"default\": {\n\"extends\": [\"config:base\", \"schedule:nonOfficeHours\"]\n}\n}\n}\n</code></pre> <p>Then in each of your repositories you can add your Renovate config like:</p> <pre><code>{\n\"extends\": [\"fastcore\"]\n}\n</code></pre> <p>Any repository including this config will then adopt the rules of the default <code>library</code> preset but schedule it on weeknights or weekends.</p> <p>If you prefer to publish using the namespace <code>@fastcore/renovate-config</code> then you would use the <code>@</code> prefix instead:</p> <pre><code>{\n\"extends\": [\"@fastcore\"]\n}\n</code></pre>"},{"location":"configuration-options/","title":"Configuration Options","text":"<p>This document describes all the configuration options you may use in a Renovate configuration file. Any config you define applies to the whole repository (e.g. if you have a monorepo).</p> <p>You can store your Renovate configuration file in one of these locations:</p> <ol> <li><code>renovate.json</code></li> <li><code>renovate.json5</code></li> <li><code>.github/renovate.json</code></li> <li><code>.github/renovate.json5</code></li> <li><code>.gitlab/renovate.json</code></li> <li><code>.gitlab/renovate.json5</code></li> <li><code>.renovaterc</code></li> <li><code>.renovaterc.json</code></li> <li><code>.renovaterc.json5</code></li> <li><code>package.json</code> (within a <code>\"renovate\"</code> section)</li> </ol> <p>Warning</p> <p>Storing the Renovate configuration in a <code>package.json</code> file is deprecated and support may be removed in the future.</p> <p>When renovating a repository, Renovate tries to detect the configuration files in the order listed above, and stops after the first one is found.</p> <p>Renovate always uses the config from the repository's default branch, even if that configuration specifies multiple <code>baseBranches</code>. Renovate does not read/override the config from within each base branch if present.</p> <p>Also, be sure to check out Renovate's shareable config presets to save yourself from reinventing any wheels. Shareable config presets only work with the JSON format.</p> <p>If you have any questions about the config options, or want to get help/feedback about a config, go to the discussions tab in the Renovate repository and start a new \"config help\" discussion. We will do our best to answer your question(s).</p> <p>A <code>subtype</code> in the configuration table specifies what type you're allowed to use within the main element.</p> <p>If a config option has a <code>parent</code> defined, it means it's only allowed to configure it within an object with the parent name, such as <code>packageRules</code> or <code>hostRules</code>.</p> <p>When an array or object configuration option is <code>mergeable</code>, it means that values inside it will be added to any existing object or array that existed with the same name.</p> <p>Note</p> <p>Config options with <code>type=string</code> are always non-mergeable, so <code>mergeable=false</code>.</p>"},{"location":"configuration-options/#addlabels","title":"addLabels","text":"<p>Labels to add to Pull Request.</p> Name Value type array subType string mergeable true cli <code>--add-labels</code> env <code>RENOVATE_ADD_LABELS</code> <p>The <code>labels</code> field is non-mergeable, meaning that any config setting a list of PR labels will replace any existing list. If you want to append labels for matched rules, then define an <code>addLabels</code> array with one (or more) label strings. All matched <code>addLabels</code> strings will be attached to the PR.</p> <p>Consider this example:</p> <pre><code>{\n\"labels\": [\"dependencies\"],\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"labels\": [\"linting\"]\n},\n{\n\"matchDepTypes\": [\"optionalDependencies\"],\n\"addLabels\": [\"optional\"]\n}\n]\n}\n</code></pre> <p>With the above config:</p> <ul> <li>Optional dependencies will have the labels <code>dependencies</code> and <code>optional</code></li> <li>ESLint dependencies will have the label <code>linting</code></li> <li>All other dependencies will have the label <code>dependencies</code></li> </ul>"},{"location":"configuration-options/#additionalbranchprefix","title":"additionalBranchPrefix","text":"<p>Additional string value to be appended to <code>branchPrefix</code>.</p> Name Value type string default <code>\"\"</code> env <code>RENOVATE_ADDITIONAL_BRANCH_PREFIX</code> <p>By default, the value for this config option is an empty string. Normally you don't need to set this config option.</p> <p>Here's an example where <code>additionalBranchPrefix</code> can help you. Say you're using a monorepo and want to split pull requests based on the location of the package definition, so that individual teams can manage their own Renovate pull requests. This can be done with this configuration:</p> <pre><code>{\n\"additionalBranchPrefix\": \"{{parentDir}}-\"\n}\n</code></pre>"},{"location":"configuration-options/#additionalreviewers","title":"additionalReviewers","text":"<p>Additional reviewers for Pull Requests (in contrast to <code>reviewers</code>, this option adds to the existing reviewer list, rather than replacing it).</p> Name Value type array subType string mergeable true cli <code>--additional-reviewers</code> env <code>RENOVATE_ADDITIONAL_REVIEWERS</code> <p>This option adds to the existing reviewer list, rather than replacing it like <code>reviewers</code>.</p> <p>Use <code>additionalReviewers</code> when you want to add to a preset or base list, without replacing the original. For example, when adding focused reviewers for a specific package group.</p>"},{"location":"configuration-options/#assignautomerge","title":"assignAutomerge","text":"<p>Assign reviewers and assignees even if the PR is to be automerged.</p> Name Value type boolean default <code>false</code> cli <code>--assign-automerge</code> env <code>RENOVATE_ASSIGN_AUTOMERGE</code> <p>By default, Renovate will not assign reviewers and assignees to an automerge-enabled PR unless it fails status checks. By configuring this setting to <code>true</code>, Renovate will instead always assign reviewers and assignees for automerging PRs at time of creation.</p>"},{"location":"configuration-options/#assignees","title":"assignees","text":"<p>Assignees for Pull Request (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--assignees</code> env <code>RENOVATE_ASSIGNEES</code> <p>Must be valid usernames on the platform in use.</p>"},{"location":"configuration-options/#assigneesfromcodeowners","title":"assigneesFromCodeOwners","text":"<p>Determine assignees based on configured code owners and changes in PR.</p> Name Value type boolean default <code>false</code> cli <code>--assignees-from-code-owners</code> env <code>RENOVATE_ASSIGNEES_FROM_CODE_OWNERS</code> <p>If enabled Renovate tries to determine PR assignees by matching rules defined in a CODEOWNERS file against the changes in the PR.</p> <p>See GitHub or GitLab documentation for details on syntax and possible file locations.</p>"},{"location":"configuration-options/#assigneessamplesize","title":"assigneesSampleSize","text":"<p>Take a random sample of given size from <code>assignees</code>.</p> Name Value type integer cli <code>--assignees-sample-size</code> env <code>RENOVATE_ASSIGNEES_SAMPLE_SIZE</code> <p>If configured, Renovate will take a random sample of given size from assignees and assign them only, instead of assigning the entire list of <code>assignees</code> you have configured.</p>"},{"location":"configuration-options/#autoapprove","title":"autoApprove","text":"<p>Set to <code>true</code> to automatically approve PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms azure cli <code>--auto-approve</code> env <code>RENOVATE_AUTO_APPROVE</code> <p>Setting this to <code>true</code> will automatically approve the PRs.</p> <p>You can also configure this using <code>packageRules</code> if you want to use it selectively (e.g. per-package).</p>"},{"location":"configuration-options/#autoreplaceglobalmatch","title":"autoReplaceGlobalMatch","text":"<p>Control whether replacement regular expressions are global matches or only the first match.</p> Name Value type boolean default <code>true</code> cli <code>--auto-replace-global-match</code> env <code>RENOVATE_AUTO_REPLACE_GLOBAL_MATCH</code> <p>Setting this to <code>false</code> will replace only the first match during replacements updates.</p> <p>Disabling this is useful for situations where values are repeated within the dependency string, such as when the <code>currentVersion</code> is also featured somewhere within the <code>currentDigest</code>, but you only want to replace the first instance.</p> <p>Consider this example:</p> <pre><code>FROM java:8@sha256:0e8b2a860\n</code></pre> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"java\"],\n\"replacementName\": \"eclipse-temurin\",\n\"replacementVersion\": \"11\"\n}\n]\n}\n</code></pre> <p>With the above replacement scenario, the current dependency has a version of <code>8</code>, which also features several times within the digest section.</p> <p>When using the default <code>autoReplaceGlobalMatch</code> configuration, Renovate will attempt to replace all instances of <code>8</code> within the dependency string with the <code>replacementVersion</code> value of <code>11</code>. This will replace more than is intended and will be caught during replacement validation steps, resulting in the replacement PR to not be created.</p> <p>When setting <code>autoReplaceGlobalMatch</code> configuration to <code>false</code>, Renovate will only replace the first occurrence of <code>8</code> and will successfully create a replacement PR.</p>"},{"location":"configuration-options/#automerge","title":"automerge","text":"<p>Whether to automerge branches/PRs automatically, without human intervention.</p> Name Value type boolean default <code>false</code> cli <code>--automerge</code> env <code>RENOVATE_AUTOMERGE</code> <p>By default, Renovate raises PRs but leaves them to someone or something else to merge them. By configuring this setting, you allow Renovate to automerge PRs or even branches. Using automerge reduces the amount of human intervention required.</p> <p>Usually you won't want to automerge all PRs, for example most people would want to leave major dependency updates to a human to review first. You could configure Renovate to automerge all but major this way:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchUpdateTypes\": [\"minor\", \"patch\", \"pin\", \"digest\"],\n\"automerge\": true\n}\n]\n}\n</code></pre> <p>Also note that this option can be combined with other nested settings, such as dependency type. So for example you could choose to automerge all (passing) <code>devDependencies</code> only this way:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\"devDependencies\"],\n\"automerge\": true\n}\n]\n}\n</code></pre> <p>Negative reviews on GitHub block Renovate automerge</p> <p>Renovate won't automerge on GitHub if a PR has a negative review.</p> <p>Note</p> <p>On Azure there can be a delay between a PR being set as completed by Renovate, and Azure merging the PR / finishing its tasks. Renovate tries to delay until Azure is in the expected state, but it will continue if it takes too long. In some cases this can result in a dependency not being merged, and a fresh PR being created for the dependency.</p>"},{"location":"configuration-options/#automergecomment","title":"automergeComment","text":"<p>PR comment to add to trigger automerge. Only used if <code>automergeType=pr-comment</code>.</p> Name Value type string default <code>\"automergeComment\"</code> cli <code>--automerge-comment</code> env <code>RENOVATE_AUTOMERGE_COMMENT</code> <p>Use this only if you configure <code>automergeType=\"pr-comment\"</code>.</p> <p>Example use:</p> <pre><code>{\n\"automerge\": true,\n\"automergeType\": \"pr-comment\",\n\"automergeComment\": \"bors: r+\"\n}\n</code></pre>"},{"location":"configuration-options/#automergeschedule","title":"automergeSchedule","text":"<p>Limit automerge to these times of day or week.</p> Name Value type array subType string cli <code>--automerge-schedule</code> default <pre><code>[\"at any time\"]\n</code></pre> <p>Use the <code>automergeSchedule</code> option to define times of week or month during which Renovate may automerge its PRs. The default value for <code>automergeSchedule</code> is \"at any time\", which functions the same as setting a <code>null</code> schedule. To configure this option refer to <code>schedule</code> as the syntax is the same.</p>"},{"location":"configuration-options/#automergestrategy","title":"automergeStrategy","text":"<p>The merge strategy to use when automerging PRs. Used only if <code>automergeType=pr</code>.</p> Name Value type string allowedValues auto, fast-forward, merge-commit, rebase, squash default <code>\"auto\"</code> supportedPlatforms bitbucket, gitea cli <code>--automerge-strategy</code> env <code>RENOVATE_AUTOMERGE_STRATEGY</code> <p>The automerge strategy defaults to <code>auto</code>, so Renovate decides how to merge pull requests as best it can. If possible, Renovate follows the merge strategy set on the platform itself for the repository.</p> <p>If you've set <code>automerge=true</code> and <code>automergeType=pr</code> for any of your dependencies, then you may choose what automerge strategy Renovate uses by setting the <code>automergeStrategy</code> config option. If you're happy with the default behavior, you don't need to do anything.</p> <p>You may choose from these values:</p> <ul> <li><code>auto</code>, Renovate decides how to merge</li> <li><code>fast-forward</code>, \"fast-forwarding\" the main branch reference, no new commits in the resultant tree</li> <li><code>merge-commit</code>, create a new merge commit</li> <li><code>rebase</code>, rewrite history as part of the merge, but usually keep the individual commits</li> <li><code>squash</code>, flatten the commits that are being merged into a single new commit</li> </ul> <p>Platforms may only support some of these merge strategies.</p> <p>If the chosen automerge strategy is not supported on your platform then Renovate stops automerging. In that case just set a supported automerge strategy.</p>"},{"location":"configuration-options/#automergetype","title":"automergeType","text":"<p>How to automerge, if enabled.</p> Name Value type string allowedValues branch, pr, pr-comment default <code>\"pr\"</code> cli <code>--automerge-type</code> env <code>RENOVATE_AUTOMERGE_TYPE</code> <p>This setting is only applicable if you opt in to configure <code>automerge</code> to <code>true</code> for any of your dependencies.</p> <p>Automerging defaults to using Pull Requests (<code>automergeType=\"pr\"</code>). In that case Renovate first creates a branch and associated Pull Request, and then automerges the PR on a subsequent run once it detects the PR's status checks are \"green\". If by the next run the PR is already behind the base branch it will be automatically rebased, because Renovate only automerges branches which are up-to-date and green. If Renovate is scheduled for hourly runs on the repository but commits are made every 15 minutes to the main branch, then an automerge like this will keep getting deferred with every rebase.</p> <p>Tip</p> <p>If you have no tests but still want Renovate to automerge, you need to add <code>\"ignoreTests\": true</code> to your configuration.</p> <p>If you prefer that Renovate more silently automerge without Pull Requests at all, you can configure <code>\"automergeType\": \"branch\"</code>. In this case Renovate will:</p> <ul> <li>Create the branch, wait for test results</li> <li>Rebase it any time it gets out of date with the base branch</li> <li>Automerge the branch commit if it's: (a) up-to-date with the base branch, and (b) passing all tests</li> <li>As a backup, raise a PR only if either: (a) tests fail, or (b) tests remain pending for too long (default: 24 hours)</li> </ul> <p>The final value for <code>automergeType</code> is <code>\"pr-comment\"</code>, intended only for users who already have a \"merge bot\" such as bors-ng and want Renovate to not actually automerge by itself and instead tell <code>bors-ng</code> to merge for it, by using a comment in the PR. If you're not already using <code>bors-ng</code> or similar, don't worry about this option.</p>"},{"location":"configuration-options/#azureworkitemid","title":"azureWorkItemId","text":"<p>The id of an existing work item on Azure Boards to link to each PR.</p> Name Value type integer default 0 supportedPlatforms azure cli <code>--azure-work-item-id</code> env <code>RENOVATE_AZURE_WORK_ITEM_ID</code> <p>When creating a PR in Azure DevOps, some branches can be protected with branch policies to check for linked work items. Creating a work item in Azure DevOps is beyond the scope of Renovate, but Renovate can link an already existing work item when creating PRs.</p>"},{"location":"configuration-options/#basebranches","title":"baseBranches","text":"<p>List of one or more custom base branches defined as exact strings and/or via regex expressions.</p> Name Value type array subType string env <code>RENOVATE_BASE_BRANCHES</code> <p>By default, Renovate will detect and process only the repository's default branch. For most projects, this is the expected approach. Renovate also allows users to explicitly configure <code>baseBranches</code>, e.g. for use cases such as:</p> <ul> <li>You wish Renovate to process only a non-default branch, e.g. <code>dev</code>: <code>\"baseBranches\": [\"dev\"]</code></li> <li>You have multiple release streams you need Renovate to keep up to date, e.g. in branches <code>main</code> and <code>next</code>: <code>\"baseBranches\": [\"main\", \"next\"]</code></li> <li>You want to update your main branch and consistently named release branches, e.g. <code>main</code> and <code>release/&lt;version&gt;</code>: <code>\"baseBranches\": [\"main\", \"/^release\\\\/.*/\"]</code></li> </ul> <p>It's possible to add this setting into the <code>renovate.json</code> file as part of the \"Configure Renovate\" onboarding PR. If so then Renovate will reflect this setting in its description and use package file contents from the custom base branch(es) instead of default.</p> <p><code>baseBranches</code> supports Regular Expressions that must begin and end with <code>/</code>, e.g.:</p> <pre><code>{\n\"baseBranches\": [\"main\", \"/^release\\\\/.*/\"]\n}\n</code></pre> <p>You can negate the regex by prefixing it with <code>!</code>. Only use a single negation and do not mix it with other branch names, since all branches are combined with <code>or</code>. With a negation, all branches except those matching the regex will be added to the result:</p> <pre><code>{\n\"baseBranches\": [\"!/^pre-release\\\\/.*/\"]\n}\n</code></pre> <p>Note</p> <p>Do not use the <code>baseBranches</code> config option when you've set a <code>forkToken</code>. You may need a <code>forkToken</code> when you're using the Forking Renovate app.</p>"},{"location":"configuration-options/#bbusedefaultreviewers","title":"bbUseDefaultReviewers","text":"<p>Use the default reviewers (Bitbucket only).</p> Name Value type boolean default <code>true</code> supportedPlatforms bitbucket, bitbucket-server cli <code>--bb-use-default-reviewers</code> env <code>RENOVATE_BB_USE_DEFAULT_REVIEWERS</code> <p>Configuring this to <code>true</code> means that Renovate will detect and apply the default reviewers rules to PRs (Bitbucket only).</p>"},{"location":"configuration-options/#branchconcurrentlimit","title":"branchConcurrentLimit","text":"<p>Limit to a maximum of x concurrent branches. 0 means no limit, <code>null</code> (default) inherits value from <code>prConcurrentLimit</code>.</p> Name Value type integer cli <code>--branch-concurrent-limit</code> env <code>RENOVATE_BRANCH_CONCURRENT_LIMIT</code> <p>By default, Renovate won't enforce any concurrent branch limits. The <code>config:base</code> preset that many extend from limits the number of concurrent branches to 10, but in many cases a limit as low as 3 or 5 can be most efficient for a repository.</p> <p>If you want the same limit for both concurrent branches and concurrent PRs, then just set a value for <code>prConcurrentLimit</code> and it will be reused for branch calculations too. But if you want to allow more concurrent branches than concurrent PRs, you can configure both values (e.g. <code>branchConcurrentLimit=5</code> and <code>prConcurrentLimit=3</code>).</p> <p>This limit is enforced on a per-repository basis.</p> <p>Example config:</p> <pre><code>{\n\"branchConcurrentLimit\": 3\n}\n</code></pre> <p>Warning</p> <p>Leaving PRs/branches as unlimited or as a high number increases the time it takes for Renovate to process a repository. If you find that Renovate is too slow when rebasing out-of-date branches, decrease the <code>branchConcurrentLimit</code>.</p> <p>If you have too many concurrent branches which rebase themselves each run, Renovate can take a lot of time to rebase. Solutions:</p> <ul> <li>Decrease the concurrent branch limit (note: this won't go and delete any existing, so won't have an effect until you either merge or close existing ones manually)</li> <li>Remove automerge and/or automatic rebasing (set <code>rebaseWhen</code> to <code>conflicted</code>). However if you have branch protection saying PRs must be up to date then it's not ideal to remove automatic rebasing</li> </ul>"},{"location":"configuration-options/#branchname","title":"branchName","text":"<p>Branch name template.</p> Name Value type string default <code>\"{{{branchPrefix}}}{{{additionalBranchPrefix}}}{{{branchTopic}}}\"</code> env <code>RENOVATE_BRANCH_NAME</code> <p>Warning</p> <p>We strongly recommended that you avoid configuring this field directly. Use at your own risk.</p> <p>If you truly need to configure this then it probably means either:</p> <ul> <li>You are hopefully mistaken, and there's a better approach you should use, so open a new \"config help\" discussion at the Renovate discussions tab or</li> <li>You have a use case we didn't expect, please open a discussion to see if we want to get a feature request from you</li> </ul>"},{"location":"configuration-options/#branchnamestrict","title":"branchNameStrict","text":"<p>Whether to be strict about the use of special characters within the branch name.</p> Name Value type boolean default <code>false</code> cli <code>--branch-name-strict</code> env <code>RENOVATE_BRANCH_NAME_STRICT</code> <p>If <code>true</code>, Renovate removes special characters when slugifying the branch name:</p> <ul> <li>all special characters are removed</li> <li>only alphabetic characters are allowed</li> <li>hyphens <code>-</code> are used to separate sections</li> </ul> <p>The default <code>false</code> behavior will mean that special characters like <code>.</code> may end up in the branch name.</p>"},{"location":"configuration-options/#branchprefix","title":"branchPrefix","text":"<p>Prefix to use for all branch names.</p> Name Value type string default <code>\"renovate/\"</code> cli <code>--branch-prefix</code> env <code>RENOVATE_BRANCH_PREFIX</code> <p>You can modify this field if you want to change the prefix used. For example if you want branches to be like <code>deps/eslint-4.x</code> instead of <code>renovate/eslint-4.x</code> then you configure <code>branchPrefix</code> = <code>deps/</code>. Or if you wish to avoid forward slashes in branch names then you could use <code>renovate_</code> instead, for example.</p> <p><code>branchPrefix</code> must be configured at the root of the configuration (e.g. not within any package rule) and is not allowed to use template values. e.g. instead of <code>renovate/{{parentDir}}-</code>, configure the template part in <code>additionalBranchPrefix</code>, like <code>\"additionalBranchPrefix\": \"{{parentDir}}-\"</code>.</p> <p>Note</p> <p>This setting does not change the default onboarding branch name, i.e. <code>renovate/configure</code>. If you wish to change that too, you need to also configure the field <code>onboardingBranch</code> in your global bot config.</p>"},{"location":"configuration-options/#branchprefixold","title":"branchPrefixOld","text":"<p>Old branchPrefix value to check for existing PRs.</p> Name Value type string default <code>\"renovate/\"</code> cli <code>--branch-prefix-old</code> env <code>RENOVATE_BRANCH_PREFIX_OLD</code> <p>Renovate uses branch names as part of its checks to see if an update PR was created previously, and already merged or ignored. If you change <code>branchPrefix</code>, then no previously closed PRs will match, which could lead to Renovate recreating PRs in such cases. Instead, set the old <code>branchPrefix</code> value as <code>branchPrefixOld</code> to allow Renovate to look for those branches too, and avoid this happening.</p>"},{"location":"configuration-options/#branchtopic","title":"branchTopic","text":"<p>Branch topic.</p> Name Value type string default <code>\"{{{depNameSanitized}}}-{{{newMajor}}}{{#if separateMinorPatch}}{{#if isPatch}}.{{{newMinor}}}{{/if}}{{/if}}.x{{#if isLockfileUpdate}}-lockfile{{/if}}\"</code> env <code>RENOVATE_BRANCH_TOPIC</code> <p>This field is combined with <code>branchPrefix</code> and <code>additionalBranchPrefix</code> to form the full <code>branchName</code>. <code>branchName</code> uniqueness is important for dependency update grouping or non-grouping so be cautious about ever editing this field manually. This is an advance field and it's recommend you seek a config review before applying it.</p>"},{"location":"configuration-options/#bumpversion","title":"bumpVersion","text":"<p>Bump the version in the package file being updated.</p> Name Value type string allowedValues major, minor, patch, prerelease supportedManagers helmv3, npm, nuget, maven, sbt cli <code>--bump-version</code> env <code>RENOVATE_BUMP_VERSION</code> default <code>null</code> <p>Currently this setting supports <code>helmv3</code>, <code>npm</code>, <code>nuget</code>, <code>maven</code> and <code>sbt</code> only, so raise a feature request if you have a use for it with other package managers. Its purpose is if you want Renovate to update the <code>version</code> field within your package file any time it updates dependencies within. Usually this is for automatic release purposes, so that you don't need to add another step after Renovate before you can release a new version.</p> <p>Configure this value to <code>\"prerelease\"</code>, <code>\"patch\"</code>, <code>\"minor\"</code> or <code>\"major\"</code> to have Renovate update the version in your edited package file. e.g. if you wish Renovate to always increase the target <code>package.json</code> version with a patch update, configure this to <code>\"patch\"</code>.</p> <p>For <code>npm</code> only you can also configure this field to <code>\"mirror:x\"</code> where <code>x</code> is the name of a package in the <code>package.json</code>. Doing so means that the <code>package.json</code> <code>version</code> field will mirror whatever the version is that <code>x</code> depended on. Make sure that version is a pinned version of course, as otherwise it won't be valid.</p> <p>For <code>sbt</code> note that Renovate will update the version string only for packages that have the version string in their project's <code>built.sbt</code> file.</p>"},{"location":"configuration-options/#clonesubmodules","title":"cloneSubmodules","text":"<p>Set to <code>true</code> to initialize submodules during repository clone.</p> Name Value type boolean default <code>false</code> cli <code>--clone-submodules</code> env <code>RENOVATE_CLONE_SUBMODULES</code> <p>Enabling this option will mean that any detected Git submodules will be cloned at time of repository clone.</p> <p>Important: private submodules aren't supported by Renovate, unless the underlying <code>ssh</code> layer already has the correct permissions.</p>"},{"location":"configuration-options/#commitbody","title":"commitBody","text":"<p>Commit message body template. Will be appended to commit message, separated by two line returns.</p> Name Value type string env <code>RENOVATE_COMMIT_BODY</code> default <code>null</code> <p>Configure this if you wish Renovate to add a commit body, otherwise Renovate just uses a regular single-line commit.</p> <p>For example, To add <code>[skip ci]</code> to every commit you could configure:</p> <pre><code>{\n\"commitBody\": \"[skip ci]\"\n}\n</code></pre> <p>Another example would be if you want to configure a DCO signoff to each commit.</p> <p>If you want Renovate to signoff its commits, add the <code>:gitSignOff</code> preset to your <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\":gitSignOff\"]\n}\n</code></pre>"},{"location":"configuration-options/#commitbodytable","title":"commitBodyTable","text":"<p>If enabled, append a table in the commit message body describing all updates in the commit.</p> Name Value type boolean default <code>false</code> cli <code>--commit-body-table</code> env <code>RENOVATE_COMMIT_BODY_TABLE</code>"},{"location":"configuration-options/#commitmessage","title":"commitMessage","text":"<p>Message to use for commit messages and pull request titles.</p> Name Value type string default <code>\"{{{commitMessagePrefix}}} {{{commitMessageAction}}} {{{commitMessageTopic}}} {{{commitMessageExtra}}} {{{commitMessageSuffix}}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE</code> <p>Warning</p> <p>We deprecated editing the <code>commitMessage</code> directly, and we recommend you stop using this config option. Instead use config options like <code>commitMessageAction</code>, <code>commitMessageExtra</code>, and so on, to create the commit message you want.</p>"},{"location":"configuration-options/#commitmessageaction","title":"commitMessageAction","text":"<p>Action verb to use in commit messages and PR titles.</p> Name Value type string default <code>\"Update\"</code> env <code>RENOVATE_COMMIT_MESSAGE_ACTION</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. Actions may be like <code>Update</code>, <code>Pin</code>, <code>Roll back</code>, <code>Refresh</code>, etc. Check out the default value for <code>commitMessage</code> to understand how this field is used.</p>"},{"location":"configuration-options/#commitmessageextra","title":"commitMessageExtra","text":"<p>Extra description used after the commit message topic - typically the version.</p> Name Value type string default <code>\"to {{#if isPinDigest}}{{{newDigestShort}}}{{else}}{{#if isMajor}}{{prettyNewMajor}}{{else}}{{#if isSingleVersion}}{{prettyNewVersion}}{{else}}{{#if newValue}}{{{newValue}}}{{else}}{{{newDigestShort}}}{{/if}}{{/if}}{{/if}}{{/if}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE_EXTRA</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. The \"extra\" is usually an identifier of the new version, e.g. \"to v1.3.2\" or \"to tag 9.2\".</p>"},{"location":"configuration-options/#commitmessageprefix","title":"commitMessagePrefix","text":"<p>Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if <code>semanticCommits</code> is enabled.</p> Name Value type string env <code>RENOVATE_COMMIT_MESSAGE_PREFIX</code> default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to alter <code>commitMessage</code> and <code>prTitle</code> without needing to copy/paste the whole string. The \"prefix\" is usually an automatically applied semantic commit prefix, but it can also be statically configured.</p>"},{"location":"configuration-options/#commitmessagesuffix","title":"commitMessageSuffix","text":"<p>Suffix to add to end of commit messages and PR titles.</p> Name Value type string env <code>RENOVATE_COMMIT_MESSAGE_SUFFIX</code> default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>This is used to add a suffix to commit messages. Usually left empty except for internal use (multiple base branches, and vulnerability alerts).</p>"},{"location":"configuration-options/#commitmessagetopic","title":"commitMessageTopic","text":"<p>The upgrade topic/noun used in commit messages and PR titles.</p> Name Value type string default <code>\"dependency {{depName}}\"</code> env <code>RENOVATE_COMMIT_MESSAGE_TOPIC</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>You can use <code>commitMessageTopic</code> to change the <code>commitMessage</code> and <code>prTitle</code> without copy/pasting the whole string. The \"topic\" usually refers to the dependency being updated, for example: <code>\"dependency react\"</code>.</p> <p>We recommend you use <code>matchManagers</code> and <code>commitMessageTopic</code> in a <code>packageRules</code> array to set the commit message topic, like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"github-actions\"],\n\"commitMessageTopic\": \"{{depName}}\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#composerignoreplatformreqs","title":"composerIgnorePlatformReqs","text":"<p>Configure use of <code>--ignore-platform-reqs</code> or <code>--ignore-platform-req</code> for the Composer package manager.</p> Name Value type array subType string cli <code>--composer-ignore-platform-reqs</code> env <code>RENOVATE_COMPOSER_IGNORE_PLATFORM_REQS</code> <p>By default, Renovate will ignore Composer platform requirements as the PHP platform used by Renovate most probably won't match the required PHP environment of your project as configured in your <code>composer.json</code> file.</p> <p>Composer <code>2.2</code> and up will be run with <code>--ignore-platform-req='ext-*' --ignore-platform-req='lib-*'</code>, which ignores extension and library platform requirements but not the PHP version itself and should work in most cases.</p> <p>Older Composer versions will be run with <code>--ignore-platform-reqs</code>, which means that all platform constraints (including the PHP version) will be ignored by default. This can result in updated dependencies that are not compatible with your platform.</p> <p>To customize this behaviour, you can explicitly ignore platform requirements (for example <code>ext-zip</code>) by setting them separately in this array. Each item will be added to the Composer command with <code>--ignore-platform-req</code>, resulting in it being ignored during its invocation. Note that this requires your project to use Composer V2, as V1 doesn't support excluding single platform requirements. The used PHP version will be guessed automatically from your <code>composer.json</code> definition, so <code>php</code> should not be added as explicit dependency.</p> <p>If an empty array is configured, Renovate uses its default behaviour.</p> <p>Set to <code>null</code> (not recommended) to fully omit <code>--ignore-platform-reqs/--ignore-platform-req</code> during Composer invocation. This requires the Renovate image to be fully compatible with your Composer platform requirements in order for the Composer invocation to succeed, otherwise Renovate will fail to create the updated lock file. The Composer output should inform you about the reasons the update failed.</p>"},{"location":"configuration-options/#confidential","title":"confidential","text":"<p>If enabled, issues created by Renovate are set as confidential.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--confidential</code> env <code>RENOVATE_CONFIDENTIAL</code> <p>If enabled, all issues created by Renovate are set as confidential, even in a public repository.</p> <p>Note</p> <p>The Dependency Dashboard issue will also be confidential. By default issues created by Renovate are visible to all users.</p> <p>Note</p> <p>This option is applicable to GitLab only.</p>"},{"location":"configuration-options/#configmigration","title":"configMigration","text":"<p>Enable this to get config migration PRs when needed.</p> Name Value type boolean default <code>false</code> cli <code>--config-migration</code> env <code>RENOVATE_CONFIG_MIGRATION</code> <p>If enabled, Renovate raises a pull request when it needs to migrate the Renovate config file. Renovate only performs <code>configMigration</code> on <code>.json</code> and <code>.json5</code> files.</p> <p>We're adding new features to Renovate bot often. Often you can keep using your Renovate config and benefit from the new features right away. But sometimes you need to update your Renovate configuration. To help you with this, Renovate will create config migration pull requests, when you enable <code>configMigration</code>.</p> <p>Example:</p> <p>After we changed the <code>baseBranches</code> feature, the Renovate configuration migration pull request would make this change:</p> <pre><code>{\n- \"baseBranch\": \"main\"\n+ \"baseBranches\": [\"main\"]\n}\n</code></pre> <p>Warning</p> <p>The <code>configMigration</code> feature writes plain JSON for <code>.json</code> files, and JSON5 for <code>.json5</code> files. Renovate may downgrade JSON5 content to plain JSON. When downgrading JSON5 to JSON Renovate may also remove the JSON5 comments. This can happen because Renovate wrongly converts JSON5 to JSON, thus removing the comments.</p> <p>Note</p> <p>When you close a config migration PR, Renovate ignores it forever. This also means that Renovate won't create a config migration PR in future. If you closed the PR by accident, find the closed PR and re-name the PR title to get a new PR.</p> <p>This feature is flagged as experimental</p> <p>Config migration PRs are still being improved, in particular to reduce the amount of reordering and whitespace changes.To track this feature visit the following GitHub issue #16359.</p>"},{"location":"configuration-options/#configwarningreuseissue","title":"configWarningReuseIssue","text":"<p>Set this to <code>false</code> to make Renovate create a new issue for each config warning, instead of reopening or reusing an existing issue.</p> Name Value type boolean default <code>true</code> cli <code>--config-warning-reuse-issue</code> env <code>RENOVATE_CONFIG_WARNING_REUSE_ISSUE</code> <p>Renovate's default behavior is to reuse/reopen a single Config Warning issue in each repository so as to keep the \"noise\" down. However for some people this has the downside that the config warning won't be sorted near the top if you view issues by creation date. Configure this option to <code>false</code> if you prefer Renovate to open a new issue whenever there is a config warning.</p>"},{"location":"configuration-options/#constraints","title":"constraints","text":"<p>Configuration object to define language or manager version constraints.</p> Name Value type object mergeable true supportedManagers bundler, composer, gomod, npm, pipenv, poetry env <code>RENOVATE_CONSTRAINTS</code> <p>Constraints are used in package managers which use third-party tools to update \"artifacts\" like lock files or checksum files. Typically, the constraint is detected automatically by Renovate from files within the repository and there is no need to manually configure it.</p> <p>Constraints are also used to manually restrict which datasource versions are possible to upgrade to based on their language support. For now this datasource constraint feature only supports <code>python</code>, other compatibility restrictions will be added in the future.</p> <pre><code>{\n\"constraints\": {\n\"python\": \"2.7\"\n}\n}\n</code></pre> <p>If you need to override constraints that Renovate detects from the repository, wrap it in the <code>force</code> object like so:</p> <pre><code>{\n\"force\": {\n\"constraints\": {\n\"node\": \"&lt; 15.0.0\"\n}\n}\n}\n</code></pre> <p>Note</p> <p>Make sure not to mix this up with the term <code>compatibility</code>, which Renovate uses in the context of version releases, e.g. if a Docker image is <code>node:12.16.0-alpine</code> then the <code>-alpine</code> suffix represents <code>compatibility</code>.</p>"},{"location":"configuration-options/#constraintsfiltering","title":"constraintsFiltering","text":"<p>Perform release filtering based on language constraints.</p> Name Value type string allowedValues none, strict default <code>\"none\"</code> env <code>RENOVATE_CONSTRAINTS_FILTERING</code> <p>This option controls whether Renovate filters new releases based on configured or detected <code>constraints</code>. Renovate supports two options:</p> <ul> <li><code>none</code>: No release filtering (all releases allowed)</li> <li><code>strict</code>: If the release's constraints match the package file constraints, then it's included</li> </ul> <p>We are working on adding more advanced filtering options.</p> <p>Note: There must be a <code>constraints</code> object in your Renovate config for this to work. This feature is limited to <code>packagist</code>, <code>npm</code>, and <code>pypi</code> datasources.</p>"},{"location":"configuration-options/#defaultregistryurls","title":"defaultRegistryUrls","text":"<p>List of registry URLs to use as the default for a datasource.</p> Name Value type array subType string <p>Override a datasource's default registries with this config option. The datasources's <code>customRegistrySupport</code> value must be <code>true</code> for the config option to work.</p> <p>Default registries are only used when both:</p> <ul> <li>The manager did not extract any <code>registryUrls</code> values, and</li> <li>No <code>registryUrls</code> values have been applied via config, such as <code>packageRules</code></li> </ul> <p>Think of <code>defaultRegistryUrls</code> as a way to specify the \"fallback\" registries for a datasource, for use when no <code>registryUrls</code> are extracted or configured. Compare that to <code>registryUrls</code>, which are a way to override registries.</p>"},{"location":"configuration-options/#dependencydashboard","title":"dependencyDashboard","text":"<p>Whether to create a \"Dependency Dashboard\" issue in the repository.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD</code> <p>Starting from version <code>v26.0.0</code> the \"Dependency Dashboard\" is enabled by default as part of the commonly-used <code>config:base</code> preset.</p> <p>To disable the Dependency Dashboard, add the preset <code>:disableDependencyDashboard</code> or set <code>dependencyDashboard</code> to <code>false</code>.</p> <pre><code>{\n\"extends\": [\"config:base\", \":disableDependencyDashboard\"]\n}\n</code></pre> <p>Configuring <code>dependencyDashboard</code> to <code>true</code> will lead to the creation of a \"Dependency Dashboard\" issue within the repository. This issue has a list of all PRs pending, open, closed (unmerged) or in error. The goal of this issue is to give visibility into all updates that Renovate is managing.</p> <p>Examples of what having a Dependency Dashboard will allow you to do:</p> <ul> <li>View all PRs in one place, rather than having to filter PRs by author</li> <li>Rebase/retry multiple PRs without having to open each individually</li> <li>Override any rate limiting (e.g. concurrent PRs) or scheduling to force Renovate to create a PR that would otherwise be suppressed</li> <li>Recreate an unmerged PR (e.g. for a major update that you postponed by closing the original PR)</li> </ul> <p>Tip</p> <p>Just enabling the Dependency Dashboard doesn't change the \"control flow\" of Renovate. Renovate still creates and manages PRs, and still follows your schedules and rate limits. The Dependency Dashboard gives you extra visibility and control over your updates.</p>"},{"location":"configuration-options/#dependencydashboardapproval","title":"dependencyDashboardApproval","text":"<p>Controls if updates need manual approval from the Dependency Dashboard issue before PRs are created.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard-approval</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_APPROVAL</code> <p>This feature allows you to use Renovate's Dependency Dashboard to force approval of updates before they are created.</p> <p>By setting <code>dependencyDashboardApproval</code> to <code>true</code> in config (including within <code>packageRules</code>), you can tell Renovate to wait for your approval from the Dependency Dashboard before creating a branch/PR. You can approve a pending PR by selecting the checkbox in the Dependency Dashboard issue.</p> <p>Tip</p> <p>When you set <code>dependencyDashboardApproval</code> to <code>true</code> the Dependency Dashboard issue will be created automatically, you do not need to turn on <code>dependencyDashboard</code> explicitly.</p> <p>You can configure Renovate to wait for approval for:</p> <ul> <li>all package upgrades</li> <li>major, minor, patch level upgrades</li> <li>specific package upgrades</li> <li>upgrades coming from specific package managers</li> </ul> <p>If you want to approve all upgrades, set <code>dependencyDashboardApproval</code> to <code>true</code>:</p> <pre><code>{\n\"dependencyDashboardApproval\": true\n}\n</code></pre> <p>If you want to require approval for major updates, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>major</code> object:</p> <pre><code>{\n\"major\": {\n\"dependencyDashboardApproval\": true\n}\n}\n</code></pre> <p>If you want to approve specific packages, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>packageRules</code> entry where you have defined a specific package or pattern.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^@package-name\"],\n\"dependencyDashboardApproval\": true\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#dependencydashboardautoclose","title":"dependencyDashboardAutoclose","text":"<p>Set to <code>true</code> to let Renovate close the Dependency Dashboard issue if there are no more updates.</p> Name Value type boolean default <code>false</code> cli <code>--dependency-dashboard-autoclose</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_AUTOCLOSE</code> <p>You can configure this to <code>true</code> if you prefer Renovate to close an existing Dependency Dashboard whenever there are no outstanding PRs left.</p>"},{"location":"configuration-options/#dependencydashboardfooter","title":"dependencyDashboardFooter","text":"<p>Any text added here will be placed last in the Dependency Dashboard issue body, with a divider separator before it.</p> Name Value type string cli <code>--dependency-dashboard-footer</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_FOOTER</code> default <code>null</code>"},{"location":"configuration-options/#dependencydashboardheader","title":"dependencyDashboardHeader","text":"<p>Any text added here will be placed first in the Dependency Dashboard issue body.</p> Name Value type string default <code>\"This issue lists Renovate updates and detected dependencies. Read the [Dependency Dashboard](https://docs.renovatebot.com/key-concepts/dashboard/) docs to learn more.\"</code> cli <code>--dependency-dashboard-header</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_HEADER</code>"},{"location":"configuration-options/#dependencydashboardlabels","title":"dependencyDashboardLabels","text":"<p>These labels will always be applied on the Dependency Dashboard issue, even when they have been removed manually.</p> Name Value type array subType string cli <code>--dependency-dashboard-labels</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_LABELS</code> <p>The labels only get updated when the Dependency Dashboard issue updates its content and/or title. It is pointless to edit the labels, as Renovate bot restores the labels on each run.</p>"},{"location":"configuration-options/#dependencydashboardtitle","title":"dependencyDashboardTitle","text":"<p>Title for the Dependency Dashboard issue.</p> Name Value type string default <code>\"Dependency Dashboard\"</code> cli <code>--dependency-dashboard-title</code> env <code>RENOVATE_DEPENDENCY_DASHBOARD_TITLE</code> <p>Configure this option if you prefer a different title for the Dependency Dashboard.</p>"},{"location":"configuration-options/#description","title":"description","text":"<p>Plain text description for a config or preset.</p> Name Value type array subType string mergeable true <p>The description field can be used inside any configuration object to add a human-readable description of the object's config purpose. Descriptions fields embedded within presets are also collated as part of the onboarding description.</p>"},{"location":"configuration-options/#digest","title":"digest","text":"<p>Configuration to apply when updating a digest (no change in tag/version).</p> Name Value type object default <pre><code>{\n\"branchTopic\": \"{{{depNameSanitized}}}-digest\",\n\"commitMessageExtra\": \"to {{newDigestShort}}\",\n\"commitMessageTopic\": \"{{{depName}}} digest\"\n}\n</code></pre> mergeable true env <code>RENOVATE_DIGEST</code> <p>Add to this object if you wish to define rules that apply only to PRs that update digests.</p>"},{"location":"configuration-options/#docker","title":"docker","text":"<p>Configuration object for Docker language.</p> Name Value type object default <pre><code>{\"versioning\": \"docker\"}\n</code></pre> mergeable true env <code>RENOVATE_DOCKER</code> <p>Add config here if you wish it to apply to Docker package managers Dockerfile and Docker Compose. If instead you mean to apply settings to any package manager that updates using the Docker datasource, use a package rule instead, e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"labels\": [\"docker-update\"]\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#dotnet","title":"dotnet","text":"<p>Configuration object for .NET language.</p> Name Value type object mergeable true env <code>RENOVATE_DOTNET</code>"},{"location":"configuration-options/#draftpr","title":"draftPR","text":"<p>If set to <code>true</code> then Renovate creates draft PRs, instead of normal status PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms azure, gitea, github, gitlab cli <code>--draft-p-r</code> env <code>RENOVATE_DRAFT_P_R</code> <p>If you want the PRs created by Renovate to be considered as drafts rather than normal PRs, you could add this property to your <code>renovate.json</code>:</p> <pre><code>{\n\"draftPR\": true\n}\n</code></pre> <p>This option is evaluated at PR/MR creation time.</p> <p>Note</p> <p>Forgejo, Gitea and GitLab implement draft status by checking if the PR's title starts with certain strings. This means that <code>draftPR</code> on Forgejo, Gitea and GitLab are incompatible with the legacy method of triggering Renovate to rebase a PR by renaming the PR to start with <code>rebase!</code>.</p>"},{"location":"configuration-options/#enabled","title":"enabled","text":"<p>Enable or disable Renovate bot.</p> Name Value type boolean default <code>true</code> <p>The most common use of <code>enabled</code> is if you want to turn Renovate's functionality off, for some reason.</p> <p>For example, if you wanted to disable Renovate completely on a repository, you could make this your <code>renovate.json</code>:</p> <pre><code>{\n\"enabled\": false\n}\n</code></pre> <p>To disable Renovate for all <code>eslint</code> packages, you can configure a package rule like:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^eslint\"],\n\"enabled\": false\n}\n]\n}\n</code></pre> <p>To disable Renovate for npm <code>devDependencies</code> but keep it for <code>dependencies</code> you could configure:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"npm\"],\n\"matchDepTypes\": [\"devDependencies\"],\n\"enabled\": false\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#enabledmanagers","title":"enabledManagers","text":"<p>A list of package managers to enable. Only managers on the list are enabled.</p> Name Value type array subType string mergeable false cli <code>--enabled-managers</code> env <code>RENOVATE_ENABLED_MANAGERS</code> <p>This is a way to allow only certain package managers and implicitly disable all others.</p> <p>Example:</p> <pre><code>{\n\"enabledManagers\": [\"dockerfile\", \"npm\"]\n}\n</code></pre> <p>For the full list of available managers, see the Supported Managers documentation.</p>"},{"location":"configuration-options/#encrypted","title":"encrypted","text":"<p>An object containing configuration encrypted with project key.</p> Name Value type object cli <code>--encrypted</code> env <code>RENOVATE_ENCRYPTED</code> <p>Before you put any secrets in your repository configuration, encrypt the secrets. You can encrypt secrets using either a HTML page, or the CLI.</p> <p>To encrypt secrets for the hosted Mend Renovate app for github.com with a HTML page, go to app.renovatebot.com/encrypt and complete the form. If you're self-hosting Renovate, you may download and edit the form, to use your own PGP public key.</p> <p>You can also encrypt secrets from the CLI, using the <code>curl</code>, <code>echo</code>, <code>jq</code>, <code>gpg</code>, <code>grep</code> and <code>tr</code> CLI programs. Here is an example:</p> <pre><code>curl https://app.renovatebot.com/renovate.pgp --output renovate.pgp\necho -n '{\"o\":\"your-organization\", \"r\":\"your-repository (optional)\", \"v\":\"your-secret-value\"}' | jq . -c | gpg --encrypt -a --recipient-file renovate.pgp | grep -v '^----' | tr -d '\\n'\n</code></pre> <p>The above script uses:</p> <ul> <li><code>curl</code> to download the Mend Renovate hosted app's public key</li> <li><code>echo</code> to echo a JSON object into <code>jq</code></li> <li><code>jq</code> to validate the JSON and then compact it</li> <li><code>gpg</code> to encrypt the contents</li> <li><code>grep</code> and <code>tr</code> to extract the encrypted payload which we will use</li> </ul> <p>The <code>jq</code> step is optional, you can leave it out if you wish. Its primary value is validating that the string you echo to <code>gpg</code> is valid JSON, and compact.</p> <p>Note</p> <p>Encrypted secrets must have at least an org/group scope, and optionally a repository scope. This means that Renovate will check if a secret's scope matches the current repository before applying it, and warn/discard if there is a mismatch.</p> <p>Encrypted secrets usually have a single organization. But you may encrypt a secret with more than one organization, for example: <code>org1,org2</code>. This way the secret can be used in both the <code>org1</code> and <code>org2</code> organizations.</p> <p>For more information on how to use secrets for private packages, read Private package support.</p>"},{"location":"configuration-options/#excludecommitpaths","title":"excludeCommitPaths","text":"<p>A file matching any of these glob patterns will not be committed, even if the file has been updated.</p> Name Value type array subType string cli <code>--exclude-commit-paths</code> env <code>RENOVATE_EXCLUDE_COMMIT_PATHS</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Be careful you know what you're doing with this option. The initial intended use is to allow the user to exclude certain dependencies from being added/removed/modified when \"vendoring\" dependencies. Example:</p> <pre><code>{\n\"excludeCommitPaths\": [\"vendor/golang.org/x/text/**\"]\n}\n</code></pre> <p>The above would mean Renovate would not include files matching the above glob pattern in the commit, even if it thinks they should be updated.</p>"},{"location":"configuration-options/#extends","title":"extends","text":"<p>Configuration presets to use or extend.</p> Name Value type array subType string env <code>RENOVATE_EXTENDS</code> <p>See shareable config presets for details. Learn how to use presets by reading the Key concepts, Presets page.</p>"},{"location":"configuration-options/#extractversion","title":"extractVersion","text":"<p>A regex (<code>re2</code>) to extract a version from a datasource's raw version string.</p> Name Value type string format regex default <code>null</code> <p>Only use this config option when the raw version strings from the datasource do not match the expected format that you need in your package file. You must define a \"named capture group\" called <code>version</code> like in the examples below.</p> <p>For example, to extract only the major.minor precision from a GitHub release, the following would work:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"foo\"],\n\"extractVersion\": \"^(?&lt;version&gt;v\\\\d+\\\\.\\\\d+)\"\n}\n]\n}\n</code></pre> <p>The above will change a raw version of <code>v1.31.5</code> to <code>v1.31</code>, for example.</p> <p>Alternatively, to strip a <code>release-</code> prefix:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"bar\"],\n\"extractVersion\": \"^release-(?&lt;version&gt;.*)$\"\n}\n]\n}\n</code></pre> <p>The above will change a raw version of <code>release-2.0.0</code> to <code>2.0.0</code>, for example. A similar one could strip leading <code>v</code> prefixes:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"baz\"],\n\"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#fetchreleasenotes","title":"fetchReleaseNotes","text":"<p>Controls if release notes are fetched.</p> Name Value type boolean default <code>true</code> <p>Set this to <code>false</code> if you want to disable release notes fetching.</p> <p>Renovate can fetch release notes when they are hosted on one of these platforms:</p> <ul> <li>GitHub (.com and Enterprise Server)</li> <li>GitLab (.com and CE/EE)</li> </ul> <p>If you are running on any platform except github.com, you need to configure a Personal Access Token to allow Renovate to fetch release notes from github.com.</p> <p>Note</p> <p>Renovate can only show release notes from some platforms and some package managers. We're planning improvements so that Renovate can show more release notes. Read issue 14138 on GitHub to get an overview of the planned work.</p>"},{"location":"configuration-options/#filematch","title":"fileMatch","text":"<p>RegEx (<code>re2</code>) pattern for matching manager files.</p> Name Value type array subType string format regex mergeable true <p><code>fileMatch</code> is used by Renovate to know which files in a repository to parse and extract. <code>fileMatch</code> patterns in the user config are added to the default values and do not replace them. The default <code>fileMatch</code> patterns cannot be removed, so if you need to include or exclude specific paths then use the <code>ignorePaths</code> or <code>includePaths</code> configuration options.</p> <p>Sometimes file matches are really simple - for example with Go Modules Renovate looks for any <code>go.mod</code> file, and you probably don't need to change that default.</p> <p>At other times, the possible files is too vague for Renovate to have any default. For default, Kubernetes manifests can exist in any <code>*.yaml</code> file and we don't want Renovate to parse every single YAML file in every repository just in case some of them have a Kubernetes manifest, so Renovate's default <code>fileMatch</code> for manager <code>kubernetes</code> is actually empty (<code>[]</code>) and needs the user to tell Renovate what directories/files to look in.</p> <p>Finally, there are cases where Renovate's default <code>fileMatch</code> is good, but you may be using file patterns that a bot couldn't possibly guess about. For example, Renovate's default <code>fileMatch</code> for <code>Dockerfile</code> is <code>['(^|/|\\\\.)Dockerfile$', '(^|/)Dockerfile[^/]*$']</code>. This will catch files like <code>backend/Dockerfile</code>, <code>prefix.Dockerfile</code> or <code>Dockerfile-suffix</code>, but it will miss files like <code>ACTUALLY_A_DOCKERFILE.template</code>. Because <code>fileMatch</code> is mergeable, you don't need to duplicate the defaults and could just add the missing file like this:</p> <pre><code>{\n\"dockerfile\": {\n\"fileMatch\": [\"^ACTUALLY_A_DOCKERFILE\\\\.template$\"]\n}\n}\n</code></pre> <p>If you configure <code>fileMatch</code> then it must be within a manager object (e.g. <code>dockerfile</code> in the above example). The full list of supported managers can be found here.</p>"},{"location":"configuration-options/#filterunavailableusers","title":"filterUnavailableUsers","text":"<p>Filter reviewers and assignees based on their availability.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitlab cli <code>--filter-unavailable-users</code> env <code>RENOVATE_FILTER_UNAVAILABLE_USERS</code> <p>When this option is enabled PRs are not assigned to users that are unavailable. This option only works on platforms that support the concept of user availability. For now, you can only use this option on the GitLab platform.</p>"},{"location":"configuration-options/#followtag","title":"followTag","text":"<p>If defined, packages will follow this release tag exactly.</p> Name Value type string default <code>null</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>For <code>followTag</code> to work, the datasource must support distribution streams or tags, like for example npm does.</p> <p>The main usecase is to follow a pre-release tag of a dependency, say TypeScripts's <code>\"insiders\"</code> build:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"typescript\"],\n\"followTag\": \"insiders\"\n}\n]\n}\n</code></pre> <p>If you've set a <code>followTag</code> then Renovate skips its normal major/minor/patch upgrade logic and stable/unstable consistency logic, and instead keeps your dependency version synced strictly to the version in the tag.</p> <p>Renovate follows tags strictly, this can cause problems when a tagged stream is no longer maintained. For example: you're following the <code>next</code> tag, but later the stream you actually want is called <code>stable</code> instead. If <code>next</code> is no longer getting updates, you must switch your <code>followTag</code> to <code>stable</code> to get updates again.</p>"},{"location":"configuration-options/#forkmodedisallowmaintaineredits","title":"forkModeDisallowMaintainerEdits","text":"<p>Disallow maintainers to push to Renovate pull requests when running in fork mode.</p> Name Value type boolean supportedPlatforms github default <code>false</code> cli <code>--fork-mode-disallow-maintainer-edits</code> env <code>RENOVATE_FORK_MODE_DISALLOW_MAINTAINER_EDITS</code> <p>Use <code>forkModeDisallowMaintainerEdits</code> to disallow maintainers from editing Renovate's pull requests when in fork mode.</p> <p>If GitHub pull requests are created from a fork repository, the PR author can decide to allow upstream repository to modify the PR directly.</p> <p>Allowing maintainers to edit pull requests directly is helpful when Renovate pull requests require additional changes. The reviewer can simply push to the pull request without having to create a new PR. More details here.</p> <p>You may decide to disallow edits to Renovate pull requests in order to workaround issues in Renovate where modified fork branches are not deleted properly: See this issue. If this option is enabled, reviewers will need to create a new PR if additional changes are needed.</p> <p>Note</p> <p>This option is only relevant if you set <code>forkToken</code>.</p>"},{"location":"configuration-options/#forkprocessing","title":"forkProcessing","text":"<p>Whether to process forked repositories. By default, all forked repositories are skipped when in <code>autodiscover</code> mode.</p> Name Value type string allowedValues auto, enabled, disabled default <code>\"auto\"</code> cli <code>--fork-processing</code> env <code>RENOVATE_FORK_PROCESSING</code> <p>By default, Renovate skips any forked repositories when in <code>autodiscover</code> mode. It even skips a forked repository that has a Renovate configuration file, because Renovate doesn't know if that file was added by the forked repository.</p> <p>Process a fork in <code>autodiscover</code> mode`</p> <p>If you want Renovate to run on a forked repository when in <code>autodiscover</code> mode then:</p> <ul> <li>Ensure a <code>renovate.json</code> config exists with <code>\"forkProcessing\": \"enabled\"</code> in your repository,</li> <li>Or run the CLI command with <code>--fork-processing=enabled</code></li> </ul> <p>Process a fork in other modes</p> <p>If you're running Renovate in some other mode, for example when giving a list of repositories to Renovate, but want to skip forked repositories: set <code>\"forkProcessing\": \"disabled\"</code> in your global config.</p> <p>When using the hosted GitHub Mend Renovate app</p> <p>The behavior of <code>forkProcessing</code> depends on how you allow Renovate to run on your account.</p> <p>Renovate runs on all repositories</p> <p>If you allow Renovate to run on all your repositories, <code>forkProcessing</code> will be <code>\"disabled\"</code>. To run Renovate on a fork: add <code>\"forkProcessing\": \"enabled\"</code> to the forked repository's <code>renovate.json</code> file.</p> <p>Renovate runs on selected repositories</p> <p>If you allow Renovate to run on \"Selected\" repositories, <code>forkProcessing</code> will be <code>\"enabled\"</code> for each \"Selected\" repository.</p> <p>Allowed filenames</p> <p>Only the <code>onboardingConfigFileName</code> (which defaults to <code>renovate.json</code>) is supported for <code>forkProcessing</code>. You can't use other filenames because Renovate only checks the default filename when using the Git-hosting platform's API.</p>"},{"location":"configuration-options/#gitauthor","title":"gitAuthor","text":"<p>Author to use for Git commits. Must conform to RFC5322.</p> Name Value type string cli <code>--git-author</code> env <code>RENOVATE_GIT_AUTHOR</code> default <code>null</code> <p>You can customize the Git author that's used whenever Renovate creates a commit. The <code>gitAuthor</code> option accepts a RFC5322-compliant string.</p> <p>Danger</p> <p>We strongly recommend that the Git author email you use is unique to Renovate. Otherwise, if another bot or human shares the same email and pushes to one of Renovate's branches then Renovate will mistake the branch as unmodified and potentially force push over the changes.</p>"},{"location":"configuration-options/#gitignoredauthors","title":"gitIgnoredAuthors","text":"<p>Additional Git authors which are ignored by Renovate. Must conform to RFC5322.</p> Name Value type array subType string cli <code>--git-ignored-authors</code> env <code>RENOVATE_GIT_IGNORED_AUTHORS</code> <p>Specify commit authors ignored by Renovate.</p> <p>By default, Renovate will treat any PR as modified if another Git author has added to the branch. When a PR is considered modified, Renovate won't perform any further commits such as if it's conflicted or needs a version update. If you have other bots which commit on top of Renovate PRs, and don't want Renovate to treat these PRs as modified, then add the other Git author(s) to <code>gitIgnoredAuthors</code>.</p> <p>Example:</p> <pre><code>{\n\"gitIgnoredAuthors\": [\"some-bot@example.org\"]\n}\n</code></pre>"},{"location":"configuration-options/#gitlabignoreapprovals","title":"gitLabIgnoreApprovals","text":"<p>Ignore approval rules for MRs created by Renovate, which is useful for automerge.</p> Name Value type boolean default <code>false</code> cli <code>--git-lab-ignore-approvals</code> env <code>RENOVATE_GIT_LAB_IGNORE_APPROVALS</code> <p>Ignore the default project level approval(s), so that Renovate bot can automerge its merge requests, without needing approval(s). Under the hood, it creates a MR-level approval rule where <code>approvals_required</code> is set to <code>0</code>. This option works only when <code>automerge=true</code>, <code>automergeType=pr</code> or <code>automergeType=branch</code>, and <code>platformAutomerge=true</code>. Also, approval rules overriding should not be prevented in GitLab settings.</p>"},{"location":"configuration-options/#gogetdirs","title":"goGetDirs","text":"<p>Directory pattern to run <code>go get</code> on</p> Name Value type array subType string default <pre><code>[\"./...\"]\n</code></pre> supportedManagers gomod cli <code>--go-get-dirs</code> env <code>RENOVATE_GO_GET_DIRS</code> <p>By default, Renovate will run <code>go get -d -t ./...</code> to update the <code>go.sum</code>. If you need to modify this path, for example in order to ignore directories, you can override the default <code>./...</code> value using this option:</p> <pre><code>{\n\"goGetDirs\": [\"./some-project/\", \"./tools/...\"]\n}\n</code></pre>"},{"location":"configuration-options/#golang","title":"golang","text":"<p>Configuration object for Go language.</p> Name Value type object default <pre><code>{\"commitMessageTopic\": \"module {{depName}}\"}\n</code></pre> mergeable true env <code>RENOVATE_GOLANG</code> <p>Configuration added here applies for all Go-related updates. The only supported package manager for Go is the native Go Modules (the <code>gomod</code> manager).</p> <p>For self-hosted users, <code>GOPROXY</code>, <code>GONOPROXY</code>, <code>GOPRIVATE</code> and <code>GOINSECURE</code> environment variables are supported (reference).</p> <p>Usage of <code>direct</code> will fallback to the Renovate-native release fetching mechanism. Also we support the <code>off</code> keyword which will stop any fetching immediately.</p>"},{"location":"configuration-options/#group","title":"group","text":"<p>Config if <code>groupName</code> is enabled.</p> Name Value type object default <pre><code>{\"branchTopic\": \"{{{groupSlug}}}\", \"commitMessageTopic\": \"{{{groupName}}}\"}\n</code></pre> mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>The default configuration for groups are essentially internal to Renovate and you normally shouldn't need to modify them. But you may add settings to any group by defining your own <code>group</code> configuration object.</p>"},{"location":"configuration-options/#groupname","title":"groupName","text":"<p>Human understandable name for the dependency group.</p> Name Value type string cli <code>--group-name</code> env <code>RENOVATE_GROUP_NAME</code> <p>There are multiple cases where it can be useful to group multiple upgrades together. Internally Renovate uses this for branches such as \"Pin Dependencies\", \"Lock File Maintenance\", etc. Another example used previously is to group together all related <code>eslint</code> packages, or perhaps <code>angular</code> or <code>babel</code>. To enable grouping, you configure the <code>groupName</code> field to something non-null.</p> <p>The <code>groupName</code> field allows free text and does not have any semantic interpretation by Renovate. All updates sharing the same <code>groupName</code> will be placed into the same branch/PR. For example, to group all non-major devDependencies updates together into a single PR:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\"devDependencies\"],\n\"matchUpdateTypes\": [\"patch\", \"minor\"],\n\"groupName\": \"devDependencies (non-major)\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#groupslug","title":"groupSlug","text":"<p>Slug to use for group (e.g. in branch name). Slug is calculated from <code>groupName</code> if <code>null</code>.</p> Name Value type string <p>By default, Renovate will \"slugify\" the groupName to determine the branch name. For example if you named your group \"devDependencies (non-major)\" then the branchName would be <code>renovate/devdependencies-non-major</code>. If you wished to override this then you could configure like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\"devDependencies\"],\n\"matchUpdateTypes\": [\"patch\", \"minor\"],\n\"groupName\": \"devDependencies (non-major)\",\n\"groupSlug\": \"dev-dependencies\"\n}\n]\n}\n</code></pre> <p>As a result of the above, the branchName would be <code>renovate/dev-dependencies</code> instead.</p> <p>Note</p> <p>You shouldn't usually need to configure this unless you really care about your branch names.</p>"},{"location":"configuration-options/#hashedbranchlength","title":"hashedBranchLength","text":"<p>If enabled, branch names will use a hashing function to ensure each branch has that length.</p> Name Value type integer env <code>RENOVATE_HASHED_BRANCH_LENGTH</code> <p>Some code hosting systems have restrictions on the branch name lengths, this option lets you get around these restrictions. You can set the <code>hashedBranchLength</code> option to a number of characters that works for your system and then Renovate will generate branch names with the correct length by hashing <code>additionalBranchPrefix</code> and <code>branchTopic</code>, and then truncating the hash so that the full branch name (including <code>branchPrefix</code>) has the right number of characters.</p> <p>Example: If you have set <code>branchPrefix: \"deps-\"</code> and <code>hashedBranchLength: 12</code> it will result in a branch name like <code>deps-5bf36ec</code> instead of the traditional pretty branch name like <code>deps-react-17.x</code>.</p>"},{"location":"configuration-options/#hostrules","title":"hostRules","text":"<p>Host rules/configuration including credentials.</p> Name Value type array subType object default <pre><code>[{\"timeout\": 60000}]\n</code></pre> cli <code>--host-rules</code> mergeable true env <code>RENOVATE_HOST_RULES</code> <p>The primary purpose of <code>hostRules</code> is to configure credentials for host authentication. You tell Renovate how to match against the host you need authenticated, and then you also tell it which credentials to use.</p> <p>The lookup keys for <code>hostRules</code> are: <code>hostType</code> and <code>matchHost</code>, both of which are optional.</p> <p>Supported credential fields are <code>token</code>, <code>username</code>, <code>password</code>, <code>timeout</code>, <code>enabled</code> and <code>insecureRegistry</code>.</p> <p>Example for configuring <code>docker</code> auth:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"docker.io\",\n\"username\": \"&lt;some-username&gt;\",\n\"password\": \"&lt;some-password&gt;\"\n}\n]\n}\n</code></pre> <p>If multiple <code>hostRules</code> match a request, then they will be applied in the following order/priority:</p> <ol> <li>rules with only <code>hostType</code> specified</li> <li>rules with only <code>matchHost</code> specified (sorted by <code>matchHost</code> length if multiple match)</li> <li>rules with both <code>matchHost</code> and <code>hostType</code> specified (sorted by <code>matchHost</code> length if multiple match)</li> </ol> <p>To disable requests to a particular host, you can configure a rule like:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"registry.npmjs.org\",\n\"enabled\": false\n}\n]\n}\n</code></pre> <p>A preset alternative to the above is:</p> <pre><code>{\n\"extends\": [\":disableHost(registry.npmjs.org)\"]\n}\n</code></pre> <p>Note</p> <p>Disabling a host is only 100% effective if added to self-hosted config. Renovate currently still checks its cache for results first before trying to connect, so if a public host is blocked in your repository config (e.g. <code>renovate.json</code>) then it's possible you may get cached results from that host if another repository using the same bot has successfully queried for the same dependency recently.</p>"},{"location":"configuration-options/#abortignorestatuscodes","title":"abortIgnoreStatusCodes","text":"<p>A list of HTTP status codes safe to ignore even when <code>abortOnError=true</code>.</p> Name Value type array subType number parent hostRules <p>This field can be used to configure status codes that Renovate ignores and passes through when <code>abortOnError</code> is set to <code>true</code>. For example to also skip 404 responses then configure the following:</p> <pre><code>{\n\"hostRules\": [\n{\n\"abortOnError\": true,\n\"abortIgnoreStatusCodes\": [404]\n}\n]\n}\n</code></pre> <p>Tip</p> <p>This field is not mergeable, so the last-applied host rule takes precedence.</p>"},{"location":"configuration-options/#abortonerror","title":"abortOnError","text":"<p>If enabled, Renovate aborts its run when HTTP request errors occur.</p> Name Value type boolean parent hostRules default <code>false</code> <p>Use this field to configure Renovate to abort runs for custom hosts. By default, Renovate will only abort for known public hosts, which has the downside that transient errors for other hosts can cause autoclosing of PRs.</p> <p>To abort Renovate runs for http failures from any host:</p> <pre><code>{\n\"hostRules\": [\n{\n\"abortOnError\": true\n}\n]\n}\n</code></pre> <p>To abort Renovate runs for any <code>docker</code> datasource failures:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"docker\",\n\"abortOnError\": true\n}\n]\n}\n</code></pre> <p>To abort Renovate for errors for a specific <code>docker</code> host:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"docker.company.com\",\n\"abortOnError\": true\n}\n]\n}\n</code></pre> <p>When this field is enabled, Renovate will abort its run if it encounters either (a) any low-level http error (e.g. <code>ETIMEDOUT</code>) or (b) gets a response not matching any of the configured <code>abortIgnoreStatusCodes</code> (e.g. <code>500 Internal Error</code>);</p>"},{"location":"configuration-options/#authtype","title":"authType","text":"<p>Authentication type for HTTP header. e.g. <code>\"Bearer\"</code> or <code>\"Basic\"</code>. Use <code>\"Token-Only\"</code> to use only the token without an authorization type.</p> Name Value type string parent hostRules default <code>\"Bearer\"</code> <p>You may use the <code>authType</code> option to create a custom HTTP <code>authorization</code> header. For <code>authType</code> to work, you must also set your own <code>token</code>.</p> <p>Do not set <code>authType=Bearer</code>: it's the default setting for Renovate anyway. Do not set a username or password when you're using <code>authType</code>, as <code>authType</code> doesn't use usernames or passwords.</p> <p>An example for npm basic auth with token:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"npm.custom.org\",\n\"token\": \"&lt;some-token&gt;\",\n\"authType\": \"Basic\"\n}\n]\n}\n</code></pre> <p>This will generate the following header: <code>authorization: Basic &lt;some-token&gt;</code>.</p> <p>To use a bare token in the authorization header (required by e.g. Hex) - use the <code>authType</code> \"Token-Only\":</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"https://hex.pm/api/repos/private_repo/\",\n\"token\": \"&lt;some-token&gt;\",\n\"authType\": \"Token-Only\"\n}\n]\n}\n</code></pre> <p>This will generate the header <code>authorization: &lt;some-token&gt;</code>.</p>"},{"location":"configuration-options/#concurrentrequestlimit","title":"concurrentRequestLimit","text":"<p>Limit concurrent requests per host.</p> Name Value type integer parent hostRules <p>Usually the default setting is fine, but you can use <code>concurrentRequestLimit</code> to limit the number of concurrent outstanding requests. You only need to adjust this setting if a datasource is rate limiting Renovate or has problems with the load. The limit will be set for any host it applies to.</p> <p>Example config:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"api.github.com\",\n\"concurrentRequestLimit\": 2\n}\n]\n}\n</code></pre> <p>Use an exact host for <code>matchHost</code> and not a domain (e.g. <code>api.github.com</code> as shown above and not <code>github.com</code>). Do not combine with <code>hostType</code> in the same rule or it won't work.</p>"},{"location":"configuration-options/#maxrequestspersecond","title":"maxRequestsPerSecond","text":"<p>Limit requests rate per host.</p> Name Value type integer parent hostRules default 0 <p>In addition to <code>concurrentRequestLimit</code>, you can limit the maximum number of requests that can be made per one second. It can be used to set minimal delay between two requests to the same host. Fractional values are allowed, e.g. <code>0.25</code> means 1 request per 4 seconds. Default value <code>0</code> means no limit.</p> <p>Example config:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"api.github.com\",\n\"maxRequestsPerSecond\": 2\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#dnscache","title":"dnsCache","text":"<p>Enable got DNS cache.</p> Name Value type boolean parent hostRules default <code>false</code> <p>Enable got dnsCache support. It uses <code>QuickLRU</code> with a <code>maxSize</code> of <code>1000</code>.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#enablehttp2","title":"enableHttp2","text":"<p>Enable got HTTP/2 support.</p> Name Value type boolean parent hostRules default <code>false</code> <p>Enable got http2 support.</p>"},{"location":"configuration-options/#hosttype","title":"hostType","text":"<p>hostType for a package rule. Can be a platform name or a datasource name.</p> Name Value type string parent hostRules default <code>null</code> <p><code>hostType</code> is another way to filter rules and can be either a platform such as <code>github</code> and <code>bitbucket-server</code>, or it can be a datasource such as <code>docker</code> and <code>rubygems</code>. You usually don't need to configure it in a host rule if you have already configured <code>matchHost</code> and only one host type is in use for those, as is usually the case. <code>hostType</code> can help for cases like an enterprise registry that serves multiple package types and has different authentication for each, although it's often the case that multiple <code>matchHost</code> rules could achieve the same thing.</p>"},{"location":"configuration-options/#insecureregistry","title":"insecureRegistry","text":"<p>Explicitly turn on insecure Docker registry access (HTTP).</p> Name Value type boolean parent hostRules default <code>true</code> <p>Warning</p> <p>For advanced use only! Use at your own risk!</p> <p>Enable this option to allow Renovate to connect to an insecure Docker registry that is http only. This is insecure and is not recommended.</p> <p>Example:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"reg.insecure.com\",\n\"insecureRegistry\": true\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#keepalive","title":"keepalive","text":"<p>Enable HTTP keepalives for hosts.</p> Name Value type boolean parent hostRules default <code>false</code> <p>If enabled, this allows a single TCP connection to remain open for multiple HTTP(S) requests/responses.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#artifactauth","title":"artifactAuth","text":"<p>A list of package managers to enable artifact auth. Only managers on the list are enabled. All are enabled if <code>null</code></p> Name Value type array subType string parent hostRules allowedValues composer <p>You may use this field whenever it is needed to only enable authentication for a specific set of managers.</p> <p>For example, using this option could be used whenever authentication using Git for private composer packages is already being handled through the use of SSH keys, which results in no need for also setting up authentication using tokens.</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"gitlab\",\n\"matchHost\": \"gitlab.myorg.com\",\n\"token\": \"abc123\",\n\"artifactAuth\": [\"composer\"]\n}\n]\n}\n</code></pre> <p>Supported artifactAuth and hostType combinations:</p> artifactAuth hostTypes <code>composer</code> <code>gitlab</code>, <code>packagist</code>, <code>github</code>, <code>git-tags</code> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#matchhost","title":"matchHost","text":"<p>A domain name, host name or base URL to match against.</p> Name Value type string parent hostRules default <code>null</code> <p>This can be a base URL (e.g. <code>https://api.github.com</code>) or a hostname like <code>github.com</code> or <code>api.github.com</code>. If the value starts with <code>http(s)</code> then it will only match against URLs which start with the full base URL. Otherwise, it will be matched by checking if the URL's hostname matches the <code>matchHost</code> directly or ends with it. When checking the end of the hostname, a single dot is prefixed to the value of <code>matchHost</code>, if one is not already present, to ensure it can only match against whole domain segments.</p> <p>The <code>matchHost</code> URL must be the same as the <code>registryUrl</code> set in <code>.npmrc</code>, or you'll get authentication issues when the artifacts are updated when yarn or npm runs.</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"https://gitlab.myorg.com/api/v4/packages/npm/\",\n\"token\": \"abc123\"\n}\n]\n}\n</code></pre> <p>The above corresponds with an <code>.npmrc</code> like the following:</p> <pre><code>registry=https://gitlab.myorg.com/api/v4/packages/npm/\n</code></pre> <p>Note</p> <p>Values containing a URL path but missing a scheme will be prepended with 'https://' (e.g. <code>domain.com/path</code> -&gt; <code>https://domain.com/path</code>)</p>"},{"location":"configuration-options/#timeout","title":"timeout","text":"<p>Timeout (in milliseconds) for queries to external endpoints.</p> Name Value type integer parent hostRules <p>Use this figure to adjust the timeout for queries. The default is 60s, which is quite high. To adjust it down to 10s for all queries, do this:</p> <pre><code>{\n\"hostRules\": [\n{\n\"timeout\": 10000\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#ignoredeprecated","title":"ignoreDeprecated","text":"<p>Avoid upgrading from a non-deprecated version to a deprecated one.</p> Name Value type boolean default <code>true</code> cli <code>--ignore-deprecated</code> env <code>RENOVATE_IGNORE_DEPRECATED</code> <p>By default, Renovate won't update a dependency version to a deprecated release unless the current version was itself deprecated. The goal of this is to make sure you don't upgrade from a non-deprecated version to a deprecated one just because it's higher than the current version.</p> <p>If for some reason you wish to force deprecated updates with Renovate, you can configure <code>ignoreDeprecated</code> to <code>false</code>, but this is not recommended for most situations.</p>"},{"location":"configuration-options/#ignoredeps","title":"ignoreDeps","text":"<p>Dependencies to ignore.</p> Name Value type array subType string mergeable true cli <code>--ignore-deps</code> env <code>RENOVATE_IGNORE_DEPS</code> <p>The <code>ignoreDeps</code> configuration field allows you to define a list of dependency names to be ignored by Renovate. Currently it supports only \"exact match\" dependency names and not any patterns. e.g. to ignore both <code>eslint</code> and <code>eslint-config-base</code> you would add this to your config:</p> <pre><code>{\n\"ignoreDeps\": [\"eslint\", \"eslint-config-base\"]\n}\n</code></pre> <p>The above is the same as if you wrote this package rule:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"eslint\", \"eslint-config-base\"],\n\"enabled\": false\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#ignorepaths","title":"ignorePaths","text":"<p>Skip any package file whose path matches one of these. Can be a string or glob pattern.</p> Name Value type array mergeable false subType string default <pre><code>[\"**/node_modules/**\", \"**/bower_components/**\"]\n</code></pre> cli <code>--ignore-paths</code> env <code>RENOVATE_IGNORE_PATHS</code> <p>Renovate will extract dependencies from every file it finds in a repository, unless that file is explicitly ignored. With this setting you can selectively ignore package files that would normally be \"autodiscovered\" and updated by Renovate.</p> <p>For instance if you have a project with an <code>\"examples/\"</code> directory you wish to ignore:</p> <pre><code>{\n\"ignorePaths\": [\"**/examples/**\"]\n}\n</code></pre> <p>Renovate's default ignore is <code>node_modules</code> and <code>bower_components</code> only. If you are extending from the popular <code>config:base</code> preset then it adds ignore patterns for <code>vendor</code>, <code>examples</code>, <code>test(s)</code> and <code>fixtures</code> directories too.</p>"},{"location":"configuration-options/#ignoreplugins","title":"ignorePlugins","text":"<p>Set this to <code>true</code> if <code>allowPlugins=true</code> but you wish to skip running plugins when updating lock files.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-plugins</code> env <code>RENOVATE_IGNORE_PLUGINS</code> <p>Set this to <code>true</code> if running plugins causes problems. Applicable for Composer only for now.</p>"},{"location":"configuration-options/#ignoreprauthor","title":"ignorePrAuthor","text":"<p>Set to <code>true</code> to fetch the entire list of PRs instead of only those authored by the Renovate user.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-pr-author</code> env <code>RENOVATE_IGNORE_PR_AUTHOR</code> <p>This is usually needed if someone needs to migrate bot accounts, including from hosted app to self-hosted. If <code>ignorePrAuthor</code> is configured to true, it means Renovate will fetch the entire list of repository PRs instead of optimizing to fetch only those PRs which it created itself. You should only want to enable this if you are changing the bot account (e.g. from <code>@old-bot</code> to <code>@new-bot</code>) and want <code>@new-bot</code> to find and update any existing PRs created by <code>@old-bot</code>. It's recommended to revert this setting once that transition period is over and all old PRs are resolved.</p>"},{"location":"configuration-options/#ignorepresets","title":"ignorePresets","text":"<p>A list of presets to ignore, including any that are nested inside an <code>extends</code> array.</p> Name Value type array subType string env <code>RENOVATE_IGNORE_PRESETS</code> <p>Use this if you are extending a complex preset but don't want to use every \"sub preset\" that it includes. For example, consider this config:</p> <pre><code>{\n\"extends\": [\"config:base\"],\n\"ignorePresets\": [\":prHourlyLimit2\"]\n}\n</code></pre> <p>It would take the entire <code>\"config:base\"</code> preset - which has a lot of sub-presets - but ignore the <code>\":prHourlyLimit2\"</code> rule.</p>"},{"location":"configuration-options/#ignorereviewers","title":"ignoreReviewers","text":"<p>Reviewers to be ignored in PR reviewers presence (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--ignore-reviewers</code> env <code>RENOVATE_IGNORE_REVIEWERS</code> <p>By default, Renovate does not add assignees or reviewers to PRs which are configured for automerge. If tests have failed, Renovate then does add them, but only if the assignees and reviewers list is empty. In the case that a user is automatically added as reviewer (such as Renovate Approve bot) and you want to ignore it for the purpose of this decision, add it to the <code>ignoreReviewers</code> list.</p> <pre><code>{\n\"reviewers\": [\"foo\"],\n\"ignoreReviewers\": [\"renovate-approve\"]\n}\n</code></pre>"},{"location":"configuration-options/#ignorescripts","title":"ignoreScripts","text":"<p>Set this to <code>false</code> if <code>allowScripts=true</code> and you wish to run scripts when updating lock files.</p> Name Value type boolean default <code>true</code> supportedManagers npm, composer cli <code>--ignore-scripts</code> env <code>RENOVATE_IGNORE_SCRIPTS</code> <p>Applicable for npm and Composer only for now. Set this to <code>true</code> if running scripts causes problems.</p>"},{"location":"configuration-options/#ignoretests","title":"ignoreTests","text":"<p>Set to <code>true</code> to enable automerging without tests.</p> Name Value type boolean default <code>false</code> cli <code>--ignore-tests</code> env <code>RENOVATE_IGNORE_TESTS</code> <p>Currently Renovate's default behavior is to only automerge if every status check has succeeded.</p> <p>Setting this option to <code>true</code> means that Renovate will ignore all status checks. You can set this if you don't have any status checks but still want Renovate to automerge PRs. Beware: configuring Renovate to automerge without any tests can lead to broken builds on your base branch, please think again before enabling this!</p>"},{"location":"configuration-options/#ignoreunstable","title":"ignoreUnstable","text":"<p>Ignore versions with unstable SemVer.</p> Name Value type boolean cli <code>--ignore-unstable</code> env <code>RENOVATE_IGNORE_UNSTABLE</code> default <code>true</code> <p>By default, Renovate won't update any package versions to unstable versions (e.g. <code>4.0.0-rc3</code>) unless the current version has the same <code>major.minor.patch</code> and was already unstable (e.g. it was already on <code>4.0.0-rc2</code>). Renovate will also not \"jump\" unstable versions automatically, e.g. if you are on <code>4.0.0-rc2</code> and newer versions <code>4.0.0</code> and <code>4.1.0-alpha.1</code> exist then Renovate will update you to <code>4.0.0</code> only. If you need to force permanent unstable updates for a package, you can add a package rule setting <code>ignoreUnstable</code> to <code>false</code>.</p> <p>Also check out the <code>followTag</code> configuration option above if you wish Renovate to keep you pinned to a particular release tag.</p>"},{"location":"configuration-options/#includepaths","title":"includePaths","text":"<p>Include package files only within these defined paths.</p> Name Value type array subType string cli <code>--include-paths</code> env <code>RENOVATE_INCLUDE_PATHS</code> <p>If you wish for Renovate to process only select paths in the repository, use <code>includePaths</code>.</p> <p>Alternatively, if you need to just exclude certain paths in the repository then consider <code>ignorePaths</code> instead. If you are more interested in including only certain package managers (e.g. <code>npm</code>), then consider <code>enabledManagers</code> instead.</p>"},{"location":"configuration-options/#internalchecksassuccess","title":"internalChecksAsSuccess","text":"<p>Whether to consider passing internal checks such as <code>minimumReleaseAge</code> when determining branch status.</p> Name Value type boolean default <code>false</code> cli <code>--internal-checks-as-success</code> env <code>RENOVATE_INTERNAL_CHECKS_AS_SUCCESS</code> <p>By default, internal Renovate checks such as <code>renovate/stability-days</code> are not counted towards a branch being \"green\" or not. This is primarily to prevent automerge when the only check is a passing Renovate check.</p> <p>Internal checks will always be counted/considered if they are in pending or failed states. If there are multiple passing checks for a branch, including non-Renovate ones, then this setting won't make any difference.</p> <p>Change this setting to <code>true</code> if you want to use internal Renovate checks towards a passing branch result.</p>"},{"location":"configuration-options/#internalchecksfilter","title":"internalChecksFilter","text":"<p>When and how to filter based on internal checks.</p> Name Value type string allowedValues strict, flexible, none default <code>\"strict\"</code> cli <code>--internal-checks-filter</code> env <code>RENOVATE_INTERNAL_CHECKS_FILTER</code> <p>This setting determines whether Renovate controls when and how filtering of internal checks are performed, particularly when multiple versions of the same update type are available. Currently this applies to the <code>minimumReleaseAge</code> check only.</p> <ul> <li><code>none</code>: No filtering will be performed, and the highest release will be used regardless of whether it's pending or not</li> <li><code>strict</code>: All pending releases will be filtered. PRs will be skipped unless a non-pending version is available</li> <li><code>flexible</code>: Similar to strict, but in the case where all versions are pending then a PR will be created with the highest pending version</li> </ul> <p>The <code>flexible</code> mode can result in \"flapping\" of Pull Requests, for example: a pending PR with version <code>1.0.3</code> is first released but then downgraded to <code>1.0.2</code> once it passes <code>minimumReleaseAge</code>. We recommend that you use the <code>strict</code> mode, and enable the <code>dependencyDashboard</code> so that you can see suppressed PRs.</p>"},{"location":"configuration-options/#java","title":"java","text":"<p>Configuration object for all Java package managers.</p> Name Value type object mergeable true env <code>RENOVATE_JAVA</code> <p>Use this configuration option for shared config across all Java projects (Gradle and Maven).</p>"},{"location":"configuration-options/#js","title":"js","text":"<p>Configuration object for JavaScript language.</p> Name Value type object mergeable true cli <code>--js</code> env <code>RENOVATE_JS</code> <p>Use this configuration option for shared config across npm/Yarn/pnpm and meteor package managers.</p>"},{"location":"configuration-options/#labels","title":"labels","text":"<p>Labels to set in Pull Request.</p> Name Value type array subType string cli <code>--labels</code> env <code>RENOVATE_LABELS</code> <p>By default, Renovate won't add any labels to PRs. If you want Renovate to add labels to PRs it creates then define a <code>labels</code> array of one or more label strings. If you want the same label(s) for every PR then you can configure it at the top level of config. However you can also fully override them on a per-package basis.</p> <p>Consider this example:</p> <pre><code>{\n\"labels\": [\"dependencies\"],\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"labels\": [\"linting\"]\n}\n]\n}\n</code></pre> <p>With the above config, every PR raised by Renovate will have the label <code>dependencies</code> while PRs containing <code>eslint</code>-related packages will instead have the label <code>linting</code>.</p> <p>Renovate only adds labels when it creates the PR, which means:</p> <ul> <li>If you remove labels which Renovate added, it won't re-apply them</li> <li>If you change your config, the new/changed labels are not applied to any open PRs</li> </ul> <p>The <code>labels</code> array is non-mergeable, meaning if multiple <code>packageRules</code> match then Renovate uses the last value for <code>labels</code>. If you want to add/combine labels, use the <code>addLabels</code> config option, which is mergeable.</p>"},{"location":"configuration-options/#lockfilemaintenance","title":"lockFileMaintenance","text":"<p>Configuration for lock file maintenance.</p> Name Value type object default <pre><code>{\n\"enabled\": false,\n\"recreateClosed\": true,\n\"rebaseStalePrs\": true,\n\"branchTopic\": \"lock-file-maintenance\",\n\"commitMessageAction\": \"Lock file maintenance\",\n\"commitMessageTopic\": null,\n\"commitMessageExtra\": null,\n\"schedule\": [\"before 5am on monday\"],\n\"groupName\": null,\n\"prBodyDefinitions\": {\"Change\": \"All locks refreshed\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_LOCK_FILE_MAINTENANCE</code> <p>This feature can be used to refresh lock files and keep them up-to-date. \"Maintaining\" a lock file means recreating it so that every dependency version within it is updated to the latest. Supported lock files are:</p> <ul> <li><code>.terraform.lock.hcl</code></li> <li><code>Cargo.lock</code></li> <li><code>Chart.lock</code></li> <li><code>composer.lock</code></li> <li><code>flake.lock</code></li> <li><code>Gemfile.lock</code></li> <li><code>gradle.lockfile</code></li> <li><code>jsonnetfile.lock.json</code></li> <li><code>package-lock.json</code></li> <li><code>packages.lock.json</code></li> <li><code>Pipfile.lock</code></li> <li><code>pnpm-lock.yaml</code></li> <li><code>poetry.lock</code></li> <li><code>pubspec.lock</code></li> <li><code>pyproject.toml</code></li> <li><code>requirements.txt</code></li> <li><code>yarn.lock</code></li> </ul> <p>Others may be added via feature request.</p> <p>This feature is disabled by default. If you wish to enable this feature then you could add this to your configuration:</p> <pre><code>{\n\"lockFileMaintenance\": { \"enabled\": true }\n}\n</code></pre> <p>To reduce \"noise\" in the repository, it defaults its schedule to <code>\"before 5am on monday\"</code>, i.e. to achieve once-per-week semantics. Depending on its running schedule, Renovate may run a few times within that time window - even possibly updating the lock file more than once - but it hopefully leaves enough time for tests to run and automerge to apply, if configured.</p>"},{"location":"configuration-options/#major","title":"major","text":"<p>Configuration to apply when an update type is <code>major</code>.</p> Name Value type object mergeable true env <code>RENOVATE_MAJOR</code> <p>Add to this object if you wish to define rules that apply only to major updates.</p>"},{"location":"configuration-options/#minimumreleaseage","title":"minimumReleaseAge","text":"<p>Time required before a new release is considered stable.</p> Name Value type string cli <code>--minimum-release-age</code> env <code>RENOVATE_MINIMUM_RELEASE_AGE</code> <p>If this is set and an update has a release timestamp header, then Renovate will check if the set duration has passed.</p> <p>Note: Renovate will wait for the set duration to pass for each separate version. Renovate does not wait until the package has seen no releases for x time-duration(<code>minimumReleaseAge</code>). <code>minimumReleaseAge</code> is not intended to help with slowing down fast releasing project updates. If you want to slow down PRs for a specific package, setup a custom schedule for that package. Read our selective-scheduling help to learn how to set the schedule.</p> <p>If the time since the release is less than the set <code>minimumReleaseAge</code> a \"pending\" status check is added to the branch. If enough days have passed then the \"pending\" status is removed, and a \"passing\" status check is added.</p> <p>Some datasources don't have a release timestamp, in which case this feature is not compatible. Other datasources may have a release timestamp, but Renovate does not support it yet, in which case a feature request needs to be implemented.</p> <p>Maven users: you cannot use <code>minimumReleaseAge</code> if a Maven source returns unreliable <code>last-modified</code> headers.</p> <p>Note</p> <p>Configuring this option will add a <code>renovate/stability-days</code> option to the status checks.</p> <p>There are a couple of uses for <code>minimumReleaseAge</code>:</p>"},{"location":"configuration-options/#suppress-branchpr-creation-for-x-days","title":"Suppress branch/PR creation for X days","text":"<p>If you combine <code>minimumReleaseAge=3 days</code> and <code>internalChecksFilter=\"strict\"</code> then Renovate will hold back from creating branches until 3 or more days have elapsed since the version was released. We recommend that you set <code>dependencyDashboard=true</code> so you can see these pending PRs.</p>"},{"location":"configuration-options/#prevent-holding-broken-npm-packages","title":"Prevent holding broken npm packages","text":"<p>npm packages less than 72 hours (3 days) old can be unpublished, which could result in a service impact if you have already updated to it. Set <code>minimumReleaseAge</code> to <code>3 days</code> for npm packages to prevent relying on a package that can be removed from the registry:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"npm\"],\n\"minimumReleaseAge\": \"3 days\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#await-x-time-duration-before-automerging","title":"Await X time duration before Automerging","text":"<p>If you enabled <code>automerge</code> and <code>minimumReleaseAge</code>, it means that PRs will be created immediately but automerging will be delayed until the time-duration has passed. This works because Renovate will add a \"renovate/stability-days\" pending status check to each branch/PR and that pending check will prevent the branch going green to automerge.</p>"},{"location":"configuration-options/#minor","title":"minor","text":"<p>Configuration to apply when an update type is <code>minor</code>.</p> Name Value type object mergeable true env <code>RENOVATE_MINOR</code> <p>Add to this object if you wish to define rules that apply only to minor updates.</p>"},{"location":"configuration-options/#node","title":"node","text":"<p>Configuration object for Node version renovation.</p> Name Value type object default <pre><code>{\"commitMessageTopic\": \"Node.js\"}\n</code></pre> mergeable true env <code>RENOVATE_NODE</code> <p>Using this configuration option allows you to apply common configuration and policies across all Node.js version updates even if managed by different package managers (<code>npm</code>, <code>yarn</code>, etc.).</p> <p>Check out our Node.js documentation for a comprehensive explanation of how the <code>node</code> option can be used.</p>"},{"location":"configuration-options/#npmtoken","title":"npmToken","text":"<p>npm token used to authenticate with the default registry.</p> Name Value type string cli <code>--npm-token</code> env <code>RENOVATE_NPM_TOKEN</code> default <code>null</code> <p>See Private npm module support for details on how this is used. Typically you would encrypt it and put it inside the <code>encrypted</code> object.</p>"},{"location":"configuration-options/#npmrc","title":"npmrc","text":"<p>String copy of <code>.npmrc</code> file. Use <code>\\n</code> instead of line breaks.</p> Name Value type string cli <code>--npmrc</code> env <code>RENOVATE_NPMRC</code> default <code>null</code> <p>See Private npm module support for details on how this is used.</p>"},{"location":"configuration-options/#npmrcmerge","title":"npmrcMerge","text":"<p>Whether to merge <code>config.npmrc</code> with repo <code>.npmrc</code> content if both are found.</p> Name Value type boolean default <code>false</code> cli <code>--npmrc-merge</code> env <code>RENOVATE_NPMRC_MERGE</code> <p>This option exists to provide flexibility about whether <code>npmrc</code> strings in config should override <code>.npmrc</code> files in the repo, or be merged with them. In some situations you need the ability to force override <code>.npmrc</code> contents in a repo (<code>npmrcMerge=false</code>) while in others you might want to simply supplement the settings already in the <code>.npmrc</code> (<code>npmrcMerge=true</code>). A use case for the latter is if you are a Renovate bot admin and wish to provide a default token for <code>npmjs.org</code> without removing any other <code>.npmrc</code> settings which individual repositories have configured (such as scopes/registries).</p> <p>If <code>false</code> (default), it means that defining <code>config.npmrc</code> will result in any <code>.npmrc</code> file in the repo being overridden and its values ignored. If configured to <code>true</code>, it means that any <code>.npmrc</code> file in the repo will have <code>config.npmrc</code> prepended to it before running <code>npm</code>.</p>"},{"location":"configuration-options/#osvvulnerabilityalerts","title":"osvVulnerabilityAlerts","text":"<p>Use vulnerability alerts from <code>osv.dev</code>.</p> Name Value type boolean default <code>false</code> cli <code>--osv-vulnerability-alerts</code> env <code>RENOVATE_OSV_VULNERABILITY_ALERTS</code> <p>Renovate integrates with OSV, an open-source vulnerability database, to check if extracted dependencies have known vulnerabilities. Set <code>osvVulnerabilityAlerts</code> to <code>true</code> to get pull requests with vulnerability fixes (once they are available).</p> <p>You will only get OSV-based vulnerability alerts for direct dependencies. Renovate only queries the OSV database for dependencies that use one of these datasources:</p> <ul> <li><code>crate</code></li> <li><code>go</code></li> <li><code>hex</code></li> <li><code>maven</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>packagist</code></li> <li><code>pypi</code></li> <li><code>rubygems</code></li> </ul> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.To track this feature visit the following GitHub issue #20542.</p>"},{"location":"configuration-options/#packagerules","title":"packageRules","text":"<p>Rules for matching package names.</p> Name Value type array mergeable true <p><code>packageRules</code> is a powerful feature that lets you apply rules to individual packages or to groups of packages using regex pattern matching.</p> <p>Here is an example if you want to group together all packages starting with <code>eslint</code> into a single branch/PR:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^eslint\"],\n\"groupName\": \"eslint packages\"\n}\n]\n}\n</code></pre> <p>Note how the above uses <code>matchPackagePatterns</code> with a regex value.</p> <p>Here is an example where you might want to limit the \"noisy\" package <code>aws-sdk</code> to updates just once per week:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"aws-sdk\"],\n\"schedule\": [\"after 9pm on sunday\"]\n}\n]\n}\n</code></pre> <p>For Maven dependencies, the package name is <code>&lt;groupId:artefactId&gt;</code>, e.g. <code>\"matchPackageNames\": [\"com.thoughtworks.xstream:xstream\"]</code></p> <p>Note how the above uses <code>matchPackageNames</code> instead of <code>matchPackagePatterns</code> because it is an exact match package name. This is the equivalent of defining <code>\"matchPackagePatterns\": [\"^aws\\-sdk$\"]</code> and hence much simpler. However you can mix together both <code>matchPackageNames</code> and <code>matchPackagePatterns</code> in the same package rule and the rule will be applied if either match. Example:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"neutrino\"],\n\"matchPackagePatterns\": [\"^@neutrino/\"],\n\"groupName\": \"neutrino monorepo\"\n}\n]\n}\n</code></pre> <p>The above rule will group together the <code>neutrino</code> package and any package matching <code>@neutrino/*</code>.</p> <p>Path rules are convenient to use if you wish to apply configuration rules to certain package files using patterns. For example, if you have an <code>examples</code> directory and you want all updates to those examples to use the <code>chore</code> prefix instead of <code>fix</code>, then you could add this configuration:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPaths\": [\"examples/**\"],\n\"extends\": [\":semanticCommitTypeAll(chore)\"]\n}\n]\n}\n</code></pre> <p>If you wish to limit Renovate to apply configuration rules to certain files in the root repository directory, you have to use <code>matchPaths</code> with a <code>minimatch</code> pattern or use <code>matchFiles</code> with an exact match. For example you have multiple <code>package.json</code> and want to use <code>dependencyDashboardApproval</code> only on the root <code>package.json</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchFiles\": [\"package.json\"],\n\"dependencyDashboardApproval\": true\n}\n]\n}\n</code></pre> <p>Tip</p> <p>Renovate evaluates all <code>packageRules</code> and does not stop after the first match. Order your <code>packageRules</code> so the least important rules are at the top, and the most important rules at the bottom. This way important rules override settings from earlier rules if needed.</p> <p>Warning</p> <p>Avoid nesting any <code>object</code>-type configuration in a <code>packageRules</code> array, such as a <code>major</code> or <code>minor</code> block.</p>"},{"location":"configuration-options/#allowedversions","title":"allowedVersions","text":"<p>A version range or regex pattern capturing allowed versions for dependencies.</p> Name Value type string parent packageRules default <code>null</code> <p>Use this - usually within a packageRule - to limit how far to upgrade a dependency. For example, if you wish to upgrade to Angular v1.5 but not to <code>angular</code> v1.6 or higher, you could define this to be <code>&lt;= 1.5</code> or <code>&lt; 1.6.0</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"angular\"],\n\"allowedVersions\": \"&lt;=1.5\"\n}\n]\n}\n</code></pre> <p>The valid syntax for this will be calculated at runtime because it depends on the versioning scheme, which is itself dynamic.</p> <p>This field also supports Regular Expressions if they begin and end with <code>/</code>. For example, the following will enforce that only 3 or 4-part versions are supported, without any prefixes:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"com.thoughtworks.xstream:xstream\"],\n\"allowedVersions\": \"/^[0-9]+\\\\.[0-9]+\\\\.[0-9]+(\\\\.[0-9]+)?$/\"\n}\n]\n}\n</code></pre> <p>This field also supports a special negated regex syntax for ignoring certain versions. Use the syntax <code>!/ /</code> like the following:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"chalk\"],\n\"allowedVersions\": \"!/java$/\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchdeptypes","title":"matchDepTypes","text":"<p>List of depTypes to match (e.g. [<code>peerDependencies</code>]). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field if you want to limit a <code>packageRule</code> to certain <code>depType</code> values. Invalid if used outside of a <code>packageRule</code>.</p>"},{"location":"configuration-options/#excludedepnames","title":"excludeDepNames","text":"<p>Dep names to exclude. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p>"},{"location":"configuration-options/#excludedeppatterns","title":"excludeDepPatterns","text":"<p>Dep name patterns to exclude. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string format regex parent packageRules mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p>"},{"location":"configuration-options/#excludepackagenames","title":"excludePackageNames","text":"<p>Package names to exclude. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Important: Do not mix this up with the option <code>ignoreDeps</code>. Use <code>ignoreDeps</code> instead if all you want to do is have a list of package names for Renovate to ignore.</p> <p>Use <code>excludePackageNames</code> if you want to have one or more exact name matches excluded in your package rule. See also <code>matchPackageNames</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^eslint\"],\n\"excludePackageNames\": [\"eslint-foo\"]\n}\n]\n}\n</code></pre> <p>The above will match all package names starting with <code>eslint</code> but exclude the specific package <code>eslint-foo</code>.</p>"},{"location":"configuration-options/#excludepackagepatterns","title":"excludePackagePatterns","text":"<p>Package name patterns to exclude. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string format regex parent packageRules mergeable true <p>Use this field if you want to have one or more package name patterns excluded in your package rule. See also <code>matchPackagePatterns</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^eslint\"],\n\"excludePackagePatterns\": [\"^eslint-foo\"]\n}\n]\n}\n</code></pre> <p>The above will match all package names starting with <code>eslint</code> but exclude ones starting with <code>eslint-foo</code>.</p>"},{"location":"configuration-options/#excludepackageprefixes","title":"excludePackagePrefixes","text":"<p>Package name prefixes to exclude. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field if you want to have one or more package name prefixes excluded in your package rule, without needing to write a regex. See also <code>matchPackagePrefixes</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePrefixes\": [\"eslint\"],\n\"excludePackagePrefixes\": [\"eslint-foo\"]\n}\n]\n}\n</code></pre> <p>The above will match all package names starting with <code>eslint</code> but exclude ones starting with <code>eslint-foo</code>.</p>"},{"location":"configuration-options/#matchlanguages","title":"matchLanguages","text":"<p>List of languages to match (e.g. <code>[\"python\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field to restrict rules to a particular language. e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"request\"],\n\"matchLanguages\": [\"python\"],\n\"enabled\": false\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchbasebranches","title":"matchBaseBranches","text":"<p>List of strings containing exact matches (e.g. <code>[\"main\"]</code>) and/or regex expressions (e.g. <code>[\"/^release/.*/\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field to restrict rules to a particular branch. e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchBaseBranches\": [\"main\"],\n\"excludePackagePatterns\": [\"^eslint\"],\n\"enabled\": false\n}\n]\n}\n</code></pre> <p>This field also supports Regular Expressions if they begin and end with <code>/</code>. e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchBaseBranches\": [\"/^release/.*/\"],\n\"excludePackagePatterns\": [\"^eslint\"],\n\"enabled\": false\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchmanagers","title":"matchManagers","text":"<p>List of package managers to match (e.g. <code>[\"pipenv\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field to restrict rules to a particular package manager. e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"node\"],\n\"matchManagers\": [\"dockerfile\"],\n\"enabled\": false\n}\n]\n}\n</code></pre> <p>For the full list of available managers, see the Supported Managers documentation.</p>"},{"location":"configuration-options/#matchdatasources","title":"matchDatasources","text":"<p>List of datasources to match (e.g. <code>[\"orb\"]</code>). Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field to restrict rules to a particular datasource. e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"orb\"],\n\"labels\": [\"circleci-orb!!\"]\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchcurrentvalue","title":"matchCurrentValue","text":"<p>A regex to match against the raw <code>currentValue</code> string of a dependency. Valid only within a <code>packageRules</code> object.</p> Name Value type string parent packageRules mergeable true default <code>null</code> <p>This option is matched against the <code>currentValue</code> field of a dependency.</p> <p><code>matchCurrentValue</code> supports Regular Expressions which must begin and end with <code>/</code>. For example, the following enforces that only <code>1.*</code> versions will be used:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"io.github.resilience4j\"],\n\"matchCurrentValue\": \"/^1\\\\./\"\n}\n]\n}\n</code></pre> <p>This field also supports a special negated regex syntax to ignore certain versions. Use the syntax <code>!/ /</code> like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"io.github.resilience4j\"],\n\"matchCurrentValue\": \"!/^0\\\\./\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchcurrentversion","title":"matchCurrentVersion","text":"<p>A version or range of versions to match against the current version of a package. Valid only within a <code>packageRules</code> object.</p> Name Value type string parent packageRules mergeable true default <code>null</code> <p>The <code>currentVersion</code> field will be one of the following (in order of preference):</p> <ul> <li>locked version if a lock file exists</li> <li>resolved version</li> <li>current value</li> </ul> <p>Consider using instead <code>matchCurrentValue</code> if you wish to match against the raw string value of a dependency.</p> <p><code>matchCurrentVersion</code> can be an exact version or a version range:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=1.0.0\",\n\"matchPackageNames\": [\"angular\"]\n}\n]\n}\n</code></pre> <p>The syntax of the version range must follow the versioning scheme used by the matched package(s). This is usually defined by the manager which discovered them or by the default versioning for the package's datasource. For example, a Gradle package would typically need Gradle constraint syntax (e.g. <code>[,7.0)</code>) and not SemVer syntax (e.g. <code>&lt;7.0</code>).</p> <p>This field also supports Regular Expressions which must begin and end with <code>/</code>. For example, the following enforces that only <code>1.*</code> versions will be used:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"io.github.resilience4j\"],\n\"matchCurrentVersion\": \"/^1\\\\./\"\n}\n]\n}\n</code></pre> <p>This field also supports a special negated regex syntax to ignore certain versions. Use the syntax <code>!/ /</code> like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"io.github.resilience4j\"],\n\"matchCurrentVersion\": \"!/^0\\\\./\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchfiles","title":"matchFiles","text":"<p>List of strings to do an exact match against package files with full path. Only works inside a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules <p>Renovate will compare <code>matchFiles</code> for an exact match against the dependency's package file or lock file.</p> <p>For example the following would match <code>package.json</code> but not <code>package/frontend/package.json</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchFiles\": [\"package.json\"]\n}\n]\n}\n</code></pre> <p>Use <code>matchPaths</code> instead if you need more flexible matching.</p>"},{"location":"configuration-options/#matchdepnames","title":"matchDepNames","text":"<p>Dep names to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p>"},{"location":"configuration-options/#matchdeppatterns","title":"matchDepPatterns","text":"<p>Dep name patterns to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string format regex parent packageRules mergeable true <p>Warning</p> <p>For advanced use only! Use at your own risk!</p>"},{"location":"configuration-options/#matchpackagenames","title":"matchPackageNames","text":"<p>Package names to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field if you want to have one or more exact name matches in your package rule. See also <code>excludePackageNames</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"angular\"],\n\"rangeStrategy\": \"pin\"\n}\n]\n}\n</code></pre> <p>The above will configure <code>rangeStrategy</code> to <code>pin</code> only for the package <code>angular</code>.</p>"},{"location":"configuration-options/#matchpackagepatterns","title":"matchPackagePatterns","text":"<p>Package name patterns to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string format regex parent packageRules mergeable true <p>Use this field if you want to have one or more package names patterns in your package rule. See also <code>excludePackagePatterns</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^angular\"],\n\"rangeStrategy\": \"replace\"\n}\n]\n}\n</code></pre> <p>The above will configure <code>rangeStrategy</code> to <code>replace</code> for any package starting with <code>angular</code>.</p>"},{"location":"configuration-options/#matchpackageprefixes","title":"matchPackagePrefixes","text":"<p>Package name prefixes to match. Valid only within a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules mergeable true <p>Use this field to match a package prefix without needing to write a regex expression. See also <code>excludePackagePrefixes</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePrefixes\": [\"angular\"],\n\"rangeStrategy\": \"replace\"\n}\n]\n}\n</code></pre> <p>Just like the earlier <code>matchPackagePatterns</code> example, the above will configure <code>rangeStrategy</code> to <code>replace</code> for any package starting with <code>angular</code>.</p>"},{"location":"configuration-options/#matchpaths","title":"matchPaths","text":"<p>List of strings or glob patterns to match against package files. Only works inside a <code>packageRules</code> object.</p> Name Value type array subType string parent packageRules <p>Renovate finds the file(s) listed in <code>matchPaths</code> with a <code>minimatch</code> glob pattern.</p> <p>For example the following matches any <code>package.json</code>, including files like <code>backend/package.json</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"description\": \"Group dependencies from package.json files\",\n\"matchPaths\": [\"**/package.json\"],\n\"groupName\": \"All package.json changes\"\n}\n]\n}\n</code></pre> <p>The following matches any file in directories starting with <code>app/</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"description\": \"Group all dependencies from the app directory\",\n\"matchPaths\": [\"app/**\"],\n\"groupName\": \"App dependencies\"\n}\n]\n}\n</code></pre> <p>Warning</p> <p>Partial matches for <code>matchPaths</code> are deprecated. Please use a <code>minimatch</code> glob pattern or switch to <code>matchFiles</code> if you need exact matching.</p>"},{"location":"configuration-options/#matchsourceurlprefixes","title":"matchSourceUrlPrefixes","text":"<p>A list of source URL prefixes to match against, commonly used to group monorepos or packages from the same organization.</p> Name Value type array subType string parent packageRules mergeable true <p>Here's an example of where you use this to group together all packages from the <code>renovatebot</code> GitHub org:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchSourceUrlPrefixes\": [\"https://github.com/renovatebot/\"],\n\"groupName\": \"All renovate packages\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchsourceurls","title":"matchSourceUrls","text":"<p>A list of source URLs to exact match against.</p> Name Value type array subType string parent packageRules mergeable true <p>Here's an example of where you use this to group together all packages from the Vue monorepo:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchSourceUrls\": [\"https://github.com/vuejs/vue\"],\n\"groupName\": \"Vue monorepo packages\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchupdatetypes","title":"matchUpdateTypes","text":"<p>Update types to match against (<code>major</code>, <code>minor</code>, <code>pin</code>, <code>pinDigest</code>, etc). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string allowedValues major, minor, patch, pin, pinDigest, digest, lockFileMaintenance, rollback, bump, replacement parent packageRules mergeable true <p>Use <code>matchUpdateTypes</code> to match rules against types of updates. For example to apply a special label to <code>major</code> updates:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchUpdateTypes\": [\"major\"],\n\"labels\": [\"UPDATE-MAJOR\"]\n}\n]\n}\n</code></pre> <p>Warning</p> <p>Packages that follow SemVer are allowed to make breaking changes in any <code>0.x</code> version, even <code>patch</code> and <code>minor</code>. Check if you're using any <code>0.x</code> package, and see if you need custom <code>packageRules</code> for it. When setting up automerge for dependencies, make sure to stop accidental automerges of <code>0.x</code> versions. Read the automerge non-major updates docs for a config example that blocks <code>0.x</code> updates.</p>"},{"location":"configuration-options/#matchconfidence","title":"matchConfidence","text":"<p>Merge confidence levels to match against (<code>low</code>, <code>neutral</code>, <code>high</code>, <code>very high</code>). Valid only within <code>packageRules</code> object.</p> Name Value type array subType string allowedValues low, neutral, high, very high parent packageRules mergeable true <p>Warning</p> <p>This configuration option needs a Mend API key, and is in private beta testing only. API keys are not available for free or via the <code>renovatebot/renovate</code> repository.</p> <p>For example to group high merge confidence updates:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchConfidence\": [\"high\", \"very high\"],\n\"groupName\": \"high merge confidence\"\n}\n]\n}\n</code></pre> <p>Tokens can be configured via <code>hostRules</code> using the <code>\"merge-confidence\"</code> <code>hostType</code>:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"merge-confidence\",\n\"token\": \"********\"\n}\n]\n}\n</code></pre> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#customchangelogurl","title":"customChangelogUrl","text":"<p>If set, Renovate will use this URL to fetch changelogs for a matched dependency. Valid only within a <code>packageRules</code> object.</p> Name Value type string parent packageRules default <code>null</code> <p>Use this field to set the source URL for a package, including overriding an existing one. Source URLs are necessary in order to look up release notes.</p> <p>Using this field we can specify the exact URL to fetch release notes from.</p> <p>Example setting source URL for package \"dummy\":</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"dummy\"],\n\"customChangelogUrl\": \"https://github.com/org/dummy\"\n}\n]\n}\n</code></pre> <p>Note</p> <p>Renovate can fetch changelogs from GitHub and GitLab platforms only, and setting the URL to an unsupported host/platform type won't change that.</p>"},{"location":"configuration-options/#replacementname","title":"replacementName","text":"<p>The name of the new dependency that replaces the old deprecated dependency.</p> Name Value type string parent packageRules default <code>null</code> <p>This config option only works with some managers. We're working to support more managers, subscribe to issue renovatebot/renovate#14149 to follow our progress.</p> <p>Managers which do not support replacement:</p> <ul> <li><code>bazel</code></li> <li><code>git-submodules</code></li> <li><code>gomod</code></li> <li><code>gradle</code></li> <li><code>hermit</code></li> <li><code>homebrew</code></li> <li><code>maven</code></li> <li><code>regex</code></li> </ul> <p>Use the <code>replacementName</code> config option to set the name of a replacement package.</p> <p>Can be used in combination with <code>replacementVersion</code>.</p> <p>You can suggest a new community package rule by editing the <code>replacements.ts</code> file on the Renovate repository and opening a pull request.</p>"},{"location":"configuration-options/#replacementnametemplate","title":"replacementNameTemplate","text":"<p>Controls what the replacement package name.</p> Name Value type string default <code>\"{{{packageName}}}\"</code> parent packageRules <p>Note</p> <p><code>replacementName</code> will take precedence if used within the same package rule.</p> <p>Use the <code>replacementNameTemplate</code> config option to control the replacement name.</p> <p>Use the triple brace <code>{{{ }}}</code> notation to avoid Handlebars escaping any special characters.</p> <p>For example, the following package rule can be used to replace the registry for <code>docker</code> images:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackagePatterns\": [\"^docker\\\\.io/.+\"],\n\"replacementNameTemplate\": \"{{{replace 'docker\\\\.io/' 'ghcr.io/' packageName}}}\"\n}\n]\n}\n</code></pre> <p>Or, to add a registry prefix to any <code>docker</code> images that do not contain an explicit registry:</p> <pre><code>{\n\"packageRules\": [\n{\n\"description\": \"official images\",\n\"matchDatasources\": [\"docker\"],\n\"matchPackagePatterns\": [\"^[a-z-]+$\"],\n\"replacementNameTemplate\": \"some.registry.org/library/{{{packageName}}}\"\n},\n{\n\"description\": \"non-official images\",\n\"matchDatasources\": [\"docker\"],\n\"matchPackagePatterns\": [\"^[a-z-]+/[a-z-]+$\"],\n\"replacementNameTemplate\": \"some.registry.org/{{{packageName}}}\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#replacementversion","title":"replacementVersion","text":"<p>The version of the new dependency that replaces the old deprecated dependency.</p> Name Value type string parent packageRules default <code>null</code> <p>This config option only works with some managers. We're working to support more managers, subscribe to issue renovatebot/renovate#14149 to follow our progress. For a list of managers which do not support replacement read the <code>replacementName</code> config option docs.</p> <p>Use the <code>replacementVersion</code> config option to set the version of a replacement package. Must be used with <code>replacementName</code>. For example to replace the npm package <code>jade</code> with version <code>2.0.0</code> of the package <code>pug</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"npm\"],\n\"matchPackageNames\": [\"jade\"],\n\"replacementName\": \"pug\",\n\"replacementVersion\": \"2.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#patch","title":"patch","text":"<p>Configuration to apply when an update type is <code>patch</code>.</p> Name Value type object mergeable true env <code>RENOVATE_PATCH</code> <p>Add to this object if you wish to define rules that apply only to patch updates.</p>"},{"location":"configuration-options/#php","title":"php","text":"<p>Configuration object for PHP.</p> Name Value type object mergeable true env <code>RENOVATE_PHP</code>"},{"location":"configuration-options/#pin","title":"pin","text":"<p>Configuration to apply when an update type is <code>pin</code>.</p> Name Value type object default <pre><code>{\n\"rebaseWhen\": \"behind-base-branch\",\n\"groupName\": \"Pin Dependencies\",\n\"groupSlug\": \"pin-dependencies\",\n\"commitMessageAction\": \"Pin\",\n\"group\": {\"commitMessageTopic\": \"dependencies\", \"commitMessageExtra\": \"\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_PIN</code> <p>Add to this object if you wish to define rules that apply only to PRs that pin dependencies.</p>"},{"location":"configuration-options/#pindigest","title":"pinDigest","text":"<p>Configuration to apply when pinning a digest (no change in tag/version).</p> Name Value type object default <pre><code>{\n\"groupName\": \"Pin Dependencies\",\n\"groupSlug\": \"pin-dependencies\",\n\"commitMessageAction\": \"Pin\",\n\"group\": {\"commitMessageTopic\": \"dependencies\", \"commitMessageExtra\": \"\"}\n}\n</code></pre> mergeable true env <code>RENOVATE_PIN_DIGEST</code> <p>Add to this object if you wish to define rules that apply only to PRs that pin digests.</p>"},{"location":"configuration-options/#pindigests","title":"pinDigests","text":"<p>Whether to add digests to Dockerfile source images.</p> Name Value type boolean default <code>false</code> cli <code>--pin-digests</code> env <code>RENOVATE_PIN_DIGESTS</code> <p>If enabled Renovate will pin Docker images or GitHub Actions by means of their SHA256 digest and not only by tag so that they are immutable.</p>"},{"location":"configuration-options/#platformautomerge","title":"platformAutomerge","text":"<p>Controls if platform-native auto-merge is used.</p> Name Value type boolean supportedPlatforms azure, gitea, github, gitlab default <code>false</code> cli <code>--platform-automerge</code> env <code>RENOVATE_PLATFORM_AUTOMERGE</code> <p>Warning</p> <p>Before you enable <code>platformAutomerge</code> you should enable your Git hosting platform's capabilities to enforce test passing before PR merge. If you don't do this, the platform might merge Renovate PRs even if the repository's tests haven't started, are in still in progress, or possibly even when they have failed. On GitHub this is called \"Require status checks before merging\", which you can find in the \"Branch protection rules\" section of the settings for your repository. GitHub docs, about protected branches GitHub docs, require status checks before merging If you're using another platform, search their documentation for a similar feature.</p> <p>If you have enabled <code>automerge</code> and set <code>automergeType=pr</code> in the Renovate config, then you can also set <code>platformAutomerge</code> to <code>true</code> to speed up merging via the platform's native automerge functionality.</p> <p>Renovate tries platform-native automerge only when it initially creates the PR. Any PR that is being updated will be automerged with the Renovate-based automerge.</p> <p><code>platformAutomerge</code> will configure PRs to be merged after all (if any) branch policies have been met. This option is available for Azure, GitHub and GitLab. It falls back to Renovate-based automerge if the platform-native automerge is not available.</p> <p>You can also fine-tune the behavior by setting <code>packageRules</code> if you want to use it selectively (e.g. per-package).</p> <p>Note that the outcome of <code>rebaseWhen=auto</code> can differ when <code>platformAutomerge=true</code>. Normally when you set <code>rebaseWhen=auto</code> Renovate rebases any branch that's behind the base branch automatically, and some people rely on that. This behavior is no longer guaranteed when you enable <code>platformAutomerge</code> because the platform might automerge a branch which is not up-to-date. For example, GitHub might automerge a Renovate branch even if it's behind the base branch at the time.</p> <p>Please check platform specific docs for version requirements.</p> <p>To learn how to use GitHub's Merge Queue feature with Renovate, read our Key Concepts, Automerge, GitHub Merge Queue docs.</p>"},{"location":"configuration-options/#platformcommit","title":"platformCommit","text":"<p>Use platform API to perform commits instead of using Git directly.</p> Name Value type boolean default <code>false</code> supportedPlatforms github cli <code>--platform-commit</code> env <code>RENOVATE_PLATFORM_COMMIT</code> <p>Only use this option if you run Renovate as a GitHub App. It does not apply when you use a Personal Access Token as credential.</p> <p>When <code>platformCommit</code> is enabled, Renovate will create commits with GitHub's API instead of using <code>git</code> directly. This way Renovate can use GitHub's Commit signing support for bots and other GitHub Apps feature.</p>"},{"location":"configuration-options/#postupdateoptions","title":"postUpdateOptions","text":"<p>Enable post-update options to be run after package/artifact updating.</p> Name Value type array subType string allowedValues bundlerConservative, helmUpdateSubChartArchives, gomodMassage, gomodUpdateImportPaths, gomodTidy, gomodTidy1.17, gomodTidyE, npmDedupe, pnpmDedupe, yarnDedupeFewer, yarnDedupeHighest mergeable true <p>Table with options:</p> Name Description <code>bundlerConservative</code> Enable conservative mode for <code>bundler</code> (Ruby dependencies). This will only update the immediate dependency in the lockfile instead of all subdependencies. <code>gomodMassage</code> Enable massaging <code>replace</code> directives before calling <code>go</code> commands. <code>gomodTidy</code> Run <code>go mod tidy</code> after Go module updates. This is implicitly enabled for major module updates when <code>gomodUpdateImportPaths</code> is enabled. <code>gomodTidy1.17</code> Run <code>go mod tidy -compat=1.17</code> after Go module updates. <code>gomodTidyE</code> Run <code>go mod tidy -e</code> after Go module updates. <code>gomodUpdateImportPaths</code> Update source import paths on major module updates, using mod. <code>npmDedupe</code> Run <code>npm dedupe</code> after <code>package-lock.json</code> updates. <code>pnpmDedupe</code> Run <code>pnpm dedupe</code> after <code>pnpm-lock.yaml</code> updates. <code>yarnDedupeFewer</code> Run <code>yarn-deduplicate --strategy fewer</code> after <code>yarn.lock</code> updates. <code>yarnDedupeHighest</code> Run <code>yarn-deduplicate --strategy highest</code> (<code>yarn dedupe --strategy highest</code> for Yarn &gt;=2.2.0) after <code>yarn.lock</code> updates."},{"location":"configuration-options/#postupgradetasks","title":"postUpgradeTasks","text":"<p>Post-upgrade tasks that are executed before a commit is made by Renovate.</p> Name Value type object default <pre><code>{\"commands\": [], \"fileFilters\": [], \"executionMode\": \"update\"}\n</code></pre> cli <code>--post-upgrade-tasks</code> env <code>RENOVATE_POST_UPGRADE_TASKS</code> <p>Note</p> <p>Post-upgrade tasks can only be used on self-hosted Renovate instances.</p> <p>Post-upgrade tasks are commands that are executed by Renovate after a dependency has been updated but before the commit is created. The intention is to run any additional command line tools that would modify existing files or generate new files when a dependency changes.</p> <p>Each command must match at least one of the patterns defined in <code>allowedPostUpgradeCommands</code> (a global-only configuration option) in order to be executed. If the list of allowed tasks is empty then no tasks will be executed.</p> <p>e.g.</p> <pre><code>{\n\"postUpgradeTasks\": {\n\"commands\": [\"tslint --fix\"],\n\"fileFilters\": [\"yarn.lock\", \"**/*.js\"],\n\"executionMode\": \"update\"\n}\n}\n</code></pre> <p>The <code>postUpgradeTasks</code> configuration consists of three fields:</p>"},{"location":"configuration-options/#commands","title":"commands","text":"<p>A list of post-upgrade commands that are executed before a commit is made by Renovate.</p> Name Value type array subType string parent postUpgradeTasks env <code>RENOVATE_COMMANDS</code> <p>A list of commands that are executed after Renovate has updated a dependency but before the commit is made.</p> <p>You can use variable templating in your commands if <code>allowPostUpgradeCommandTemplating</code> is enabled.</p> <p>Note</p> <p>Do not use <code>git add</code> in your commands to add new files to be tracked, add them by including them in your <code>fileFilters</code> instead.</p>"},{"location":"configuration-options/#filefilters","title":"fileFilters","text":"<p>Files that match the glob pattern will be committed after running a post-upgrade task.</p> Name Value type array subType string parent postUpgradeTasks env <code>RENOVATE_FILE_FILTERS</code> <p>A list of glob-style matchers that determine which files will be included in the final commit made by Renovate.</p>"},{"location":"configuration-options/#executionmode","title":"executionMode","text":"<p>Controls when the post upgrade tasks run: on every update, or once per upgrade branch.</p> Name Value type string parent postUpgradeTasks allowedValues update, branch default <code>\"update\"</code> env <code>RENOVATE_EXECUTION_MODE</code> <p>Defaults to <code>update</code>, but can also be set to <code>branch</code>. This sets the level the postUpgradeTask runs on, if set to <code>update</code> the postUpgradeTask will be executed for every dependency on the branch. If set to <code>branch</code> the postUpgradeTask is executed for the whole branch.</p>"},{"location":"configuration-options/#prbodycolumns","title":"prBodyColumns","text":"<p>List of columns to use in PR bodies.</p> Name Value type array subType string default <pre><code>[\"Package\", \"Type\", \"Update\", \"Change\", \"Pending\"]\n</code></pre> cli <code>--pr-body-columns</code> env <code>RENOVATE_PR_BODY_COLUMNS</code> <p>Use this array to provide a list of column names you wish to include in the PR tables.</p> <p>For example, if you wish to add the package file name to the table, you would add this to your config:</p> <pre><code>{\n\"prBodyColumns\": [\n\"Package\",\n\"Update\",\n\"Type\",\n\"New value\",\n\"Package file\",\n\"References\"\n]\n}\n</code></pre> <p>Note</p> <p>\"Package file\" is predefined in the default <code>prBodyDefinitions</code> object so does not require a definition before it can be used.</p>"},{"location":"configuration-options/#prbodydefinitions","title":"prBodyDefinitions","text":"<p>Table column definitions to use in PR tables.</p> Name Value type object freeChoice true mergeable true default <pre><code>{\n\"Package\": \"{{{depNameLinked}}}\",\n\"Type\": \"{{{depType}}}\",\n\"Update\": \"{{{updateType}}}\",\n\"Current value\": \"{{{currentValue}}}\",\n\"New value\": \"{{{newValue}}}\",\n\"Change\": \"`{{{displayFrom}}}` -&gt; `{{{displayTo}}}`\",\n\"Pending\": \"{{{displayPending}}}\",\n\"References\": \"{{{references}}}\",\n\"Package file\": \"{{{packageFile}}}\"\n}\n</code></pre> cli <code>--pr-body-definitions</code> env <code>RENOVATE_PR_BODY_DEFINITIONS</code> <p>You can configure this object to either (a) modify the template for an existing table column in PR bodies, or (b) you wish to add a definition for a new/additional column.</p> <p>Here is an example of modifying the default value for the <code>\"Package\"</code> column to put it inside a <code>&lt;code&gt;&lt;/code&gt;</code> block:</p> <pre><code>{\n\"prBodyDefinitions\": {\n\"Package\": \"`{{{depName}}}`\"\n}\n}\n</code></pre> <p>Here is an example of adding a custom <code>\"Sourcegraph\"</code> column definition:</p> <pre><code>{\n\"prBodyDefinitions\": {\n\"Sourcegraph\": \"[![code search for \\\"{{{depName}}}\\\"](https://sourcegraph.com/search/badge?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}}&amp;label=matches)](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}})\"\n},\n\"prBodyColumns\": [\n\"Package\",\n\"Update\",\n\"New value\",\n\"References\",\n\"Sourcegraph\"\n]\n}\n</code></pre> <p>Tip</p> <p>Columns must also be included in the <code>prBodyColumns</code> array in order to be used, so that's why it's included above in the example.</p>"},{"location":"configuration-options/#prbodynotes","title":"prBodyNotes","text":"<p>List of additional notes/templates to include in the Pull Request body.</p> Name Value type array subType string mergeable true cli <code>--pr-body-notes</code> env <code>RENOVATE_PR_BODY_NOTES</code> <p>Use this field to add custom content inside PR bodies, including conditionally.</p> <p>e.g. if you wish to add an extra Warning to major updates:</p> <pre><code>{\n\"prBodyNotes\": [\"{{#if isMajor}}:warning: MAJOR MAJOR MAJOR :warning:{{/if}}\"]\n}\n</code></pre>"},{"location":"configuration-options/#prbodytemplate","title":"prBodyTemplate","text":"<p>Pull Request body template. Controls which sections are rendered in the body of the pull request.</p> Name Value type string default <code>\"{{{header}}}{{{table}}}{{{warnings}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{controls}}}{{{footer}}}\"</code> env <code>RENOVATE_PR_BODY_TEMPLATE</code> <p>The available sections are:</p> <ul> <li><code>header</code></li> <li><code>table</code></li> <li><code>warnings</code></li> <li><code>notes</code></li> <li><code>changelogs</code></li> <li><code>configDescription</code></li> <li><code>controls</code></li> <li><code>footer</code></li> </ul>"},{"location":"configuration-options/#prconcurrentlimit","title":"prConcurrentLimit","text":"<p>Limit to a maximum of x concurrent branches/PRs. 0 means no limit.</p> Name Value type integer default 10 cli <code>--pr-concurrent-limit</code> env <code>RENOVATE_PR_CONCURRENT_LIMIT</code> <p>This setting - if enabled - limits Renovate to a maximum of <code>x</code> concurrent PRs open at any time.</p> <p>This limit is enforced on a per-repository basis.</p> <p>Note</p> <p>Renovate always creates security PRs, even if the concurrent PR limit is already reached. Security PRs have <code>[SECURITY]</code> in their PR title.</p>"},{"location":"configuration-options/#prcreation","title":"prCreation","text":"<p>When to create the PR for a branch.</p> Name Value type string allowedValues immediate, not-pending, status-success, approval default <code>\"immediate\"</code> cli <code>--pr-creation</code> env <code>RENOVATE_PR_CREATION</code> <p>This setting tells Renovate when you would like it to raise PRs:</p> <ul> <li><code>immediate</code> (default): Renovate will create PRs immediately after creating the corresponding branch</li> <li><code>not-pending</code>: Renovate will wait until status checks have completed (passed or failed) before raising the PR</li> <li><code>status-success</code>: Renovate won't raise PRs unless tests pass</li> </ul> <p>Renovate defaults to <code>immediate</code> but you might want to change this to <code>not-pending</code> instead.</p> <p>With prCreation set to <code>immediate</code>, you'll get a Pull Request and possible associated notification right away when a new update is available. You'll have to wait until the checks have been performed, before you can decide if you want to merge the PR or not.</p> <p>With prCreation set to <code>not-pending</code>, Renovate creates the PR only once all tests have passed or failed. When you get the PR notification, you can take action immediately, as you have the full test results. If there are no checks associated, Renovate will create the PR once 24 hrs have elapsed since creation of the commit.</p> <p>With prCreation set to <code>status-success</code>, Renovate creates the PR only if/ once all tests have passed.</p> <p>For all cases of non-immediate PR creation, Renovate doesn't run instantly once tests complete. Instead, Renovate can create the PR on its next run after relevant tests have completed, so there will be some delay.</p>"},{"location":"configuration-options/#prfooter","title":"prFooter","text":"<p>Text added here will be placed last in the PR body, with a divider separator before it.</p> Name Value type string default <code>\"This PR has been generated by [Renovate Bot](https://github.com/renovatebot/renovate).\"</code> cli <code>--pr-footer</code> env <code>RENOVATE_PR_FOOTER</code>"},{"location":"configuration-options/#prheader","title":"prHeader","text":"<p>Text added here will be placed first in the PR body.</p> Name Value type string cli <code>--pr-header</code> env <code>RENOVATE_PR_HEADER</code> default <code>null</code>"},{"location":"configuration-options/#prhourlylimit","title":"prHourlyLimit","text":"<p>Rate limit PRs to maximum x created per hour. 0 means no limit.</p> Name Value type integer default 2 cli <code>--pr-hourly-limit</code> env <code>RENOVATE_PR_HOURLY_LIMIT</code> <p>This config option slows down the rate at which Renovate creates PRs.</p> <p>Slowing Renovate down can be handy when you're onboarding a repository with a lot of dependencies. What may happen if you don't set a <code>prHourlyLimit</code>:</p> <ol> <li>Renovate creates an Onboarding PR</li> <li>You merge the onboarding PR to activate Renovate</li> <li>Renovate creates a \"Pin Dependencies\" PR (if needed)</li> <li>You merge the \"Pin Dependencies\" PR</li> <li>Renovate creates every single upgrade PR needed, which can be a lot</li> </ol> <p>The above may cause:</p> <ul> <li>Renovate bot's PRs to overwhelm your CI systems</li> <li>a lot of test runs, because branches are rebased each time you merge a PR</li> </ul> <p>To prevent these problems you can set <code>prHourlyLimit</code> to a value like <code>1</code> or <code>2</code>. Renovate will only create that many PRs within each hourly period (<code>:00</code> through <code>:59</code>). You still get all the PRs in a reasonable time, perhaps over a day or so. Now you can merge the PRs at a do-able rate, once the tests pass.</p> <p>Tip</p> <p>The <code>prHourlyLimit</code> setting does not limit the number of concurrently open PRs, only the rate at which PRs are created. The <code>prHourlyLimit</code> setting is enforced on a per-repository basis.</p>"},{"location":"configuration-options/#prnotpendinghours","title":"prNotPendingHours","text":"<p>Timeout in hours for when <code>prCreation=not-pending</code>.</p> Name Value type integer default 25 cli <code>--pr-not-pending-hours</code> env <code>RENOVATE_PR_NOT_PENDING_HOURS</code> <p>If you configure <code>prCreation=not-pending</code>, then Renovate will wait until tests are non-pending (all pass or at least one fails) before creating PRs. However there are cases where PRs may remain in pending state forever, e.g. absence of tests or status checks that are configure to pending indefinitely. This is why we configured an upper limit for how long we wait until creating a PR.</p> <p>Note</p> <p>If the option <code>minimumReleaseAge</code> is non-zero then Renovate disables the <code>prNotPendingHours</code> functionality.</p>"},{"location":"configuration-options/#prpriority","title":"prPriority","text":"<p>Set sorting priority for PR creation. PRs with higher priority are created first, negative priority last.</p> Name Value type integer default 0 <p>Sometimes Renovate needs to rate limit its creation of PRs, e.g. hourly or concurrent PR limits. In such cases it sorts/prioritizes by default based on the update type (e.g. patches raised before minor, minor before major). If you have dependencies that are more or less important than others then you can use the <code>prPriority</code> field for PR sorting. The default value is 0, so setting a negative value will make dependencies sort last, while higher values sort first.</p> <p>Here's an example of how you would define PR priority so that devDependencies are raised last and <code>react</code> is raised first:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\"devDependencies\"],\n\"prPriority\": -1\n},\n{\n\"matchPackageNames\": [\"react\"],\n\"prPriority\": 5\n}\n]\n}\n</code></pre>"},{"location":"configuration-options/#prtitle","title":"prTitle","text":"<p>Pull Request title template (deprecated). Inherits from <code>commitMessage</code> if null.</p> Name Value type string env <code>RENOVATE_PR_TITLE</code> <p>The PR title is important for some of Renovate's matching algorithms (e.g. determining whether to recreate a PR or not) so ideally don't modify it much.</p>"},{"location":"configuration-options/#prtitlestrict","title":"prTitleStrict","text":"<p>Whether to bypass appending extra context to the Pull Request title.</p> Name Value type boolean default <code>false</code> env <code>RENOVATE_PR_TITLE_STRICT</code> <p>There are certain scenarios where the default behavior appends extra context to the PR title.</p> <p>These scenarios include if a <code>baseBranch</code> or if there is a grouped update and either <code>separateMajorMinor</code> or <code>separateMinorPatch</code> is true.</p> <p>Using this option allows you to skip these default behaviors and use other templating methods to control the format of the PR title.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"configuration-options/#printconfig","title":"printConfig","text":"<p>If enabled, Renovate logs the fully resolved config for each repository, plus the fully resolved presets.</p> Name Value type boolean default <code>false</code> cli <code>--print-config</code> env <code>RENOVATE_PRINT_CONFIG</code> <p>This option is useful for troubleshooting, particularly if using presets. e.g. run <code>renovate foo/bar --print-config &gt; config.log</code> and the fully-resolved config will be included in the log file.</p>"},{"location":"configuration-options/#prunebranchafterautomerge","title":"pruneBranchAfterAutomerge","text":"<p>Set to <code>true</code> to enable branch pruning after automerging.</p> Name Value type boolean default <code>true</code> cli <code>--prune-branch-after-automerge</code> env <code>RENOVATE_PRUNE_BRANCH_AFTER_AUTOMERGE</code> <p>By default Renovate deletes, or \"prunes\", the branch after automerging. Set <code>pruneBranchAfterAutomerge</code> to <code>false</code> to keep the branch after automerging.</p>"},{"location":"configuration-options/#prunestalebranches","title":"pruneStaleBranches","text":"<p>Set to <code>false</code> to disable pruning stale branches.</p> Name Value type boolean default <code>true</code> cli <code>--prune-stale-branches</code> env <code>RENOVATE_PRUNE_STALE_BRANCHES</code> <p>Configure to <code>false</code> to disable deleting orphan branches and autoclosing PRs. Defaults to <code>true</code>.</p>"},{"location":"configuration-options/#python","title":"python","text":"<p>Configuration object for Python.</p> Name Value type object mergeable true env <code>RENOVATE_PYTHON</code> <p>Currently the only Python package manager is <code>pip</code> - specifically for <code>requirements.txt</code> and <code>requirements.pip</code> files - so adding any config to this <code>python</code> object is essentially the same as adding it to the <code>pip_requirements</code> object instead.</p>"},{"location":"configuration-options/#rangestrategy","title":"rangeStrategy","text":"<p>Determines how to modify or update existing ranges.</p> Name Value type string default <code>\"auto\"</code> allowedValues auto, pin, bump, replace, widen, update-lockfile, in-range-only <p>Behavior:</p> <ul> <li><code>auto</code> = Renovate decides (this will be done on a manager-by-manager basis)</li> <li><code>pin</code> = convert ranges to exact versions, e.g. <code>^1.0.0</code> -&gt; <code>1.1.0</code></li> <li><code>bump</code> = e.g. bump the range even if the new version satisfies the existing range, e.g. <code>^1.0.0</code> -&gt; <code>^1.1.0</code></li> <li><code>replace</code> = Replace the range with a newer one if the new version falls outside it, and update nothing otherwise</li> <li><code>widen</code> = Widen the range with newer one, e.g. <code>^1.0.0</code> -&gt; <code>^1.0.0 || ^2.0.0</code></li> <li><code>update-lockfile</code> = Update the lock file when in-range updates are available, otherwise <code>replace</code> for updates out of range. Works for <code>bundler</code>, <code>composer</code>, <code>npm</code>, <code>yarn</code>, <code>terraform</code> and <code>poetry</code> so far</li> <li><code>in-range-only</code> = Update the lock file when in-range updates are available, ignore package file updates</li> </ul> <p>Renovate's <code>\"auto\"</code> strategy works like this for npm:</p> <ol> <li>Widen <code>peerDependencies</code></li> <li>If an existing range already ends with an \"or\" operator like <code>\"^1.0.0 || ^2.0.0\"</code>, then Renovate widens it into <code>\"^1.0.0 || ^2.0.0 || ^3.0.0\"</code></li> <li>Otherwise, if the update is outside the existing range, Renovate replaces the range. So <code>\"^2.0.0\"</code> is replaced by <code>\"^3.0.0\"</code></li> <li>Finally, if the update is in-range, Renovate will update the lockfile with the new exact version.</li> </ol> <p>By default, Renovate assumes that if you are using ranges then it's because you want them to be wide/open. Renovate won't deliberately \"narrow\" any range by increasing the semver value inside.</p> <p>For example, if your <code>package.json</code> specifies a value for <code>left-pad</code> of <code>^1.0.0</code> and the latest version on npmjs is <code>1.2.0</code>, then Renovate won't change anything because <code>1.2.0</code> satisfies the range. If instead you'd prefer to be updated to <code>^1.2.0</code> in cases like this, then configure <code>rangeStrategy</code> to <code>bump</code> in your Renovate config.</p> <p>This feature supports simple caret (<code>^</code>) and tilde (<code>~</code>) ranges only, like <code>^1.0.0</code> and <code>~1.0.0</code>.</p> <p>The <code>in-range-only</code> strategy may be useful if you want to leave the package file unchanged and only do <code>update-lockfile</code> within the existing range. The <code>in-range-only</code> strategy behaves like <code>update-lockfile</code>, but discards any updates where the new version of the dependency is not equal to the current version. We recommend you avoid using the <code>in-range-only</code> strategy unless you strictly need it. Using the <code>in-range-only</code> strategy may result in you being multiple releases behind without knowing it.</p>"},{"location":"configuration-options/#rebaselabel","title":"rebaseLabel","text":"<p>Label to request a rebase from Renovate bot.</p> Name Value type string default <code>\"rebase\"</code> cli <code>--rebase-label</code> env <code>RENOVATE_REBASE_LABEL</code> <p>On supported platforms it is possible to add a label to a PR to manually request Renovate to recreate/rebase it. By default this label is <code>\"rebase\"</code> but you can configure it to anything you want by changing this <code>rebaseLabel</code> field.</p>"},{"location":"configuration-options/#rebasewhen","title":"rebaseWhen","text":"<p>Controls when Renovate rebases an existing branch.</p> Name Value type string allowedValues auto, never, conflicted, behind-base-branch default <code>\"auto\"</code> cli <code>--rebase-when</code> env <code>RENOVATE_REBASE_WHEN</code> <p>Possible values and meanings:</p> <ul> <li><code>auto</code>: Renovate will autodetect the best setting. It will use <code>behind-base-branch</code> if configured to automerge or repository has been set to require PRs to be up to date. Otherwise, <code>conflicted</code> will be used instead</li> <li><code>never</code>: Renovate will never rebase the branch or update it unless manually requested</li> <li><code>conflicted</code>: Renovate will rebase only if the branch is conflicted</li> <li><code>behind-base-branch</code>: Renovate will rebase whenever the branch falls 1 or more commit behind its base branch</li> </ul> <p><code>rebaseWhen=conflicted</code> is not recommended if you have enabled Renovate automerge, because:</p> <ul> <li>It could result in a broken base branch if two updates are merged one after another without testing the new versions together</li> <li>If you have enforced that PRs must be up-to-date before merging (e.g. using branch protection on GitHub), then automerge won't be possible as soon as a PR gets out-of-date but remains non-conflicted</li> </ul> <p>It is also recommended to avoid <code>rebaseWhen=never</code> as it can result in conflicted branches with outdated PR descriptions and/or status checks.</p> <p>Avoid setting <code>rebaseWhen=never</code> and then also setting <code>prCreation=not-pending</code> as this can prevent creation of PRs.</p>"},{"location":"configuration-options/#recreateclosed","title":"recreateClosed","text":"<p>Recreate PRs even if same ones were closed previously.</p> Name Value type boolean default <code>false</code> cli <code>--recreate-closed</code> env <code>RENOVATE_RECREATE_CLOSED</code> <p>By default, Renovate will detect if it has proposed an update to a project before and not propose the same one again. For example the Webpack 3.x case described above. This field lets you customize this behavior down to a per-package level. For example we override it to <code>true</code> in the following cases where branch names and PR titles need to be reused:</p> <ul> <li>Package groups</li> <li>When pinning versions</li> <li>Lock file maintenance</li> </ul> <p>Typically you shouldn't need to modify this setting.</p>"},{"location":"configuration-options/#regexmanagers","title":"regexManagers","text":"<p>Custom managers using regex matching.</p> Name Value type array subType object cli <code>--regex-managers</code> mergeable true env <code>RENOVATE_REGEX_MANAGERS</code> <p>Use <code>regexManagers</code> entries to configure the <code>regex</code> manager in Renovate.</p> <p>You can define custom managers for cases such as:</p> <ul> <li>Proprietary file formats or conventions</li> <li>Popular file formats not yet supported as a manager by Renovate</li> </ul> <p>The custom manager concept is based on using Regular Expression named capture groups.</p> <p>You must have a named capture group matching (e.g. <code>(?&lt;depName&gt;.*)</code>) or configure it's corresponding template (e.g. <code>depNameTemplate</code>) for these fields:</p> <ul> <li><code>datasource</code></li> <li><code>depName</code></li> <li><code>currentValue</code></li> </ul> <p>Use named capture group matching or set a corresponding template. We recommend you use only one of these methods, or you'll get confused.</p> <p>We recommend that you also tell Renovate what <code>versioning</code> to use. If the <code>versioning</code> field is missing, then Renovate defaults to using <code>semver</code> versioning.</p> <p>For more details and examples, see our documentation for the <code>regex</code> manager. For template fields, use the triple brace <code>{{{ }}}</code> notation to avoid Handlebars escaping any special characters.</p>"},{"location":"configuration-options/#matchstrings","title":"matchStrings","text":"<p>Regex capture rule to use. Valid only within a <code>regexManagers</code> object.</p> Name Value type array subType string format regex parent regexManagers <p><code>matchStrings</code> should each be a valid regular expression, optionally with named capture groups.</p> <p>Example:</p> <pre><code>{\n\"matchStrings\": [\n\"ENV .*?_VERSION=(?&lt;currentValue&gt;.*) # (?&lt;datasource&gt;.*?)/(?&lt;depName&gt;.*?)\\\\s\"\n]\n}\n</code></pre>"},{"location":"configuration-options/#matchstringsstrategy","title":"matchStringsStrategy","text":"<p>Strategy how to interpret matchStrings.</p> Name Value type string default <code>\"any\"</code> allowedValues any, recursive, combination parent regexManagers <p><code>matchStringsStrategy</code> controls behavior when multiple <code>matchStrings</code> values are provided. Three options are available:</p> <ul> <li><code>any</code> (default)</li> <li><code>recursive</code></li> <li><code>combination</code></li> </ul>"},{"location":"configuration-options/#any","title":"any","text":"<p>Each provided <code>matchString</code> will be matched individually to the content of the <code>packageFile</code>. If a <code>matchString</code> has multiple matches in a file each will be interpreted as an independent dependency.</p> <p>As example the following configuration will update all 3 lines in the Dockerfile. renovate.json:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^Dockerfile$\"],\n\"matchStringsStrategy\": \"any\",\n\"matchStrings\": [\n\"ENV [A-Z]+_VERSION=(?&lt;currentValue&gt;.*) # (?&lt;datasource&gt;.*?)/(?&lt;depName&gt;.*?)(\\\\&amp;versioning=(?&lt;versioning&gt;.*?))?\\\\s\",\n\"FROM (?&lt;depName&gt;\\\\S*):(?&lt;currentValue&gt;\\\\S*)\"\n],\n\"datasourceTemplate\": \"docker\"\n}\n]\n}\n</code></pre> <p>a Dockerfile:</p> <pre><code>FROM amd64/ubuntu:18.04\nENV GRADLE_VERSION=6.2 # gradle-version/gradle&amp;versioning=maven\nENV NODE_VERSION=10.19.0 # github-tags/nodejs/node&amp;versioning=node\n</code></pre>"},{"location":"configuration-options/#recursive","title":"recursive","text":"<p>If using <code>recursive</code> the <code>matchStrings</code> will be looped through and the full match of the last will define the range of the next one. This can be used to narrow down the search area to prevent multiple matches. But the <code>recursive</code> strategy still allows the matching of multiple dependencies as described below. All matches of the first <code>matchStrings</code> pattern are detected, then each of these matches will used as basis be used as the input for the next <code>matchStrings</code> pattern, and so on. If the next <code>matchStrings</code> pattern has multiple matches then it will split again. This process will be followed as long there is a match plus a next <code>matchingStrings</code> pattern is available.</p> <p>Matched groups will be available in subsequent matching layers.</p> <p>This is an example how this can work. The first regex manager will only upgrade <code>grafana/loki</code> as looks for the <code>backup</code> key then looks for the <code>test</code> key and then uses this result for extraction of necessary attributes. But the second regex manager will upgrade both definitions as its first <code>matchStrings</code> matches both <code>test</code> keys.</p> <p>renovate.json:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^example.json$\"],\n\"matchStringsStrategy\": \"recursive\",\n\"matchStrings\": [\n\"\\\"backup\\\":\\\\s*{[^}]*}\",\n\"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n\"\\\"name\\\":\\\\s*\\\"(?&lt;depName&gt;.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?&lt;datasource&gt;.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n],\n\"datasourceTemplate\": \"docker\"\n},\n{\n\"fileMatch\": [\"^example.json$\"],\n\"matchStringsStrategy\": \"recursive\",\n\"matchStrings\": [\n\"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n\"\\\"name\\\":\\\\s*\\\"(?&lt;depName&gt;.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?&lt;datasource&gt;.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\"\n],\n\"datasourceTemplate\": \"docker\"\n}\n]\n}\n</code></pre> <p>example.json:</p> <pre><code>{\n\"backup\": {\n\"test\": {\n\"name\": \"grafana/loki\",\n\"type\": \"docker\",\n\"value\": \"1.6.1\"\n}\n},\n\"setup\": {\n\"test\": {\n\"name\": \"python\",\n\"type\": \"docker\",\n\"value\": \"3.9.0\"\n}\n}\n}\n</code></pre>"},{"location":"configuration-options/#combination","title":"combination","text":"<p>This option allows the possibility to combine the values of multiple lines inside a file. While using multiple lines is also possible using both other <code>matchStringStrategy</code> values, the <code>combination</code> approach is less susceptible to white space or line breaks stopping a match.</p> <p><code>combination</code> will only match at most one dependency per file, so if you want to update multiple dependencies using <code>combination</code> you have to define multiple regex managers.</p> <p>Matched group values will be merged to form a single dependency.</p> <p>renovate.json:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^main.yml$\"],\n\"matchStringsStrategy\": \"combination\",\n\"matchStrings\": [\n\"prometheus_image:\\\\s*\\\"(?&lt;depName&gt;.*)\\\"\\\\s*//\",\n\"prometheus_version:\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s*//\"\n],\n\"datasourceTemplate\": \"docker\"\n},\n{\n\"fileMatch\": [\"^main.yml$\"],\n\"matchStringsStrategy\": \"combination\",\n\"matchStrings\": [\n\"thanos_image:\\\\s*\\\"(?&lt;depName&gt;.*)\\\"\\\\s*//\",\n\"thanos_version:\\\\s*\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s*//\"\n],\n\"datasourceTemplate\": \"docker\"\n}\n]\n}\n</code></pre> <p>Ansible variable file ( yaml ):</p> <pre><code>prometheus_image: \"prom/prometheus\"  // a comment\nprometheus_version: \"v2.21.0\" // a comment\n------\nthanos_image: \"prom/prometheus\"  // a comment\nthanos_version: \"0.15.0\" // a comment\n</code></pre> <p>In the above example, each regex manager will match a single dependency each.</p>"},{"location":"configuration-options/#depnametemplate","title":"depNameTemplate","text":"<p>Optional depName for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If <code>depName</code> cannot be captured with a named capture group in <code>matchString</code> then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#extractversiontemplate","title":"extractVersionTemplate","text":"<p>Optional <code>extractVersion</code> for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If <code>extractVersion</code> cannot be captured with a named capture group in <code>matchString</code> then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#packagenametemplate","title":"packageNameTemplate","text":"<p>Optional packageName for extracted dependencies, else defaults to <code>depName</code> value. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p><code>packageName</code> is used for looking up dependency versions. It will be compiled using Handlebars and the regex <code>groups</code> result. It will default to the value of <code>depName</code> if left unconfigured/undefined.</p>"},{"location":"configuration-options/#currentvaluetemplate","title":"currentValueTemplate","text":"<p>Optional <code>currentValue</code> for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If the <code>currentValue</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#datasourcetemplate","title":"datasourceTemplate","text":"<p>Optional datasource for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If the <code>datasource</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#deptypetemplate","title":"depTypeTemplate","text":"<p>Optional <code>depType</code> for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If <code>depType</code> cannot be captured with a named capture group in <code>matchString</code> then it can be defined manually using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#versioningtemplate","title":"versioningTemplate","text":"<p>Optional versioning for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If the <code>versioning</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#registryurltemplate","title":"registryUrlTemplate","text":"<p>Optional registry URL for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>If the <code>registryUrls</code> for a dependency is not captured with a named group then it can be defined in config using this field. It will be compiled using Handlebars and the regex <code>groups</code> result.</p>"},{"location":"configuration-options/#autoreplacestringtemplate","title":"autoReplaceStringTemplate","text":"<p>Optional <code>extractVersion</code> for extracted dependencies. Valid only within a <code>regexManagers</code> object.</p> Name Value type string parent regexManagers default <code>null</code> <p>Allows overwriting how the matched string is replaced. This allows for some migration strategies. E.g. moving from one Docker image repository to another one.</p> <p>helm-values.yaml:</p> <pre><code># The image of the service &lt;registry&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;\nimage: my.old.registry/aRepository/andImage:1.18-alpine\n</code></pre> <p>regex definition:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"values.yaml$\"],\n\"matchStrings\": [\n\"image:\\\\s+(?&lt;depName&gt;my\\\\.old\\\\.registry/aRepository/andImage):(?&lt;currentValue&gt;[^\\\\s]+)\"\n],\n\"depNameTemplate\": \"my.new.registry/aRepository/andImage\",\n\"autoReplaceStringTemplate\": \"image: {{{depName}}}:{{{newValue}}}\",\n\"datasourceTemplate\": \"docker\"\n}\n]\n}\n</code></pre> <p>This will lead to following update where <code>1.21-alpine</code> is the newest version of <code>my.new.registry/aRepository/andImage</code>:</p> <pre><code># The image of the service &lt;registry&gt;/&lt;repo&gt;/&lt;image&gt;:&lt;tag&gt;\nimage: my.new.registry/aRepository/andImage:1.21-alpine\n</code></pre>"},{"location":"configuration-options/#registryaliases","title":"registryAliases","text":"<p>Aliases for registries.</p> Name Value type object additionalProperties [object Object] supportedManagers helm-requirements, helmv3, helmfile, gitlabci, dockerfile, docker-compose, kubernetes, ansible, droneci, woodpecker cli <code>--registry-aliases</code> env <code>RENOVATE_REGISTRY_ALIASES</code> <p>You can use the <code>registryAliases</code> object to set registry aliases.</p> <p>This feature works with the following managers:</p> <ul> <li><code>helm-requirements</code></li> <li><code>helmv3</code></li> <li><code>helmfile</code></li> <li><code>gitlabci</code></li> <li><code>dockerfile</code></li> <li><code>docker-compose</code></li> <li><code>kubernetes</code></li> <li><code>ansible</code></li> <li><code>droneci</code></li> </ul>"},{"location":"configuration-options/#registryurls","title":"registryUrls","text":"<p>List of URLs to try for dependency lookup. Package manager specific.</p> Name Value type array subType string <p>Usually Renovate is able to either (a) use the default registries for a datasource, or (b) automatically detect during the manager extract phase which custom registries are in use. In case there is a need to configure them manually, it can be done using this <code>registryUrls</code> field, typically using <code>packageRules</code> like so:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"registryUrls\": [\"https://docker.mycompany.domain\"]\n}\n]\n}\n</code></pre> <p>The field supports multiple URLs but it is datasource-dependent on whether only the first is used or multiple.</p>"},{"location":"configuration-options/#replacement","title":"replacement","text":"<p>Configuration to apply when replacing a dependency.</p> Name Value type object default <pre><code>{\n\"branchTopic\": \"{{{depNameSanitized}}}-replacement\",\n\"commitMessageAction\": \"Replace\",\n\"commitMessageExtra\": \"with {{newName}} {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{#if isSingleVersion}}{{{prettyNewVersion}}}{{else}}{{{newValue}}}{{/if}}{{/if}}\",\n\"prBodyNotes\": [\n\"This is a special PR that replaces `{{{depNameSanitized}}}` with the community suggested minimal stable replacement version.\"\n]\n}\n</code></pre> mergeable true env <code>RENOVATE_REPLACEMENT</code> <p>Add to this object if you wish to define rules that apply only to PRs that replace dependencies.</p>"},{"location":"configuration-options/#respectlatest","title":"respectLatest","text":"<p>Ignore versions newer than npm \"latest\" version.</p> Name Value type boolean cli <code>--respect-latest</code> env <code>RENOVATE_RESPECT_LATEST</code> default <code>true</code> <p>Similar to <code>ignoreUnstable</code>, this option controls whether to update to versions that are greater than the version tagged as <code>latest</code> in the repository. By default, <code>renovate</code> will update to a version greater than <code>latest</code> only if the current version is itself past latest.</p>"},{"location":"configuration-options/#reviewers","title":"reviewers","text":"<p>Requested reviewers for Pull Requests (either username or email address depending on the platform).</p> Name Value type array subType string cli <code>--reviewers</code> env <code>RENOVATE_REVIEWERS</code> <p>Must be valid usernames.</p> <p>Required reviewers on GitHub</p> <p>If you're assigning a team to review on GitHub, you must use the prefix <code>team:</code> and add the last part of the team name. Say the full team name on GitHub is <code>@organization/foo</code>, then you'd set the config option like this:</p> <pre><code>{\n\"reviewers\": [\"team:foo\"]\n}\n</code></pre> <p>Required reviewers on Azure DevOps</p> <p>To mark a reviewer as required on Azure DevOps, you must use the prefix <code>required:</code>.</p> <p>For example: if the username or team name is <code>bar</code> then you would set the config option like this:</p> <pre><code>{\n\"reviewers\": [\"required:bar\"]\n}\n</code></pre>"},{"location":"configuration-options/#reviewersfromcodeowners","title":"reviewersFromCodeOwners","text":"<p>Determine reviewers based on configured code owners and changes in PR.</p> Name Value type boolean default <code>false</code> cli <code>--reviewers-from-code-owners</code> env <code>RENOVATE_REVIEWERS_FROM_CODE_OWNERS</code> <p>If enabled Renovate tries to determine PR reviewers by matching rules defined in a CODEOWNERS file against the changes in the PR.</p> <p>See GitHub or GitLab documentation for details on syntax and possible file locations.</p>"},{"location":"configuration-options/#reviewerssamplesize","title":"reviewersSampleSize","text":"<p>Take a random sample of given size from <code>reviewers</code>.</p> Name Value type integer cli <code>--reviewers-sample-size</code> env <code>RENOVATE_REVIEWERS_SAMPLE_SIZE</code>"},{"location":"configuration-options/#rollback","title":"rollback","text":"<p>Configuration to apply when rolling back a version.</p> Name Value type object default <pre><code>{\n\"branchTopic\": \"{{{depNameSanitized}}}-rollback\",\n\"commitMessageAction\": \"Roll back\",\n\"semanticCommitType\": \"fix\"\n}\n</code></pre> mergeable true env <code>RENOVATE_ROLLBACK</code> <p>Add to this object if you wish to define rules that apply only to PRs that roll back versions.</p>"},{"location":"configuration-options/#rollbackprs","title":"rollbackPrs","text":"<p>Create PRs to roll back versions if the current version is not found in the registry.</p> Name Value type boolean default <code>false</code> cli <code>--rollback-prs</code> env <code>RENOVATE_ROLLBACK_PRS</code> <p>There are times when a dependency version in use by a project gets removed from the registry. For some registries, existing releases or even whole packages can be removed or \"yanked\" at any time, while for some registries only very new or unused releases can be removed. Renovate's \"rollback\" feature exists to propose a downgrade to the next-highest release if the current release is no longer found in the registry.</p> <p>Renovate does not create these rollback PRs by default, with one exception: npm packages get a rollback PR if needed.</p> <p>You can configure the <code>rollbackPrs</code> property globally, per-language, or per-package to override the default behavior.</p>"},{"location":"configuration-options/#ruby","title":"ruby","text":"<p>Configuration object for Ruby language.</p> Name Value type object mergeable true env <code>RENOVATE_RUBY</code>"},{"location":"configuration-options/#rust","title":"rust","text":"<p>Configuration option for Rust package management.</p> Name Value type object mergeable true env <code>RENOVATE_RUST</code>"},{"location":"configuration-options/#schedule","title":"schedule","text":"<p>Limit branch creation to these times of day or week.</p> Name Value type array subType string cli <code>--schedule</code> default <pre><code>[\"at any time\"]\n</code></pre> <p>The <code>schedule</code> option allows you to define times of week or month for Renovate updates. Running Renovate around the clock can be too \"noisy\" for some projects. To reduce the noise you can use the <code>schedule</code> config option to limit the time frame in which Renovate will perform actions on your repository. You can use the standard Cron syntax and Later syntax to define your schedule.</p> <p>The default value for <code>schedule</code> is \"at any time\", which is functionally the same as declaring a <code>null</code> schedule. i.e. Renovate will run on the repository around the clock.</p> <p>The easiest way to define a schedule is to use a preset if one of them fits your requirements. See Schedule presets for details and feel free to request a new one in the source repository if you think others would benefit from it too.</p> <p>Otherwise, here are some text schedules that are known to work:</p> <pre><code>every weekend\nbefore 5:00am\nafter 10pm and before 5:00am\nafter 10pm and before 5am every weekday\non friday and saturday\nevery 3 months on the first day of the month\n* 0 2 * *\n</code></pre> <p>Warning</p> <p>For Cron schedules, you must use the <code>*</code> wildcard for the minutes value, as Renovate doesn't support minute granularity.</p> <p>One example might be that you don't want Renovate to run during your typical business hours, so that your build machines don't get clogged up testing <code>package.json</code> updates. You could then configure a schedule like this at the repository level:</p> <pre><code>{\n\"schedule\": [\"after 10pm and before 5am every weekday\", \"every weekend\"]\n}\n</code></pre> <p>This would mean that Renovate can run for 7 hours each night plus all the time on weekends.</p> <p>This scheduling feature can also be particularly useful for \"noisy\" packages that are updated frequently, such as <code>aws-sdk</code>.</p> <p>To restrict <code>aws-sdk</code> to only monthly updates, you could add this package rule:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"aws-sdk\"],\n\"extends\": [\"schedule:monthly\"]\n}\n]\n}\n</code></pre> <p>Technical details: We mostly rely on the text parsing of the library @breejs/later but only its concepts of \"days\", \"time_before\", and \"time_after\". Read the parser documentation at breejs.github.io/later/parsers.html#text. To parse Cron syntax, Renovate uses @cheap-glitch/mi-cron. Renovate does not support scheduled minutes or \"at an exact time\" granularity.</p> <p>Tip</p> <p>If you want to disable Renovate, then avoid setting <code>schedule</code> to <code>\"never\"</code>. Instead, use the <code>enabled</code> config option to disable Renovate. Read the <code>enabled</code> config option docs to learn more.</p> <p>Note</p> <p>Actions triggered via the Dependency Dashboard are not restricted by a configured schedule.</p> <p>Tip</p> <p>To validate your <code>later</code> schedule before updating your <code>renovate.json</code>, you can use this CodePen.</p>"},{"location":"configuration-options/#semanticcommitscope","title":"semanticCommitScope","text":"<p>Commit scope to use if Semantic Commits are enabled.</p> Name Value type string default <code>\"deps\"</code> cli <code>--semantic-commit-scope</code> env <code>RENOVATE_SEMANTIC_COMMIT_SCOPE</code> <p>By default you will see Angular-style commit prefixes like <code>\"chore(deps):\"</code>. If you wish to change it to something else like <code>\"package\"</code> then it will look like <code>\"chore(package):\"</code>. You can also use <code>parentDir</code> or <code>baseDir</code> to namespace your commits for monorepos e.g. <code>\"{{parentDir}}\"</code>.</p>"},{"location":"configuration-options/#semanticcommittype","title":"semanticCommitType","text":"<p>Commit type to use if Semantic Commits is enabled.</p> Name Value type string default <code>\"chore\"</code> cli <code>--semantic-commit-type</code> env <code>RENOVATE_SEMANTIC_COMMIT_TYPE</code> <p>By default you will see Angular-style commit prefixes like <code>\"chore(deps):\"</code>. If you wish to change it to something else like \"ci\" then it will look like <code>\"ci(deps):\"</code>.</p>"},{"location":"configuration-options/#semanticcommits","title":"semanticCommits","text":"<p>Enable Semantic Commit prefixes for commits and PR titles.</p> Name Value type string allowedValues auto, enabled, disabled default <code>\"auto\"</code> cli <code>--semantic-commits</code> env <code>RENOVATE_SEMANTIC_COMMITS</code> <p>If you are using a semantic prefix for your commits, then you will want to enable this setting. Although it's configurable to a package-level, it makes most sense to configure it at a repository level. If configured to <code>enabled</code>, then the <code>semanticCommitScope</code> and <code>semanticCommitType</code> fields will be used for each commit message and PR title.</p> <p>Renovate autodetects if your repository is already using semantic commits or not and follows suit, so you only need to configure this if you wish to override Renovate's autodetected setting.</p>"},{"location":"configuration-options/#separatemajorminor","title":"separateMajorMinor","text":"<p>If set to <code>false</code>, Renovate will upgrade dependencies to their latest release only. Renovate will not separate major or minor branches.</p> Name Value type boolean cli <code>--separate-major-minor</code> env <code>RENOVATE_SEPARATE_MAJOR_MINOR</code> default <code>true</code> <p>Renovate's default behavior is to create a separate branch/PR if both minor and major version updates exist (note that your choice of <code>rangeStrategy</code> value can influence which updates exist in the first place however). For example, if you were using Webpack 2.0.0 and versions 2.1.0 and 3.0.0 were both available, then Renovate would create two PRs so that you have the choice whether to apply the minor update to 2.x or the major update of 3.x. If you were to apply the minor update then Renovate would keep updating the 3.x branch for you as well, e.g. if Webpack 3.0.1 or 3.1.0 were released. If instead you applied the 3.0.0 update then Renovate would clean up the unneeded 2.x branch for you on the next run.</p> <p>It is recommended that you leave this option to <code>true</code>, because of the polite way that Renovate handles this. For example, let's say in the above example that you decided you wouldn't update to Webpack 3 for a long time and don't want to build/test every time a new 3.x version arrives. In that case, simply close the \"Update Webpack to version 3.x\" PR and it won't be recreated again even if subsequent Webpack 3.x versions are released. You can continue with Webpack 2.x for as long as you want and get any updates/patches that are made for it. Then eventually when you do want to update to Webpack 3.x you can make that update to <code>package.json</code> yourself and commit it to the base branch once it's tested. After that, Renovate will resume providing you updates to 3.x again! i.e. if you close a major upgrade PR then it won't come back again, but once you make the major upgrade yourself then Renovate will resume providing you with minor or patch updates.</p> <p>This option also has priority over package groups configured by <code>packageRule</code>. So Renovate will propose separate PRs for major and minor updates of packages even if they are grouped. If you want to enforce grouped package updates, you need to set this option to <code>false</code> within the <code>packageRule</code>.</p>"},{"location":"configuration-options/#separateminorpatch","title":"separateMinorPatch","text":"<p>If set to <code>true</code>, Renovate will separate <code>minor</code> and <code>patch</code> updates into separate branches.</p> Name Value type boolean default <code>false</code> cli <code>--separate-minor-patch</code> env <code>RENOVATE_SEPARATE_MINOR_PATCH</code> <p>By default, Renovate won't distinguish between \"patch\" (e.g. 1.0.x) and \"minor\" (e.g. 1.x.0) releases - it groups them together. E.g., if you are running version 1.0.0 of a package and both versions 1.0.1 and 1.1.0 are available then Renovate will raise a single PR for version 1.1.0. If you wish to distinguish between patch and minor upgrades, for example if you wish to automerge patch but not minor, then you can configured this option to <code>true</code>.</p>"},{"location":"configuration-options/#separatemultiplemajor","title":"separateMultipleMajor","text":"<p>If set to <code>true</code>, PRs will be raised separately for each available <code>major</code> upgrade version.</p> Name Value type boolean default <code>false</code> cli <code>--separate-multiple-major</code> env <code>RENOVATE_SEPARATE_MULTIPLE_MAJOR</code> <p>Configure this to <code>true</code> if you wish to get one PR for every separate major version upgrade of a dependency. e.g. if you are on webpack@v1 currently then default behavior is a PR for upgrading to webpack@v3 and not for webpack@v2. If this setting is true then you would get one PR for webpack@v2 and one for webpack@v3.</p>"},{"location":"configuration-options/#stopupdatinglabel","title":"stopUpdatingLabel","text":"<p>Label to make Renovate stop updating a PR.</p> Name Value type string default <code>\"stop-updating\"</code> supportedPlatforms azure, gitea, github, gitlab cli <code>--stop-updating-label</code> env <code>RENOVATE_STOP_UPDATING_LABEL</code> <p>This feature only works on supported platforms, check the table above.</p> <p>If you want Renovate to stop updating a PR, you can apply a label to the PR. By default, Renovate listens to the label: <code>\"stop-updating\"</code>.</p> <p>You can set your own label name with the <code>\"stopUpdatingLabel\"</code> field:</p> <pre><code>{\n\"stopUpdatingLabel\": \"take-a-break-renovate\"\n}\n</code></pre>"},{"location":"configuration-options/#suppressnotifications","title":"suppressNotifications","text":"<p>Options to suppress various types of warnings and other notifications.</p> Name Value type array subType string default <pre><code>[\"deprecationWarningIssues\"]\n</code></pre> allowedValues artifactErrors, branchAutomergeFailure, configErrorIssue, deprecationWarningIssues, lockFileErrors, onboardingClose, prEditedNotification, prIgnoreNotification mergeable true <p>Use this field to suppress various types of warnings and other notifications from Renovate. Example:</p> <pre><code>{\n\"suppressNotifications\": [\"prIgnoreNotification\"]\n}\n</code></pre> <p>The above config will suppress the comment which is added to a PR whenever you close a PR unmerged.</p>"},{"location":"configuration-options/#timezone","title":"timezone","text":"<p>IANA Time Zone</p> Name Value type string cli <code>--timezone</code> env <code>RENOVATE_TIMEZONE</code> default <code>null</code> <p>It is only recommended to configure this field if you wish to use the <code>schedules</code> feature and want to write them in your local timezone. Please see the above link for valid timezone names.</p>"},{"location":"configuration-options/#transitiveremediation","title":"transitiveRemediation","text":"<p>Enable remediation of transitive dependencies.</p> Name Value type boolean default <code>false</code> supportedManagers npm supportedPlatforms github cli <code>--transitive-remediation</code> env <code>RENOVATE_TRANSITIVE_REMEDIATION</code> <p>When enabled, Renovate tries to remediate vulnerabilities even if they exist only in transitive dependencies.</p> <p>Applicable only for GitHub platform (with vulnerability alerts enabled) and <code>npm</code> manager. When the <code>lockfileVersion</code> is higher than <code>1</code> in <code>package-lock.json</code>, remediations are only possible when changes are made to <code>package.json</code>.</p> <p>This is considered a feature flag with the aim to remove it and default to this behavior once it has been more widely tested.</p>"},{"location":"configuration-options/#updateinternaldeps","title":"updateInternalDeps","text":"<p>Whether to update internal dep versions in a monorepo. Works on Lerna or Yarn Workspaces.</p> Name Value type boolean default <code>false</code> cli <code>--update-internal-deps</code> env <code>RENOVATE_UPDATE_INTERNAL_DEPS</code> <p>Renovate defaults to skipping any internal package dependencies within monorepos. In such case dependency versions won't be updated by Renovate.</p> <p>To opt in to letting Renovate update internal package versions normally, set this configuration option to true.</p>"},{"location":"configuration-options/#updatelockfiles","title":"updateLockFiles","text":"<p>Set to <code>false</code> to disable lock file updating.</p> Name Value type boolean cli <code>--update-lock-files</code> env <code>RENOVATE_UPDATE_LOCK_FILES</code> default <code>true</code>"},{"location":"configuration-options/#updatenotscheduled","title":"updateNotScheduled","text":"<p>Whether to update branches when not scheduled. Renovate will not create branches outside of the schedule.</p> Name Value type boolean cli <code>--update-not-scheduled</code> env <code>RENOVATE_UPDATE_NOT_SCHEDULED</code> default <code>true</code> <p>When schedules are in use, it generally means \"no updates\". However there are cases where updates might be desirable - e.g. if you have configured <code>prCreation=not-pending</code>, or you have <code>rebaseWhen=behind-base-branch</code> and the base branch is updated so you want Renovate PRs to be rebased.</p> <p>This defaults to <code>true</code>, meaning that Renovate will perform certain \"desirable\" updates to existing PRs even when outside of schedule. If you wish to disable all updates outside of scheduled hours then configure this field to <code>false</code>.</p>"},{"location":"configuration-options/#updatepinneddependencies","title":"updatePinnedDependencies","text":"<p>Whether to update pinned (single version) dependencies or not.</p> Name Value type boolean default <code>true</code> cli <code>--update-pinned-dependencies</code> env <code>RENOVATE_UPDATE_PINNED_DEPENDENCIES</code> <p>By default, Renovate will try to update all detected dependencies, regardless of whether they are defined using pinned single versions (e.g. <code>1.2.3</code>) or constraints/ranges (e.g. (<code>^1.2.3</code>). You can set this option to <code>false</code> if you wish to disable updating for pinned (single version) dependencies specifically.</p>"},{"location":"configuration-options/#usebasebranchconfig","title":"useBaseBranchConfig","text":"<p>Whether to read configuration from <code>baseBranches</code> instead of only the default branch.</p> Name Value type string allowedValues merge, none default <code>\"none\"</code> cli <code>--use-base-branch-config</code> env <code>RENOVATE_USE_BASE_BRANCH_CONFIG</code> <p>By default, Renovate will read config file from the default branch only and will ignore any config files in base branches. You can configure <code>useBaseBranchConfig=merge</code> to instruct Renovate to merge the config from each base branch over the top of the config in the default branch.</p> <p>The config file name in the base branch must be the same as in the default branch and cannot be <code>package.json</code>. This scenario may be useful for testing the config changes in base branches instantly.</p>"},{"location":"configuration-options/#userstrings","title":"userStrings","text":"<p>User-facing strings for the Renovate comment when a PR is closed.</p> Name Value type object freeChoice true default <pre><code>{\n\"ignoreTopic\": \"Renovate Ignore Notification\",\n\"ignoreMajor\": \"Because you closed this PR without merging, Renovate will ignore this update. You will not get PRs for *any* future {{{newMajor}}}.x releases. But if you manually upgrade to {{{newMajor}}}.x then Renovate will re-enable `minor` and `patch` updates automatically.\",\n\"ignoreDigest\": \"Because you closed this PR without merging, Renovate will ignore this update. You will not get PRs for the `{{{depName}}}` `{{{newDigestShort}}}` update again.\",\n\"ignoreOther\": \"Because you closed this PR without merging, Renovate will ignore this update ({{{newValue}}}). You will get a PR once a newer version is released. To ignore this dependency forever, add it to the `ignoreDeps` array of your Renovate config.\"\n}\n</code></pre> cli <code>--user-strings</code> env <code>RENOVATE_USER_STRINGS</code> <p>When a PR is closed, Renovate posts a comment to let users know that future updates will be ignored. If you want, you can change the text in the comment with the <code>userStrings</code> config option.</p> <p>You can edit these user-facing strings:</p> <ul> <li><code>ignoreDigest</code>: Text of the PR comment for digest upgrades.</li> <li><code>ignoreMajor</code>: Text of the PR comment for major upgrades.</li> <li><code>ignoreOther</code>: Text of the PR comment for other (neither digest nor major) upgrades.</li> <li><code>ignoreTopic</code>: Topic of the PR comment.</li> </ul> <p>Example:</p> <pre><code>{\n\"userStrings\": {\n\"ignoreTopic\": \"Custom topic for PR comment\",\n\"ignoreMajor\": \"Custom text for major upgrades.\",\n\"ignoreDigest\": \"Custom text for digest upgrades.\",\n\"ignoreOther\": \"Custom text for other upgrades.\"\n}\n}\n</code></pre>"},{"location":"configuration-options/#versioning","title":"versioning","text":"<p>Versioning to use for filtering and comparisons.</p> Name Value type string allowedValues aws-machine-image, azure-rest-api, bazel-module, cargo, composer, conan, deb, debian, docker, git, go-mod-directive, gradle, hashicorp, helm, hermit, hex, ivy, kubernetes-api, loose, maven, nixpkgs, node, npm, nuget, pep440, perl, poetry, python, redhat, regex, rez, ruby, semver, semver-coerced, swift, ubuntu default <code>null</code> <p>Usually, each language or package manager has a specific type of \"versioning\": JavaScript uses npm's SemVer implementation, Python uses pep440, etc.</p> <p>Renovate also uses custom versioning, like <code>\"docker\"</code> to address the most common way people tag versions using Docker, and <code>\"loose\"</code> as a fallback that tries SemVer first but otherwise just does its best to sort and compare.</p> <p>By exposing <code>versioning</code> to config, you can override the default versioning for a package manager if needed. We do not recommend overriding the default versioning, but there are some cases such as Docker or Gradle where versioning is not strictly defined and you may need to specify the versioning type per-package.</p> <p>Renovate supports 4-part versions (1.2.3.4) in full for the NuGet package manager. Other managers can use the <code>\"loose\"</code> versioning fallback: the first 3 parts are used as the version, all trailing parts are used for alphanumeric sorting.</p>"},{"location":"configuration-options/#vulnerabilityalerts","title":"vulnerabilityAlerts","text":"<p>Config to apply when a PR is needed due to a vulnerability in the existing package version.</p> Name Value type object default <pre><code>{\n\"groupName\": null,\n\"schedule\": [],\n\"dependencyDashboardApproval\": false,\n\"minimumReleaseAge\": null,\n\"rangeStrategy\": \"update-lockfile\",\n\"commitMessageSuffix\": \"[SECURITY]\",\n\"branchTopic\": \"{{{datasource}}}-{{{depName}}}-vulnerability\",\n\"prCreation\": \"immediate\"\n}\n</code></pre> mergeable true supportedPlatforms github <p>Renovate can read GitHub's Vulnerability Alerts to customize its Pull Requests. For this to work, you must enable the Dependency graph, and Dependabot alerts. Follow these steps:</p> <ol> <li>While logged in to GitHub, navigate to your repository</li> <li>Select the \"Settings\" tab</li> <li>Select \"Code security and analysis\" in the sidebar</li> <li>Enable the \"Dependency graph\"</li> <li>Enable \"Dependabot alerts\"</li> <li>If you're running Renovate in app mode: make sure the app has <code>read</code> permissions for \"Vulnerability alerts\".    If you're the account administrator, browse to the app (for example https://github.com/apps/renovate), select \"Configure\", and then scroll down to the \"Permissions\" section and make sure that <code>read</code> access to \"vulnerability alerts\" is mentioned</li> </ol> <p>Once the above conditions are met, and you got one or more vulnerability alerts from GitHub for this repository, then Renovate tries to raise fix PRs.</p> <p>You may use the <code>vulnerabilityAlerts</code> configuration object to customize vulnerability-fix PRs. For example, to set custom labels and assignees:</p> <pre><code>{\n\"vulnerabilityAlerts\": {\n\"labels\": [\"security\"],\n\"automerge\": true,\n\"assignees\": [\"@rarkins\"]\n}\n}\n</code></pre> <p>Warning</p> <p>There's a small chance that an incorrect vulnerability alert could result in flapping/looping vulnerability fixes, so observe carefully if enabling <code>automerge</code>.</p> <p>To disable the vulnerability alerts feature, set <code>enabled=false</code> in a <code>vulnerabilityAlerts</code> config object, like this:</p> <pre><code>{\n\"vulnerabilityAlerts\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"configuration-templates/","title":"Config Template Editing","text":"<p>This document describes how you can edit branch names, commit messages, PR titles and PR content.</p>"},{"location":"configuration-templates/#branch-name","title":"Branch Name","text":"<p>The branch name is very important for Renovate because it helps determine \"grouping\" of updates, and also makes it efficient when an existing PR needs to be updated when a newer version of a package is released. If you change the <code>branchPrefix</code> while you have ignored some upgrades (closed PR without merging), you might get a duplicate PR after the new <code>branchPrefix</code> setting is picked up by the bot.</p> <p><code>branchName</code> default value is <code>{{{branchPrefix}}}{{{additionalBranchPrefix}}}{{{branchTopic}}}</code>.</p> <p>The most common branch name you will see looks like this: <code>renovate/react-17.x</code>. In this example, the <code>branchPrefix</code> is the default <code>renovate/</code>, <code>additionalBranchPrefix</code> is empty, and <code>branchTopic</code> is <code>react-17.x</code>.</p> <p>Most users will be happy with the default <code>branchPrefix</code> of <code>renovate/</code>, but you can change this if you don't like the default. Say you don't want the forward slashes, in that case you would use <code>renovate-</code> as your <code>branchPrefix</code>. The onboarding PR will always use <code>renovate/configure</code>.</p> <p><code>additionalBranchPrefix</code> is optional and by default is empty.</p> <p><code>branchTopic</code> depends on the package manager and upgrade type, so you will see a lot of variety. This is probably a setting you want to change yourself. Be careful, and consider creating a new \"config help\" post at the discussions tab in the Renovate repository to get help from the Renovate team with your config.</p>"},{"location":"configuration-templates/#commit-message","title":"Commit Message","text":"<p>Renovate will use one commit per branch, this makes it easy for you to merge. The <code>commitMessage</code> reflects the contents of the branch and is usually the same as the PR title.</p> <p><code>commitMessage</code> has a default value of <code>{{commitMessagePrefix}} {{commitMessageAction}} {{commitMessageTopic}} {{commitMessageExtra}} {{commitMessageSuffix}}</code>, with the intention that you only edit some of those subcomponents.</p> <p>You usually don't need to edit <code>commitMessagePrefix</code>, this option is used by Renovate if it needs to add a prefix to conform to the Semantic Commit convention. Avoid editing the commit message, unless you know what you're doing.</p> <p><code>commitMessageAction</code> is usually just one word, e.g. 'Update', 'Pin', 'Refresh', etc. You're probably fine leaving this setting alone, though you can change it. e.g. if you prefer that Renovate uses the term 'Upgrade' instead of 'Update' then you could configure <code>\"commitMessageAction\": \"Upgrade\"</code>.</p> <p><code>commitMessageTopic</code> is usually two to three words that show what is being updated. e.g. it might be <code>dependency react</code> or <code>Docker image ubuntu</code>. You may want to edit this. If you think your new <code>commitMessageTopic</code> is helpful for others, please open a PR.</p> <p><code>commitMessageExtra</code> refers to the version being updated to. e.g. <code>to v17</code> for a major upgrade, or <code>to v17.0.2</code> for a patch update. It can be empty in some cases, like if the action/topic doesn't change a package version, e.g. <code>Pin Docker digests</code>.</p> <p><code>commitMessageSuffix</code> defaults to empty but is currently used in two cases:</p> <ul> <li>Differentiating major from non-major groups</li> <li>Differentiating between PRs from different base branches, maybe for <code>major</code> updates you always want the PR to end with <code>(MAJOR)</code>, for instance</li> </ul> <p><code>commitBody</code> is used if you wish to add multi-line commit messages, such as for the <code>Signed-off-by</code> fields, or adding <code>[skip-ci]</code>, etc. It is appended to the generated <code>commitMessage</code>, separated by a newline.</p>"},{"location":"configuration-templates/#pr-title","title":"PR Title","text":"<p>Because commit messages match with the PR title, the PR title template defaults to <code>null</code> and inherits/copies the value from <code>commitMessage</code>. If you have a requirement where <code>prTitle</code> should be different from <code>commitMessage</code>, then please raise a feature request for discussion.</p>"},{"location":"configuration-templates/#pr-body","title":"PR Body","text":"<p>You can change the PR body in the following ways:</p> <ul> <li>Change the entire layout/flow by using <code>prBodyTemplate</code> (we do not recommend this)</li> <li>Add a header by using <code>prHeader</code></li> <li>Add a footer by using <code>prFooter</code></li> <li>Add a note by using <code>prBodyNotes</code></li> <li>Edit the embedded table by using <code>prBodyDefinitions</code> and <code>prBodyColumns</code></li> </ul>"},{"location":"dependency-pinning/","title":"Should you Pin your JavaScript Dependencies?","text":"<p>Once you start using a tool/service like Renovate, probably the biggest decision you need to make is whether to \"pin\" your dependencies instead of using SemVer ranges. The answer is \"It's your choice\", but we can certainly make some generalisations/recommendations to help you.</p> <p>If you do not want to read the in-depth discussion, and just want our recommendations, skip ahead to the \"So what's best?\" section.</p>"},{"location":"dependency-pinning/#what-is-dependency-pinning","title":"What is Dependency Pinning?","text":"<p>To ensure we're all talking about the same thing, it's important to define exactly what we mean by dependency \"pinning\".</p> <p>Historically, projects use SemVer ranges in their <code>package.json</code>. For instance, if you run <code>npm install foobar</code> you will see an entry like <code>\"foobar\": \"^1.1.0\"</code> added to your <code>package.json</code>. Verbosely, this means \"any foobar version greater than or equal to 1.1.0 but less than 2\". The project will automatically use <code>1.1.1</code> if it's released, or <code>1.2.0</code>, or <code>1.2.1</code>, etc - meaning you will get not only patch updates but also feature (minor) releases too.</p> <p>Another alternative is ranges like <code>\"foobar\": \"~1.1.0\"</code> which means \"any foobar version greater than or equal to 1.1.0 but less than 1.2\". This narrows the range to only patch updates to the 1.1 range.</p> <p>If instead you \"pin\" your dependencies rather than use ranges, it means you use exact entries like <code>\"foobar\": \"1.1.0\"</code> which means \"use only foobar version 1.1.0 and no other\".</p>"},{"location":"dependency-pinning/#why-use-ranges","title":"Why use ranges?","text":"<p>For projects of any type, the main reason to use ranges is so that you can \"automatically\" get updated releases - which may even include security fixes. By \"automatically\", we mean that any time you run <code>npm install</code> you will get the very latest version matching your SemVer - assuming you're not using a lock file, that is.</p>"},{"location":"dependency-pinning/#tilde-vs-caret","title":"Tilde vs Caret","text":"<p>If you're familiar with the theory of SemVer, you might think that you only need to use tilde ranges (e.g. <code>\"~1.1.0\"</code>) to get bug fixes, rather than caret ranges (e.g. <code>\"^1.1.0\"</code>). This is true in theory but not in practice. The reality is that for most projects, fixes are not \"backported\" to previous minor releases, and minor releases themselves may include fixes. So for example release <code>1.2.0</code> may include one new feature and one fix, so if you stick with <code>1.1.0</code> then you will miss out on the fix as there will never be a <code>1.1.1</code> once <code>1.2.0</code> is already released. This is the reality of most open source packages.</p>"},{"location":"dependency-pinning/#ranges-for-libraries","title":"Ranges for Libraries","text":"<p>A second reason for using ranges applies to \"libraries\" that are published as npm packages with the intention that they are used/<code>require()</code>'d by other packages. In this case, it is usually a bad idea to pin all your dependencies because it will introduce an unnecessarily narrow range (one release!) and cause most users of your package to bloat their <code>node_modules</code> with duplicates.</p> <p>For example, you might have pinned <code>foobar</code> to version <code>1.1.0</code> and another author pinned his/her <code>foobar</code> dependency to <code>1.2.2</code>. Any user of both your packages will end up with npm trying to install two separate versions of <code>foobar</code>, which might not even work. Even if both projects use a service like Renovate to keep their pinned dependencies up to date with the very latest versions, it's still not a good idea - there will always be times when one package has updated/released before the other one and they will be out of sync. e.g. there might be a space of 30 minutes where your package specifies foobar <code>1.1.0</code> and the other one specifies <code>1.1.1</code> and your joint downstream users end up with a duplicate.</p>"},{"location":"dependency-pinning/#why-pin-dependencies","title":"Why pin dependencies?","text":"<p>You mainly pin versions for certainty, and visibility. When you have a pinned version of each dependency in your <code>package.json</code>, you know exactly which version of each dependency is installed at any time. This benefits when upgrading versions as well as when rolling back in case of problems.</p> <p>Note</p> <p>We'll cover lock files later, don't worry.</p>"},{"location":"dependency-pinning/#upgrading-pinned-versions","title":"Upgrading pinned versions","text":"<p>Let's say that a \"faulty\" version <code>1.2.0</code> of <code>foobar</code> is released and it breaks one of your tests.</p> <p>If you were using default caret SemVer ranges, then your <code>main</code> branch is now \"broken\" because its <code>package.json</code> says that any version 1.x above 1.1.0 is acceptable, and npm will choose the latest (<code>1.2.0</code>). You would need to manually check and work out which dependency caused the failure (<code>foobar</code> may not have been the only dependency to have \"automatically\" upgraded since the last time your tests passed) and then you would need to pin the dependency yourself to stop <code>npm</code> installing <code>1.2.0</code>.</p> <p>Consider the same situation if instead you were pinning dependency versions. Your <code>main</code> branch would not be broken because it's pinned to <code>foobar@1.1.0</code> - instead you'd just have a Pull Request for upgrading to <code>foobar@1.2.0</code> which would fail. You'd know not to merge it and can wait for <code>foobar@1.2.1</code> or later when it's fixed. By pinning dependencies you know exactly what you're running and you know exactly what failed.</p> <p>Now consider a similar theoretical scenario where <code>foobar@1.2.0</code> is faulty but it is not caught by any of your automated tests. This is more common and more dangerous.</p> <p>If you were using SemVer ranges then this new version of <code>foobar</code> will likely be deployed to production automatically one day, sometime after which you notice errors and realise you need to fix it. Like before, you need to manually work out which dependency caused it - assuming you guess correctly that it was a new dependency version at fault - and pin it manually by editing <code>package.json</code> one dependency at a time.</p> <p>Alternatively, if you were instead pinning <code>foobar</code> then you would get a PR for <code>foobar@1.2.0</code> which awaits your approval. So first of all, you can choose to read the release notes and/or visually inspect the branch yourself before merging, hopefully saving you from pushing this faulty code to production.</p> <p>If you did not catch the fault before merging, you are still better off with a pinned version. If you discover something wrong in production, you can easily \"roll back\" commits in your development environment until you find which rollback fixes the problem. Then you can simply revert that commit (reversing <code>foobar@1.1.0</code> -&gt; <code>foobar@1.2.0</code>) and push that to <code>main</code>. When the next release of <code>foobar</code> comes out (e.g. <code>1.2.1</code>) you will be prompted with a new PR and hopefully inspect it carefully this time before merge!</p> <p>As you can see in the above, pinning dependencies makes your build more consistent and predictable as a developer.</p>"},{"location":"dependency-pinning/#downside-of-pinned-dependencies-upgrade-noise","title":"Downside of pinned dependencies - upgrade \"noise\"","text":"<p>The one major downside to your development workflow of pinning dependencies is the potential for increased \"noise\" in your repository. As mentioned above, you can expect to get Pull Requests whenever there is a new version of your dependencies available. Depending on how many repositories you maintain, and how many dependencies are in each, you may find this default approach to be overwhelming (e.g. waking up to 10 new Pull Requests each day).</p>"},{"location":"dependency-pinning/#reducing-the-noise-of-dependency-updates","title":"Reducing the \"noise\" of dependency updates","text":"<p>The increased volume of Pull Requests for upgrading dependencies may be considered by some to be undesirable \"noise\" in their day. To some extent this is simply a trade-off for having your dependencies pinned and predictable, but there are also ways you can reduce this noise while still gaining the majority of the benefits:</p>"},{"location":"dependency-pinning/#pull-request-automerging","title":"Pull Request automerging","text":"<p>There are some dependencies that either (a) don't have the potential to break something in production, or (b) are fully tested by your tests.</p> <p>For example, it's very hard for <code>eslint</code> to break anything in production. If your build/tests pass, then you are fine. Consider enabling automerge for all lint packages to save yourself the work of manually approving the update each time. In this case you might wake up to 5/10 of your overnight Pull Requests having already merged themselves.</p> <p>Another example of a good candidate for automerging might be a database driver like <code>node-postgres</code> (<code>pg</code> on npm), if you have 100% test coverage of your API. In that case if the <code>pg</code> package has a minor or patch update and passes all tests then you may as well merge it automatically if you were not going to do a manual inspection anyway.</p>"},{"location":"dependency-pinning/#branch-automerging","title":"Branch automerging","text":"<p>In the above suggestion of Pull Request automerging, you might still find it annoying if you get GitHub Notifications for every PR that is created and merged. In that case, you could set <code>automergeType</code> to <code>branch</code>, which means Renovate will:</p> <ul> <li>Create a new branch for testing</li> <li>Wait until after tests have completed</li> <li>Push the commit directly to <code>main</code> if tests pass, or</li> <li>Raise a PR only if tests failed</li> </ul> <p>With this approach, updates will be essentially \"silent\" - causing no notifications - but you will be able to see each commit on <code>main</code> of course.</p>"},{"location":"dependency-pinning/#scheduling","title":"Scheduling","text":"<p>Although it can feel satisfying to get updates \"immediately\" when they're available, the reality is that you usually don't need updates so frequently. And worse still, npm package versions that are less than 24 hours can be unpublished, which would really break your build if you've pinned to a version that no longer exists.</p> <p>So to reduce the interruptions of automated dependency updates, consider putting Renovate on a schedule, such as:</p> <ul> <li>Update only on weekends? This way you update packages at most once per week, and your CI build runners are likely to be idle anyway</li> <li>Update daily, but between hours like midnight and 5am? That way notifications don't pop up in people's feed while they're working, and you also get the benefit of not tying up build machines when developers need to use them</li> </ul> <p>To learn all about controlling Renovate's schedule, read the key concepts, scheduling docs.</p>"},{"location":"dependency-pinning/#grouping-related-packages","title":"Grouping related packages","text":"<p>Although it's good to isolate each dependency update for ease of troubleshooting, there are times when the extra noise isn't worth it, or when packages naturally belong together anyway (such as all <code>babel</code> packages). You can add a package rule in our Renovate configuration to group these together and you'll get just one branch combined even if multiple packages have updates available.</p>"},{"location":"dependency-pinning/#pinning-dependencies-and-lock-files","title":"Pinning Dependencies and Lock Files","text":"<p>Since both <code>yarn</code> and <code>npm@5</code> both support lock files, it's a common question to ask \"Why should I pin dependencies if I'm already using a lock file?\". It's a good question!</p> <p></p> <p>Lock files are a great companion to SemVer ranges or pinning dependencies, because these files lock (pin) deeper into your dependency tree than you see in <code>package.json</code>.</p>"},{"location":"dependency-pinning/#what-a-lock-file-will-do-for-you","title":"What a lock file will do for you","text":"<p>When kept in sync with its associated <code>package.json</code>, a lock file will further lock down the exact dependencies and sub-dependencies that your project uses, so that everyone running <code>npm install</code> or <code>yarn install</code> will install the exact same dependencies as the person or bot that last updated the lock file.</p> <p>To reuse an earlier example, this means that you could have <code>foobar@^1.1.0</code> in your <code>package.json</code> and be locked to <code>1.1.0</code> in your lock file, so that when the broken <code>foobar@1.2.0</code> is released, nobody on the team installs it.</p>"},{"location":"dependency-pinning/#what-a-lock-file-doesnt-do-for-you","title":"What a lock file doesn't do for you","text":"<p>If a lock file gets out of sync with its <code>package.json</code>, it can no longer be guaranteed to lock anything, and the <code>package.json</code> will be the source of truth for installs.</p> <p>The lock file has only delayed the inevitable problem, and provides much less visibility than <code>package.json</code>, because it's not designed to be human readable and is quite dense.</p> <p></p> <p>If the <code>package.json</code> has a range, and a new in-range version is released that would break the build, then essentially your <code>package.json</code> is in a state of \"broken\", even if the lock file is still holding things together.</p> <p>The upside is that the lockfile will hold back <code>foobar</code> to <code>1.1.0</code> unless it's forced to upgrade, so the break is postponed. The downside is how you will discover the break eventually.</p> <p>The easiest case is if for some reason you need to upgrade <code>foobar</code>, e.g. for a new feature it has, so you might run something like <code>yarn upgrade foobar</code>. Then you might either discover the break during your development or when you push your new development to CI for testing. In this case, hopefully you'll guess it's <code>foobar</code> that broke it and not your own code.</p> <p>Alternatively, maybe someone thinks \"This lockfile is probably really out of date and might be missing some essential patches\" and decides to <code>yarn upgrade</code> the whole thing in one go. No doubt the diff will be full of green and red as many direct and indirect dependencies will have changed versions. Then it's pushed to CI for testing, fails, and you have to guess which of the changes caused it until you eventually narrow it down to <code>foobar</code>. This might require even manually looking through the lock file diffs line by line. Maybe dep <code>blahblah</code> also broke at the same time, to make it even harder.</p> <p>By ceding control of direct dependency versions to the lock file, you have lost the ability to know when things are updated. You also may be missing out on really important patches you're not even aware of, because they're \"in range\" yet locked back to vulnerable or buggy versions in the lock file.</p> <p>Reconsider the same scenario if <code>foobar</code> had instead been pinned to <code>1.1.0</code> in <code>package.json</code>. The (broken) upgrade to <code>1.2.0</code> would have been explicitly proposed to you via a Renovate PR, you would see the break, and know that the version is bad. Meanwhile you could be upgrading all the other essential fixes of other dependencies without worrying about <code>foobar</code>. You could even be running <code>yarn upgrade</code> regularly to be getting indirect package updates in the lockfile and seeing if everything still passes.</p> <p>So the lock file does not solve the same SemVer problems that pinning solves - but it compliments it. For this reason our usual recommendation is using a lock file regardless of whether you pin dependencies or not, and pinning even if you have a lock file.</p> <p>Don't forget though that our motto is \"Flexible, so you don't need to be\", so go ahead and configure however you want. Also, we're open to ideas for how to make lock file updates more \"visible\" too. e.g. are you interested in a Renovate feature where you get a lockfile-only PR any time a direct dependency gets an in-range update?</p>"},{"location":"dependency-pinning/#what-about-indirectsub-dependencies","title":"What about indirect/sub-dependencies?","text":"<p>A good argument made by @LinusU is:</p> <p>pinning will only protect you against breakage in a, in many cases, small percentage of your packages. If you for example have installed express and pinned it, you will only protect yourself against a bad express release, it will not help with the 30 dependencies that express has.</p> <p>Because of this, I personally think that pinning dependencies just creates a false sense of security, and that using a lock file is superior in every way.</p> <p>It is true that pinning applies only to direct dependencies, and \"indirect\" dependencies typically count for a lot more in total in your lockfile than direct. e.g. those 30 ones that Express relies on.</p> <p>Does pinning give you \"increased\" security? Undeniably. The question is not whether it does, but whether that increased security comes at a cost (e.g. \"noise\"). But Linus also points out that a false sense of security is a cost too.</p> <p>Don't forget that there is some form of transitive trust too. You need to pick your direct dependencies carefully, and which versions of them you use. Hopefully in doing that you pick dependencies partly for how well they look after their own dependencies and versions (e.g. do they have good enough test coverage, do they use something like Renovate to keep updated, etc?). So the reality is that even if 90% of the entries in your lock file are indirect dependencies, those are ones you have somewhat \"delegated\" responsibility for to your dependencies. e.g. I'd hope that Express are even better at watching their dependencies for breaks than I am, to use the example above.</p> <p>But certainly \"does it give a false sense of security\" is not a question we can really answer quantifiably.</p>"},{"location":"dependency-pinning/#so-whats-best","title":"So what's best?","text":"<p>We recommend:</p> <ol> <li>Any apps (web or Node.js) that aren't <code>require()</code>'d by other packages should pin all types of dependencies for greatest reliability/predictability</li> <li>Browser or dual browser/node.js libraries that are consumed/<code>required()</code>'d by others should keep using SemVer ranges for <code>dependencies</code> but can use pinned dependencies for <code>devDependencies</code></li> <li>Node.js-only libraries can consider pinning all dependencies, because application size/duplicate dependencies are not as much a concern in Node.js compared to the browser. Of course, don't do that if your library is a micro one likely to be consumed in disk-sensitive environments</li> <li>Use a lock file</li> </ol> <p>As noted earlier, when you pin dependencies then you will see an increase in the raw volume of dependency updates, compared to if you use ranges. If/when this starts bothering you, add Renovate rules to reduce the volume, such as scheduling updates, grouping them, or automerging \"safe\" ones.</p>"},{"location":"dependency-pinning/#references","title":"References","text":"<p>This is a \"living\" document and we plan to update it whenever we think of something new or someone makes a valid point we've missed or misunderstood.</p> <p>Updated 2018-01-19 after excellent feedback on lockfiles by @LinusU</p>"},{"location":"docker/","title":"Docker","text":"<p>Renovate supports upgrading dependencies in various types of Docker definition files:</p> <ul> <li>Docker's <code>Dockerfile</code> files</li> <li>Docker Compose <code>docker-compose.yml</code>, <code>compose.yml</code> files</li> <li>CircleCI config files</li> <li>Kubernetes manifest files</li> <li>Ansible configuration files</li> </ul>"},{"location":"docker/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any files matching each manager's configured <code>fileMatch</code> pattern(s)</li> <li>Matching files are parsed, Renovate checks if the file(s) has any Docker image references (e.g. <code>FROM</code> lines in a <code>Dockerfile</code>)</li> <li>If the image tag in use \"looks\" like a version (e.g. <code>myimage:1</code>, <code>myimage:1.1</code>, <code>myimage:1.1.0</code>, <code>myimage:1-onbuild</code>) then Renovate checks the Docker registry for upgrades (e.g. from <code>myimage:1.1.0</code> to <code>myimage:1.2.0</code>)</li> </ol>"},{"location":"docker/#preservation-of-version-precision","title":"Preservation of Version Precision","text":"<p>By default, Renovate preserves the precision level specified in the Docker images. For example, if the existing image is pinned at <code>myimage:1.1</code> then Renovate only proposes upgrades to <code>myimage:1.2</code> or <code>myimage:1.3</code>. This means that you will not get upgrades to a more specific versions like <code>myimage:1.2.0</code> or <code>myimage:1.3.0</code>. Renovate does not yet support \"pinning\" an imprecise version to a precise version, e.g. from <code>myimage:1.2</code> to <code>myimage:1.2.0</code>, but it's a feature we'd like to work on one day.</p>"},{"location":"docker/#version-compatibility","title":"Version compatibility","text":"<p>Although suffixes in SemVer indicate pre-releases (e.g. <code>v1.2.0-alpha.2</code>), in Docker they typically indicate compatibility, e.g. <code>1.2.0-alpine</code>. By default Renovate assumes suffixes indicate compatibility, for this reason Renovate will not change any suffixes. Renovate will update <code>1.2.0-alpine</code> to <code>1.2.1-alpine</code> but never updates to <code>1.2.1</code> or <code>1.2.1-stretch</code> as that would change the suffix.</p> <p>If this behavior does not suit a particular package you have, Renovate allows you to customize the <code>versioning</code> scheme it uses. For example, you have a Docker image <code>foo/bar</code> that sticks to SemVer versioning. This means that you need to tell Renovate that suffixes indicate pre-release versions, and not compatibility.</p> <p>You could then use this <code>packageRules</code> array, to tell Renovate to use <code>semver</code> versioning for the <code>foo/bar</code> package:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"foo/bar\"],\n\"versioning\": \"semver\"\n}\n]\n}\n</code></pre> <p>Another example is the official <code>python</code> image, which follows <code>pep440</code> versioning. You can tell Renovate to use the <code>pep440</code> versioning scheme with this set of <code>packageRules</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"python\"],\n\"versioning\": \"pep440\"\n}\n]\n}\n</code></pre> <p>If traditional versioning doesn't work, try Renovate's built-in <code>loose</code> <code>versioning</code>. Renovate will perform a best-effort sort of the versions, regardless of whether they have letters or digits.</p> <p>If both the traditional versioning, and the <code>loose</code> versioning do not give the results you want, try the <code>regex</code> <code>versioning</code>. This approach uses regex capture group syntax to specify which part of the version string is major, minor, patch, pre-release, or compatibility. See the docs for <code>versioning</code> for documentation and examples of <code>regex</code> versioning in action.</p>"},{"location":"docker/#digest-pinning","title":"Digest Pinning","text":"<p>We recommend that you pin your Docker images to an exact digest. By pinning to a digest you make your Docker builds immutable, every time you do a <code>pull</code> you get the same content.</p> <p>If you work with dependencies in the JavaScript/npm ecosystem, you may be used to exact versions being immutable. For example, if you set a version like <code>2.0.1</code>, you and your colleagues always get the exact same \"code\".</p> <p>Docker's tags are not immutable versions, even if tags look like a version. You probably expect <code>myimage:1</code> and <code>myimage:1.2</code> to change over time, but you might incorrectly assume that <code>myimage:1.2.0</code> never changes. Although it probably shouldn't, the reality is that any Docker image tag can change content, and potentially break.</p> <p>By replacing Docker tags with Docker digests as the image's primary identifier you'll get immutable builds. It's hard to work with strings like <code>FROM node@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code>. Luckily Renovate can update the digests for you, so you don't have to.</p> <p>To keep things simple, Renovate keeps the Docker tag in the <code>FROM</code> line, like this: <code>FROM node:14.15.1@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code>.</p>"},{"location":"docker/#digest-updating","title":"Digest Updating","text":"<p>If you follow our advice to replace a simple tag like <code>node:14</code> with a pinned digest <code>node:14@sha256:d938c1761e3afbae9242848ffbb95b9cc1cb0a24d889f8bd955204d347a7266e</code>, you will get Renovate PRs whenever the <code>node:14</code> image is updated on Docker Hub.</p> <p>Previously this update would have been \"invisible\" to you - one day you pull code that represents <code>node:14.15.0</code> and the next day you pull code that represents <code>node:14.15.1</code>. But you can never be sure, especially as Docker caches. Maybe some of your colleagues, or worse still your build machine, are stuck on an older version with a security vulnerability.</p> <p>By pinning to a digest instead, you will get these updates via Pull Requests, or even committed directly to your repository if you enable branch automerge for convenience. This makes sure everyone on your team uses the latest versions.</p>"},{"location":"docker/#version-upgrading","title":"Version Upgrading","text":"<p>Renovate also supports upgrading versions in Docker tags, e.g. from <code>myimage:1.2.0</code> to <code>myimage:1.2.1</code> or <code>myimage:1.2</code> to <code>myimage:1.3</code>. If a tag looks like a version, Renovate will upgrade it like a version.</p> <p>We recommend you use the major.minor.patch tagging scheme, e.g. change from <code>myimage:1</code> to <code>myimage:1.1.1</code>. This way it's easy to see what the Renovate PR is going to change. You can see the difference between a PR that upgrades <code>myimage</code> from <code>1.1.1</code> to <code>1.1.2</code> and a PR that changes the contents of the version you already use (<code>1.1.1</code>).</p> <p>By default, Renovate will upgrade minor/patch versions (like from <code>1.2.0</code> to <code>1.2.1</code>), but not upgrade major versions. If you wish to enable major versions then add the preset <code>docker:enableMajor</code> to your <code>extends</code> array in your <code>renovate.json</code>.</p> <p>Renovate has some Docker-specific intelligence when it comes to versions. For example:</p>"},{"location":"docker/#ubuntu-codenames","title":"Ubuntu codenames","text":"<p>Renovate understands Ubuntu release code names and will offer upgrades to the latest LTS release (e.g. from <code>ubuntu:xenial</code> to <code>ubuntu:focal</code>).</p> <p>For this to work you must follow this naming scheme:</p> <ul> <li>The first term of the full codename is used (e.g. <code>bionic</code> for <code>Bionic Beaver</code> release)</li> <li>The codename is in lowercase</li> </ul> <p>For example, Renovate will offer to upgrade the following <code>Dockerfile</code> layer:</p> <pre><code>FROM ubuntu:yakkety\n</code></pre> <p>To:</p> <pre><code>FROM ubuntu:focal\n</code></pre>"},{"location":"docker/#debian-codenames","title":"Debian codenames","text":"<p>Renovate understands Debian release code names and rolling updates schedule and will offer upgrades to the latest stable release (e.g. from <code>debian:stretch</code> to <code>debian:bullseye</code>).</p> <p>For this to work the codename must be in lowercase.</p> <p>For example, Renovate will offer to upgrade the following <code>Dockerfile</code> layer:</p> <pre><code>FROM debian:buster\n</code></pre> <p>To:</p> <pre><code>FROM debian:bullseye\n</code></pre>"},{"location":"docker/#configuringdisabling","title":"Configuring/Disabling","text":"<p>If you wish to make changes that apply to all Docker managers, then add them to the <code>docker</code> config object. This is not foolproof, because some managers like <code>circleci</code> and <code>ansible</code> support multiple datasources that do not inherit from the <code>docker</code> config object.</p> <p>If you wish to override Docker settings for one particular type of manager, use that manager's config object instead. For example, to disable digest updates for Docker Compose only but leave them for other managers like <code>Dockerfile</code>, you would use this:</p> <pre><code>{\n\"docker-compose\": {\n\"digest\": {\n\"enabled\": false\n}\n}\n}\n</code></pre> <p>The following configuration options are applicable to Docker:</p>"},{"location":"docker/#disable-all-docker-renovation","title":"Disable all Docker Renovation","text":"<p>Add <code>\"docker:disable\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#disable-renovate-for-only-certain-dockerfiles","title":"Disable Renovate for only certain Dockerfiles","text":"<p>Add all paths to ignore into the <code>ignorePaths</code> configuration field. e.g.</p> <pre><code>{\n\"extends\": [\"config:base\"],\n\"ignorePaths\": [\"docker/old-files/\"]\n}\n</code></pre>"},{"location":"docker/#enable-docker-major-updates","title":"Enable Docker major updates","text":"<p>Add <code>\"docker:enableMajor\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#disable-digest-pinning","title":"Disable digest pinning","text":"<p>Add <code>\"default:pinDigestsDisabled\"</code> to your <code>extends</code> array.</p>"},{"location":"docker/#automerge-digest-updates","title":"Automerge digest updates","text":"<p>Add <code>\"default:automergeDigest\"</code> to your <code>extends</code> array. If you want Renovate to commit directly to your base branch without opening a PR first, add <code>\"default:automergeBranchPush\"</code> to the <code>extends</code> array.</p>"},{"location":"docker/#registry-authentication","title":"Registry authentication","text":"<p>There are many different registries, and many ways to authenticate to those registries. We will explain how to authenticate for the most common registries.</p>"},{"location":"docker/#dockerhub","title":"DockerHub","text":"<p>Here is an example of configuring a default Docker username/password in <code>config.js</code>. The Docker Hub password is stored in a process environment variable.</p> <pre><code>module.exports = {\nhostRules: [\n{\nhostType: 'docker',\nusername: '&lt;your-username&gt;',\npassword: process.env.DOCKER_HUB_PASSWORD,\n},\n],\n};\n</code></pre> <p>You can add additional host rules, read the <code>hostRules</code> documentation for more information.</p>"},{"location":"docker/#self-hosted-docker-registry","title":"Self-hosted Docker registry","text":"<p>Say you host some Docker images yourself, and use a password to access your self-hosted Docker images. In addition to self-hosting, you also pull images from Docker Hub, without a password. In this example you would configure a specific Docker host like this:</p> <pre><code>module.exports = {\nhostRules: [\n{\nhostType: 'docker',\nmatchHost: 'your.host.io',\nusername: '&lt;your-username&gt;',\npassword: process.env.SELF_HOSTED_DOCKER_IMAGES_PASSWORD,\n},\n],\n};\n</code></pre>"},{"location":"docker/#aws-ecr-amazon-web-services-elastic-container-registry","title":"AWS ECR (Amazon Web Services Elastic Container Registry)","text":"<p>Renovate can authenticate with AWS ECR using AWS access key id &amp; secret as the username &amp; password, for example:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"docker\",\n\"matchHost\": \"12345612312.dkr.ecr.us-east-1.amazonaws.com\",\n\"username\": \"AKIAABCDEFGHIJKLMNOPQ\",\n\"encrypted\": {\n\"password\": \"w...A\"\n}\n}\n]\n}\n</code></pre>"},{"location":"docker/#google-container-registry-google-artifact-registry","title":"Google Container Registry / Google Artifact Registry","text":""},{"location":"docker/#using-long-lived-service-account-credentials","title":"Using long-lived service account credentials","text":"<p>To access the Google Container Registry (deprecated) or the Google Artifact Registry, use the JSON service account with <code>Basic</code> authentication, and use the:</p> <ul> <li><code>_json_key</code> as username</li> <li>full Google Cloud Platform service account JSON as password</li> </ul> <p>To avoid JSON-in-JSON wrapping, which can cause problems, encode the JSON service account beforehand.</p> <p>Google Container Registry does not natively support <code>_json_key_base64</code> and a base64 encoded service account. Google Artifact Registry supports <code>_json_key_base64</code> and a base64 encoded service account natively. If all your dependencies are on the Google Artifact Registry, you can base64 encode and use the service account directly:</p> <ol> <li>Download your JSON service account and store it on your machine. Make sure that the service account has <code>read</code> (and only <code>read</code>) permissions to your artifacts</li> <li>Base64 encode the service account credentials by running <code>cat service-account.json | base64</code></li> <li> <p>Add the encoded service account to your configuration file</p> </li> <li> <p>If you want to add it to your self-hosted configuration file:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"europe-docker.pkg.dev\",\n\"username\": \"_json_key_base64\",\n\"password\": \"&lt;base64 service account&gt;\"\n}\n]\n}\n</code></pre> </li> <li> <p>If you want to add it to your repository Renovate configuration file, encrypt it and then add it:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"europe-docker.pkg.dev\",\n\"username\": \"_json_key_base64\",\n\"encrypted\": {\n\"password\": \"&lt;encrypted base64 service account&gt;\"\n}\n}\n]\n}\n</code></pre> </li> </ol> <p>If you have dependencies on Google Container Registry (and Artifact Registry) you need to use <code>_json_key</code> and a slightly different encoding:</p> <ol> <li>Download your JSON service account and store it on your machine. Make sure that the service account has <code>read</code> (and only <code>read</code>) permissions to your artifacts</li> <li>Open the file and prefix the content with <code>_json_key:</code>. The file should look like this:</li> </ol> <pre><code>_json_key:{\n  \"type\": \"service_account\",\n  \"project_id\": \"sample-project\",\n  \"private_key_id\": \"5786ff7e615522b932a2a37b4a6f9645c4316dbd\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDaOkxZut9uDUHV\\n...\\n/PWs0Wa2z5+IawMD7nO63+b6\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"renovate-lookup@sample-project.iam.gserviceaccount.com\",\n  \"client_id\": \"115429165445403928973\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/renovate-lookup%40sample-project.iam.gserviceaccount.com\"\n}\n</code></pre> <ol> <li>Base64 encode the prefixed service account credentials by running <code>cat prefixed-service-account.json | base64</code></li> <li> <p>Add the prefixed and encoded service account to your configuration file</p> </li> <li> <p>If you want to add it to your self-hosted configuration file:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"europe-docker.pkg.dev\",\n\"authType\": \"Basic\",\n\"token\": \"&lt;base64 prefixed service account&gt;\"\n}\n]\n}\n</code></pre> </li> <li> <p>If you want to add it to your repository Renovate configuration file, encrypt it and then add it:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"europe-docker.pkg.dev\",\n\"authType\": \"Basic\",\n\"encrypted\": {\n\"token\": \"&lt;encrypted base64 prefixed service account&gt;\"\n}\n}\n]\n}\n</code></pre> </li> </ol>"},{"location":"docker/#using-short-lived-access-tokens","title":"Using short-lived access tokens","text":"<p>Assume you are running GitLab CI in the Google Cloud, and you are storing your Docker images in the Google Container Registry (GCR).</p> <p>Access to the GCR uses Bearer token based authentication. This token can be obtained by running <code>gcloud auth print-access-token</code>, which requires the Google Cloud SDK to be installed.</p> <p>The token expires after 60 minutes so you cannot store it in a variable for subsequent builds (like you can with <code>RENOVATE_TOKEN</code>).</p> <p>When running Renovate in this context the Google access token must be retrieved and injected into the <code>hostRules</code> configuration just before Renovate is started.</p> <p>This documentation gives a few hints on a possible way to achieve this end result.</p> <p>The basic approach is that you create a custom image and then run Renovate as one of the stages of your project. To make this run independent of any user you should use a <code>Project Access Token</code> (with Scopes: <code>api</code>, <code>read_api</code> and <code>write_repository</code>) for the project and use this as the <code>RENOVATE_TOKEN</code> variable for GitLab CI. See also the renovate-runner repository on GitLab where <code>.gitlab-ci.yml</code> configuration examples can be found.</p> <p>To get access to the token a custom Renovate Docker image is needed that includes the Google Cloud SDK. The Dockerfile to create such an image can look like this:</p> <pre><code>FROM renovate/renovate:35.66.3\n# Include the \"Docker tip\" which you can find here https://cloud.google.com/sdk/docs/install\n# under \"Installation\" for \"Debian/Ubuntu\"\nRUN ...\n</code></pre> <p>For Renovate to access the Google Container Registry (GCR) it needs the current Google Access Token. The configuration fragment to do that looks something like this:</p> <pre><code>hostRules: [\n{\nmatchHost: 'eu.gcr.io',\ntoken: 'MyReallySecretTokenThatExpiresAfter60Minutes',\n},\n];\n</code></pre> <p>One way to provide the short-lived Google Access Token to Renovate is by generating these settings into a <code>config.js</code> file from within the <code>.gitlab-ci.yml</code> right before starting Renovate:</p> <pre><code>script:\n- 'echo \"module.exports = { hostRules: [ { matchHost: ''eu.gcr.io'', token: ''\"$(gcloud auth print-access-token)\"'' } ] };\" &gt; config.js'\n- renovate $RENOVATE_EXTRA_FLAGS\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#what-is-the-default-behavior","title":"What is the default behavior?","text":"<p>Renovate will:</p> <ul> <li>Look for configuration options in a configuration file (e.g. <code>renovate.json</code>) and in each <code>package.json</code> file</li> <li>Find and process all package files (e.g. <code>package.json</code>, <code>composer.json</code>, <code>Dockerfile</code>, etc) in each repository</li> <li>Use separate branches/PR for each dependency</li> <li>Use separate branches for each major version of each dependency</li> <li>Pin devDependencies to a single version, rather than use ranges</li> <li>Pin dependencies to a single version if it appears not to be a library</li> <li>Update <code>yarn.lock</code> or <code>package-lock.json</code> files, if found</li> <li>Create Pull Requests immediately after branch creation</li> </ul>"},{"location":"faq/#which-renovate-versions-are-officially-supported","title":"Which Renovate versions are officially supported?","text":"<p>Only the latest version of Renovate is supported by the Renovate maintainers. The Renovate team only fixes bugs in an older version if:</p> <ul> <li>the hosted app needs to stay on that older major version for a short time, or</li> <li>some critical bug needs to be fixed and the new major is blocked</li> </ul> <p>If you're using the hosted app, you don't need to do anything, as the Renovate maintainers update the hosted app regularly. If you're self hosting Renovate, use the latest release if possible.</p>"},{"location":"faq/#renovate-core-features-not-supported-on-all-platforms","title":"Renovate core features not supported on all platforms","text":"Feature Platforms which lack feature See Renovate issue(s) Dependency Dashboard Azure, Bitbucket, Bitbucket Server #9592 Hosted app Azure, Bitbucket, Bitbucket Server, Forgejo, Gitea, GitLab"},{"location":"faq/#major-platform-features-not-supported-by-renovate","title":"Major platform features not supported by Renovate","text":"<p>Some major platform features are not supported at all by Renovate.</p> Feature name Platform See Renovate issue(s) Jira issues Bitbucket #20568 Jira issues Bitbucket Server #3796 Merge trains GitLab #5573 Configurable merge strategy and message Only Bitbucket, Forgejo and Gitea for now #10867 #10869 #10870"},{"location":"faq/#what-is-this-main-branch-i-see-in-the-documentation","title":"What is this <code>main</code> branch I see in the documentation?","text":"<p>When you create a new repository with Git, Git creates a base branch for you. The default branch name that Git uses is <code>master</code> (this will be changed to <code>main</code> later).</p> <p>The Git-hosting ecosystem decided to use <code>main</code> instead of <code>master</code>. When you create a new repository on say GitHub or GitLab, you'll get a <code>main</code> branch as your base branch.</p> <p>We replaced <code>master</code> with <code>main</code> in our documentation where possible.</p> <p>A branch name has no special meaning within the Git program, it's just a name. The base branch could be called <code>trunk</code> or <code>mainline</code> or <code>prod</code>, and Git would work just as well.</p>"},{"location":"faq/#what-if-i-need-to","title":"What if I need to .. ?","text":""},{"location":"faq/#troubleshoot-renovate","title":"Troubleshoot Renovate","text":"<p>If you have problems with Renovate, or want to know where Renovate keeps the logging output then read our troubleshooting documentation.</p>"},{"location":"faq/#tell-renovate-to-ask-for-approval-before-creating-a-pull-request","title":"Tell Renovate to ask for approval before creating a Pull Request","text":"<p>By default, Renovate creates a pull request right away whenever there's an update. But maybe you want Renovate to ask for your approval before it creates a pull request. Use the \"Dependency Dashboard approval\" workflow to get updates for certain packages - or certain types of updates - only after you give approval via the Dependency Dashboard.</p> <p>The basic idea is that you create a new <code>packageRules</code> entry and describe what kind of package, or type of updates you want to approve beforehand.</p> <p>Say you want to manually approve all major <code>npm</code> package manager updates:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchUpdateTypes\": [\"major\"],\n\"matchManagers\": [\"npm\"],\n\"dependencyDashboardApproval\": true\n}\n]\n}\n</code></pre> <p>Or say you want to manually approve all major Jest updates:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^jest\"],\n\"matchUpdateTypes\": [\"major\"],\n\"dependencyDashboardApproval\": true\n}\n]\n}\n</code></pre> <p>You may even configure Renovate bot to ask for approval for all updates. The <code>dependencyDashboardApproval</code> config option is outside of a <code>packageRules</code> array, and so applies to all updates:</p> <pre><code>{\n\"dependencyDashboardApproval\": true\n}\n</code></pre> <p>Read our documentation on the dependencyDashboardApproval config option.</p>"},{"location":"faq/#use-an-alternative-branch-as-my-pull-request-target","title":"Use an alternative branch as my Pull Request target","text":"<p>Say your repository's default branch is <code>main</code> but you want Renovate to use the <code>next</code> branch as its PR target. You can configure the PR target branch via the <code>baseBranches</code> option.</p> <p>Add this line to the <code>renovate.json</code> file that's in the default branch (<code>main</code> in this example).</p> <pre><code>{\n\"baseBranches\": [\"next\"]\n}\n</code></pre> <p>You can set more than one PR target branch in the <code>baseBranches</code> array.</p>"},{"location":"faq/#support-private-npm-modules","title":"Support private npm modules","text":"<p>See the dedicated Private npm module support page.</p>"},{"location":"faq/#control-renovates-schedule","title":"Control Renovate's schedule","text":"<p>To learn about controlling Renovate schedule, read the key concepts, scheduling docs.</p>"},{"location":"faq/#disable-renovate-for-certain-dependency-types","title":"Disable Renovate for certain dependency types","text":"<p>Define a <code>packageRules</code> entry which has the dependency type(s) in <code>matchDepTypes</code> and <code>\"enabled\": false</code>.</p>"},{"location":"faq/#use-a-single-branchpr-for-all-dependency-upgrades","title":"Use a single branch/PR for all dependency upgrades","text":"<p>Add a configuration for configuration option <code>groupName</code> set to value <code>\"all\"</code>, at the top level of your <code>renovate.json</code> or <code>package.json</code>.</p>"},{"location":"faq/#use-separate-branches-per-dependency-but-not-one-per-major-release","title":"Use separate branches per dependency, but not one per major release","text":"<p>Set configuration option <code>separateMajorMinor</code> to <code>false</code>.</p>"},{"location":"faq/#keep-using-semver-ranges-instead-of-pinning-dependencies","title":"Keep using SemVer ranges, instead of pinning dependencies","text":"<p>Set configuration option <code>rangeStrategy</code> to <code>\"replace\"</code>.</p>"},{"location":"faq/#keep-lock-files-including-sub-dependencies-up-to-date-even-when-packagejson-hasnt-changed","title":"Keep lock files (including sub-dependencies) up-to-date, even when <code>package.json</code> hasn't changed","text":"<p>By default, if you enable lock-file maintenance, Renovate will update the lockfile <code>[\"before 5am on monday\"]</code>. If you want to update the lock file more often, set the <code>schedule</code> field inside the <code>lockFileMaintenance</code> object.</p>"},{"location":"faq/#wait-until-tests-have-passed-before-creating-the-pr","title":"Wait until tests have passed before creating the PR","text":"<p>Set the configuration option <code>prCreation</code> to <code>\"status-success\"</code>. Branches with failing tests will remain in Git and get updated if needed. Renovate will only create a PR once the tests pass.</p>"},{"location":"faq/#wait-until-tests-have-passed-before-creating-a-pr-but-create-the-pr-even-if-they-fail","title":"Wait until tests have passed before creating a PR, but create the PR even if they fail","text":"<p>Set the configuration option <code>prCreation</code> to <code>\"not-pending\"</code>.</p>"},{"location":"faq/#assign-prs-to-specific-users","title":"Assign PRs to specific user(s)","text":"<p>Set the configuration option <code>assignees</code> to an array of usernames.</p>"},{"location":"faq/#add-labels-to-prs","title":"Add labels to PRs","text":"<p>Set the configuration option <code>labels</code> to an array of labels to use.</p>"},{"location":"faq/#apply-a-rule-but-only-to-package-abc","title":"Apply a rule, but only to package <code>abc</code>?","text":"<ol> <li>Add a <code>packageRules</code> array to your configuration</li> <li>Create one object inside this array</li> <li>Set field <code>matchPackageNames</code> to value <code>[\"abc\"]</code></li> <li>Add the configuration option to the same object</li> </ol> <p>e.g.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"abc\"],\n\"assignees\": [\"importantreviewer\"]\n}\n]\n}\n</code></pre>"},{"location":"faq/#apply-a-rule-but-only-for-packages-starting-with-abc","title":"Apply a rule, but only for packages starting with <code>abc</code>","text":"<p>Do the same as above, but instead of using <code>matchPackageNames</code>, use <code>matchPackagePatterns</code> and a regex:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": \"^abc\",\n\"assignees\": [\"importantreviewer\"]\n}\n]\n}\n</code></pre>"},{"location":"faq/#group-all-packages-starting-with-abc-together-in-one-pr","title":"Group all packages starting with <code>abc</code> together in one PR","text":"<p>As above, but apply a <code>groupName</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": \"^abc\",\n\"groupName\": [\"abc packages\"]\n}\n]\n}\n</code></pre>"},{"location":"faq/#change-the-default-values-for-branch-name-commit-message-pr-title-or-pr-description","title":"Change the default values for branch name, commit message, PR title or PR description","text":"<p>You can use the <code>branchName</code>, <code>commitMessage</code>, <code>prTitle</code> or <code>prBody</code> configuration options to change the defaults for those settings.</p>"},{"location":"faq/#automatically-merge-passing-pull-requests","title":"Automatically merge passing Pull Requests","text":"<p>Set the configuration option <code>automerge</code> to <code>true</code>. Nest it inside a <code>patch</code> or <code>minor</code> object if you only want to automerge certain types of updates.</p>"},{"location":"faq/#separate-patch-releases-from-minor-releases","title":"Separate patch releases from minor releases","text":""},{"location":"faq/#renovates-default-behavior-for-majorminor-releases","title":"Renovate's default behavior for major/minor releases","text":"<p>By default, Renovate separates major and minor releases. Patch releases are treated as \"minor\". Here's an example:</p> <p>Say you're using version <code>0.8.0</code> of the <code>foo</code> package. The <code>foo</code> maintainers release the following versions:</p> <ul> <li><code>0.8.1</code> (patch)</li> <li><code>0.9.0</code> (minor)</li> <li><code>1.0.0</code> (major)</li> </ul> <p>Renovate creates the following PRs:</p> <ul> <li>Update dependency <code>foo</code> to <code>0.9.0</code> (minor)</li> <li>Update dependency <code>foo</code> to <code>1.0.0</code> (major)</li> </ul> <p>Renovate groups the patch and minor versions into one PR. This means you only get a PR for the minor version, <code>0.9.0</code>.</p> <p>You can override this default behavior. To learn more read the section below.</p>"},{"location":"faq/#overriding-the-default-behavior-for-majorminor-releases","title":"Overriding the default behavior for major/minor releases","text":"<p>You can see in the example above that Renovate won't normally create a PR for the <code>foo</code> patch release.</p> <p>You can tell Renovate to create a separate PR for the patch release by setting <code>separateMinorPatch</code> to <code>true</code>.</p> <p>In both cases, Renovate will open 3 PRs:</p> <ul> <li>Update dependency <code>foo</code> to <code>0.8.1</code> (patch)</li> <li>Update dependency <code>foo</code> to <code>0.9.0</code> (minor)</li> <li>Update dependency <code>foo</code> to <code>1.0.0</code> (major)</li> </ul> <p>Usually you don't want more PRs though. It can be nice to get patch PRs when you're using automerge:</p> <ul> <li>Get daily patch updates which are automerged once tests pass</li> <li>Get weekly updates for minor and major updates</li> </ul> <p>This means you barely notice Renovate during the week, while you still get the benefits of patch level updates.</p>"},{"location":"gitlab-bot-security/","title":"GitLab bot security","text":"<p>You should understand GitLab's security model, before deciding to run a \"bot\" service like Renovate on GitLab, particularly the pipeline credentials.</p> <p>Important: If you have any doubts or concerns about this content that could affect other users, please follow our Security Policy and report them confidentially.</p>"},{"location":"gitlab-bot-security/#ci_job_token-permissions","title":"<code>CI_JOB_TOKEN</code> permissions","text":"<p>The concept of <code>CI_JOB_TOKEN</code> permissions was overhauled in GitLab release 8.12, jobs are now run with the permissions of the user account which triggered the pipeline. For security reasons the token was limited to read-only permissions and a limited set of API endpoints, but it\u2019s been extended to allow write access to the GitLab Package Registry. Any pipeline triggered by a user account thus has permissions to read any repository which that account has access to as well as publish packages to them.</p> <p>With the current GitLab CI permissions model, you should avoid committing to any project which you don\u2019t trust completely, because that project could maliciously steal repository data, publish fake releases, or spam releases.</p>"},{"location":"gitlab-bot-security/#risks-of-hosting-a-renovate-gitlab-appbotservice","title":"Risks of hosting a Renovate GitLab app/bot/service","text":"<p>The GitLab security model means that the risks of running a public bot service on GitLab are too high, which is why the existing service has been suspended until an alternate security model is ready.</p> <p>It's also important to remember that when accounts are invited into projects or groups on GitLab, acceptance happens automatically (which was a useful feature to leverage for a shared service).</p> <p>If you are running a self-hosted Renovate service, it is advisable to:</p> <ul> <li>Run a shared service only within projects which have shared visibility/security within the users, or which have a low risk that a user would try to gain access to a private project they don't otherwise have access to</li> <li>If running with <code>autodiscover</code>, also configure a value for <code>autodiscoverFilter</code> so that the bot can't be invited to projects or groups you don't intend</li> </ul>"},{"location":"gitlab-bot-security/#security-solutions-and-workarounds","title":"Security solutions and workarounds","text":"<p>The following research notes may help you to assess the GitLab bot security risk.</p>"},{"location":"gitlab-bot-security/#public-projects-only","title":"Public projects only","text":"<p>If a bot service is run on public projects only, then the risk of private project data being accessed by unauthorized users is zero. But malicious users can still spoof or spam packages to any other public project they are not a member of, so that rules out this approach for a public hosted service.</p> <p>A public-visibility-only bot service should be low risk for most self-hosted GitLab instances. There is still a small problem that you can't prevent users from inviting the bot into private projects if they are not aware of the risks of doing so.</p>"},{"location":"gitlab-bot-security/#project-access-tokens","title":"Project Access Tokens","text":"<p>Project Access Tokens are a recently added feature for GitLab. The main downsides to their use for a shared bot service are:</p> <ul> <li>It is not yet possible to provision them through the API, so project maintainers would need to provision a project bot account and then save it to Renovate manually and per-project</li> <li>Project Access Tokens are a paid-only feature for gitlab.com, which excludes a large percentage of the public service user base</li> <li>At the time of writing, there are still some issues with getting Project Access Tokens to trigger and authenticate CI</li> <li>Any service using such tokens would get MRs from a user like <code>@project_123_bot</code> which is less intuitive than <code>@renovate-bot</code></li> </ul> <p>The big benefit of Project Access Tokens is their limited scope, users with write access to one project cannot read/write to other projects.</p>"},{"location":"gitlab-bot-security/#group-access-tokens","title":"Group Access Tokens","text":"<p>Group Access Tokens are still in the planning stage, but may offer a more scalable way to manage a Renovate service. Tokens could be provisioned into Renovate per-group and permissions/visibility would need to be kept uniform throughout the group to ensure escalation of privileges is not possible.</p> <p>It should be noted though that many GitLab users do not have uniform permissions/visibility throughout groups today, so this is a risk of Group Access Tokens in general. Even https://gitlab.com/gitlab-org is a good example of how common it is to mix project visibility within a same group.</p> <p>Similarly with Project Access Tokens, if they are a paid-only feature then it would exclude free users from using such a service.</p>"},{"location":"gitlab-bot-security/#skipping-ci","title":"Skipping CI","text":"<p>The security problem described above is that if a user triggers a malicious pipeline then they can be exploited, so skipping CI altogether would seem to be a way to avoid that. If Renovate can reliably force CI skipping for both (a) branch push, and (b) MR creation/updating then there should be no security exploit risk, but of course then there are no tests run instead. A possibility in future could be to combine this with a force push from a user or project token to trigger tests.</p> <p>The above solution/workaround will be actively researched in collaboration with GitLab.</p>"},{"location":"gitlab-bot-security/#oauth","title":"OAuth","text":"<p>An alternative to a bot service running with a bot PAT would be to have it run using user OAuth tokens. In this scenario, an OAuth app would be needed to allow users to \"install\" the bot into projects with members they trust not to exploit them, and then commits and Merge Requests would appear to be authored by the user, not any bot. Bot services are better if they are provisioned with a \"bot identity\" so that users can quickly distinguish bot activity from real user activity.</p>"},{"location":"gitlab-bot-security/#recommended-migration","title":"Recommended migration","text":"<p>Until the hosted app can be reactivated, we recommend users migrate to use self-hosted pipelines to run Renovate. Please see the renovate-bot/renovate-runner README on GitLab for instructions on how to set this up as easily as possible.</p>"},{"location":"gitlab-bot-security/#status-of-the-renovate-app-for-gitlab","title":"Status of the Renovate app for GitLab","text":"<p>We're trying to find a workable design for the GitLab app, so we can enable it safely again. If you have any ideas, open a discussion and let us know!</p> <p>GitLab introduced Group Access Tokens &amp; API for paid &amp; self-hosted instances, but a good permission setup/flow is still not possible. Check out GitLab issue #346298.</p>"},{"location":"gitlab-bot-security/#acknowledgments","title":"Acknowledgments","text":"<p>Thank you to Nejc Habjan for bringing this security challenge to our attention, and also to his colleagues at Siemens for their help researching the risks. Thanks also to the GitLab security team for being responsive to our questions.</p>"},{"location":"golang/","title":"Automated Dependency Updates for Go Modules","text":"<p>Renovate supports upgrading dependencies in <code>go.mod</code> files and their accompanying <code>go.sum</code> checksums.</p>"},{"location":"golang/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>go.mod</code> files</li> <li>Renovate extracts existing dependencies from <code>require</code> statements</li> <li>Renovate resolves the dependency's source repository and checks for SemVer tags if found. Otherwise commits and <code>v0.0.0-....</code> syntax will be used</li> <li>If Renovate finds an update, Renovate will update <code>go.mod</code> to the new value</li> <li>Renovate runs <code>go get</code> to update the <code>go.sum</code> files (you can configure which directory are included using the <code>goGetDirs</code> option)</li> <li>If the user has enabled the option <code>gomodUpdateImportPaths</code> in the <code>postUpdateOptions</code> array, then Renovate uses mod to update import paths on major updates, which can update any Go source file</li> <li>If the user has any of the available <code>gomodTidy</code> options (e.g. <code>gomodTidy1.17</code>) in the <code>postUpdateOptions</code>, then Renovate runs <code>go mod tidy</code> with the respective options (multiple options are allowed).</li> <li><code>go mod vendor</code> is run if vendored modules are detected</li> <li>A PR will be created with <code>go.mod</code>,<code>go.sum</code>, and any updated vendored files updated in the one commit</li> <li>If the source repository has either a \"changelog\" file or uses GitHub releases, then Release Notes for each version will be embedded in the generated PR</li> </ol>"},{"location":"golang/#enabling-go-modules-updating","title":"Enabling Go Modules Updating","text":"<p>Renovate updates Go Modules by default. To install Renovate Bot itself, either enable the Renovate App on GitHub, or check out Renovate OSS for self-hosted.</p>"},{"location":"golang/#technical-details","title":"Technical Details","text":""},{"location":"golang/#replace-massaging","title":"Replace massaging","text":"<p>Renovate can massage <code>replace</code> statements it finds prior to running <code>go</code> commands, and then massage them back afterwards. This capability was added - and originally default behavior - because relative <code>replace</code> statements outside of the current repo will not work when Renovate clones the repo locally.</p> <p>On the other hand, this massaging of <code>replace</code> statements may lead to unexpected results, especially because <code>go mod tidy</code> may not fully tidy the <code>go.sum</code> if it is missing the <code>replace</code> directives in <code>go.mod</code>. It has therefore been disabled by default.</p> <p>To enable this replace massaging behavior, add <code>gomodMassage</code> to your <code>postUpdateOptions</code> array.</p>"},{"location":"golang/#module-tidying","title":"Module Tidying","text":"<p>Go Modules tidying is not enabled by default, and is opt-in via the <code>postUpdateOptions</code> config option. The reason for this is that a <code>go mod tidy</code> command may make changes to <code>go.mod</code> and <code>go.sum</code> that are completely unrelated to the updated module(s) in the PR, and so may be confusing to some users.</p>"},{"location":"golang/#module-vendoring","title":"Module Vendoring","text":"<p>Vendoring of Go Modules is done automatically if <code>vendor/modules.txt</code> is present. Renovate will commit all files changed within the <code>vendor/</code> folder.</p> <p>Note</p> <p>Renovate does not support vendoring major upgrades of Go modules. Follow issue #21010.</p>"},{"location":"golang/#go-binary-version","title":"Go binary version","text":"<p>By default, Renovate will keep up with the latest version of the <code>go</code> binary.</p> <p>You can force Renovate to use a specific version of Go by setting a constraint. As an example, say you want Renovate to use the latest patch version of the <code>1.16</code> Go binary, you'd put this in your Renovate config:</p> <pre><code>{\n\"constraints\": {\n\"go\": \"1.16\"\n}\n}\n</code></pre> <p>We do not support patch level versions for the minimum <code>go</code> version. This means you cannot use <code>go 1.16.6</code>, but you can use <code>go 1.16</code> as a constraint.</p>"},{"location":"golang/#custom-registry-support-and-authentication","title":"Custom registry support, and authentication","text":"<p>This example shows how you can use a <code>hostRules</code> configuration to configure Renovate for use with a custom private Go module source using Git to pull the modules when updating <code>go.sum</code> and vendored modules. All token <code>hostRules</code> with a <code>hostType</code> (e.g. <code>github</code>, <code>gitlab</code>, <code>bitbucket</code>, ... ) and host rules without a <code>hostType</code> are setup for authentication.</p> <pre><code>module.exports = {\nhostRules: [\n{\nmatchHost: 'github.enterprise.com',\ntoken: process.env.GO_GITHUB_TOKEN,\nhostType: 'github',\n},\n{\nmatchHost: 'someGitHost.enterprise.com',\ntoken: process.env.GO_GIT_TOKEN,\n},\n],\n};\n</code></pre>"},{"location":"java/","title":"Java Dependency Updates","text":"<p>Renovate can update Gradle and Maven dependencies. This includes libraries and plugins as well as the Gradle Wrapper.</p>"},{"location":"java/#lts-releases","title":"LTS releases","text":"<p>The <code>config:base</code> preset includes the <code>workarounds:javaLTSVersions</code> preset. The workaround limits Renovate to upgrade to LTS versions of the Java runtime only.</p> <p>If you want Renovate to offer all <code>major</code> Java updates then add <code>workarounds:javaLTSVersions</code> to the <code>ignorePreset</code> array:</p> <pre><code>{\n\"extends\": [\"config:base\"],\n\"ignorePresets\": [\"workarounds:javaLTSVersions\"]\n}\n</code></pre>"},{"location":"java/#gradle","title":"Gradle","text":"<p>Renovate detects versions that are specified in a string <code>'group:artifact:version'</code> and those specified in a map <code>(group:groupName, name:ArtifactName, version:Version)</code>.</p>"},{"location":"java/#gradle-file-support","title":"Gradle File Support","text":"<p>Renovate can update:</p> <ul> <li><code>*.gradle</code>/<code>*.gradle.kts</code> files</li> <li>Dependencies with version definitions in <code>gradle.properties</code> files</li> <li>Gradle lockfiles stored in <code>*.lockfile</code> files</li> <li><code>*.versions.toml</code> files in any directory or <code>*.toml</code> files inside the <code>gradle</code>   directory (Gradle Version Catalogs docs)</li> <li><code>versions.props</code> and <code>versions.lock</code> from the gradle-consistent-versions plugin</li> </ul> <p>Renovate does not support:</p> <ul> <li>Android projects that require extra configuration to run (e.g. setting the Android SDK)</li> <li>Catalogs with version ranges</li> <li>Catalog versions using <code>reject</code>, and <code>rejectAll</code> constraints</li> <li>Catalog versions using more than one of <code>require</code>, <code>strictly</code>, <code>prefer</code> in a single declaration</li> <li>Catalogs with custom names that do not end in <code>.toml</code></li> <li>Catalogs outside the <code>gradle</code> folder whose names do not end in <code>.versions.toml</code> (unless overridden via <code>fileMatch</code> configuration)</li> </ul>"},{"location":"java/#gradle-wrapper","title":"Gradle Wrapper","text":"<p>Renovate can update the Gradle Wrapper of a project.</p> <p>This includes the source declaration inside the <code>gradle/wrapper/gradle-wrapper.properties</code> as well as accompanied files such as <code>gradlew</code>, <code>gradlew.bat</code>, and <code>gradle/wrapper/gradle-wrapper.jar</code>.</p>"},{"location":"java/#how-it-works","title":"How It Works","text":"<p>Renovate extracts the Gradle Wrapper version used from the <code>distributionUrl</code> inside the <code>gradle-wrapper.properties</code>. Once the version is determined, Renovate will look for newer versions from the <code>gradle-version</code> datasource. Renovate will then invoke the Gradle Wrapper to update itself, as recommended by Gradle.</p> <p>For the extraction to work, the <code>distributionUrl</code> must point to a file of type <code>.zip</code>, which includes the version in its name, and defines one of the official distribution types (bin, all).</p>"},{"location":"java/#support-for-mirrors-and-custom-distributions","title":"Support for mirrors and custom distributions","text":"<p>As Renovate takes the <code>distributionUrl</code> defined inside the <code>gradle-wrapper.properties</code> as basis for its update, source declarations other than to the official Gradle Wrapper are supported.</p> <p>This can be used for hosting the official distributions with a proxy server, an offline mirror or even providing a custom distribution of the Gradle Wrapper, e.g. to provide a company-wide base configuration for all Gradle projects.</p> <p>But the <code>gradle-version</code> datasource is used to determine available versions. In case the available versions at the defined source differ from those available from Gradle or the default datasource cannot be reached, e.g. due to network restrictions, the datasource may be reconfigured via a <code>packageRule</code>:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"gradle-version\"],\n\"registryUrls\": [\n\"https://domain.tld/repository/custom-gradle-wrapper/versions.json\"\n]\n}\n]\n}\n</code></pre>"},{"location":"java/#maven","title":"Maven","text":"<p>Renovate can update dependency versions found in Maven <code>pom.xml</code> files.</p>"},{"location":"java/#maven-file-support","title":"Maven File Support","text":"<p>Renovate will search repositories for all <code>pom.xml</code> files and processes them independently.</p> <p>Renovate will also parse <code>settings.xml</code> files in the following locations:</p> <ul> <li><code>.mvn/settings.xml</code></li> <li><code>.m2/settings.xml</code></li> <li><code>settings.xml</code></li> </ul> <p>Any repository URLs found within will be added as <code>registryUrls</code> to extracted dependencies.</p>"},{"location":"java/#custom-registry-support-and-authentication","title":"Custom registry support, and authentication","text":"<p>The manager for Gradle makes use of the <code>maven</code> datasource. Renovate can be configured to access additional repositories and access repositories authenticated.</p> <p>This example shows how you can use a <code>config.js</code> file to configure Renovate for use with Artifactory. We're using environment variables to pass the Artifactory username and password to Renovate bot.</p> <pre><code>module.exports = {\nhostRules: [\n{\nhostType: 'maven',\nmatchHost: 'https://artifactory.yourcompany.com/',\nusername: process.env.ARTIFACTORY_USERNAME,\npassword: process.env.ARTIFACTORY_PASSWORD,\n},\n],\n};\n</code></pre> <p>You can overwrite the repositories to use for version lookup through configuration.</p> <pre><code>module.exports = {\npackageRules: [\n{\nmatchDatasources: ['maven'],\nregistryUrls: ['https://repo-a.tld/repo', 'https://repo-b.tld/repo'],\n},\n],\n};\n</code></pre>"},{"location":"javascript/","title":"JavaScript","text":"<p>Renovate supports upgrading JavaScript dependencies specified in <code>package.json</code> files.</p> <p><code>npm</code>, <code>yarn</code>, and <code>pnpm</code> are all supported.</p>"},{"location":"known-limitations/","title":"Known limitations","text":"<p>Learn about the limitations of Renovate bot.</p>"},{"location":"known-limitations/#introduction","title":"Introduction","text":"<p>Renovate, like any computer program has limitations. Sometimes these are functionality limitations - perhaps something is impossible or too complex to do, or we simply haven't implemented it yet. At other times it may be a \"performance\" limitation, because jobs neither start nor complete instantly, even if the user may start with that expectation.</p> <p>This document tries to list out the most commonly seen limitations and describe whether they're permanent and if there's any plans to improving the situation.</p>"},{"location":"known-limitations/#timeschedule-based-limitations","title":"Time/schedule based limitations","text":"<p>When a user configures a schedule in their repo config, they may think that this schedule \"controls\" when Renovate runs. In actuality, Renovate may be running frequently, but just skipping updates to the repo if the configured schedule is not met. Additionally, the Renovate admin may have put the bot on its own schedule, or the job queue may be too long, so Renovate doesn't even get a chance to run on your repository during a certain scheduled time window.</p> <p>For scheduled action to take place, both these need to happen:</p> <ul> <li>The bot needs to run against your repository</li> <li>The current time needs to fall within your repository's configured schedule</li> </ul>"},{"location":"known-limitations/#github-hosted-app-scheduled-jobs","title":"GitHub hosted app scheduled jobs","text":"<p>On the GitHub hosted app Mend checks each active repository roughly every three hours, if no activity has been seen before then (merged PRs, etc).</p> <p>For this reason, you should set your schedule window to at least three or four hours. This makes it likely that Renovate bot checks your repository at least once during the schedule.</p>"},{"location":"known-limitations/#automerge-limitations","title":"Automerge limitations","text":"<ul> <li>Renovate automerges at most one branch per run</li> <li>Renovate will only automerge a branch when it is up-to-date with the target branch</li> <li>Renovate may not be able to automerge as many branches as you expect, especially if your base branch is receiving regular commits at the same time</li> </ul> <p>The limitation to only merge one branch per run is because Renovate's dependency and branch state is based on what was present in the base branch at the start of the run. If a branch is merged into the base branch during Renovate's run - including by other users - it means that remaining Renovate branches may have Git conflicts. It also means that Renovate's knowledge about dependencies in the base branch is now invalid and other branches may need changing as a result of the merge.</p> <p>The limitation to only automerge branches which are up-to-date is a decision due to this example:</p> <ul> <li>Two dependencies are in use: <code>alice@1.0.0</code> and <code>bob@1.0.0</code></li> <li>PRs exist for <code>alice@2.0.0</code> and <code>bob@2.0.0</code> and both pass tests</li> <li>The PR for <code>alice@2.0.0</code> is automerged</li> <li>The PR for <code>bob@2.0.0</code> remains open, does not have conflicts, and has all tests passing</li> <li>But <code>alice@2.0.0</code> and <code>bob@2.0.0</code> are incompatible so merging the PR without rebasing and retesting it first would result in a broken base branch</li> </ul>"},{"location":"merge-confidence/","title":"Merge Confidence","text":"<p>Look at the Merge Confidence badges before merging to:</p> <ul> <li>Prevent updates which break in production</li> <li>See at a glance if you should update</li> </ul> <p>Merge Confidence finds and flags undeclared breaking releases. It analyzes test and release adoption data across Mend Renovate\u2019s early-adopting user base.</p> <p></p>"},{"location":"merge-confidence/#pull-request-badges","title":"Pull request badges","text":"<p>Merge Confidence adds the following badges to your pull requests:</p> <ul> <li>Age: The age of the package</li> <li>Adoption: The percentage of this package's users (within Renovate) which are using this release</li> <li>Passing: The percentage of updates which have passing tests for this package</li> <li>Confidence: The confidence level for this update</li> </ul>"},{"location":"merge-confidence/#supported-platforms","title":"Supported platforms","text":"<p>Merge Confidence badges for pull requests are available in beta on any supported Renovate platform, including Mend Remediate.</p>"},{"location":"merge-confidence/#supported-languages","title":"Supported languages","text":"<p>Data is available for packages from:</p> <ul> <li>npm</li> <li>Maven</li> <li>PyPI</li> </ul> <p>We plan to support more languages soon.</p>"},{"location":"merge-confidence/#enabling-and-disabling","title":"Enabling and disabling","text":"<p>If you use the Mend Renovate App (formerly WhiteSource Renovate App) then the badges are enabled automatically.</p> <p>If you don't use the app, you can enable the badges by adding this to your Renovate config:</p> <pre><code>\"extends\": [\"github&gt;whitesource/merge-confidence:beta\"]\n</code></pre> <p>If you want to disable the badges in the app, add this to your config:</p> <pre><code>\"ignorePresets\": [\"github&gt;whitesource/merge-confidence:beta\"]\n</code></pre>"},{"location":"merge-confidence/#confidence-levels-and-their-meaning","title":"Confidence levels and their meaning","text":"<p>Merge Confidence uses the following confidence levels:</p> <ul> <li> <p>Low: We think the update contains breaking changes. Often this is expected because it's a Major version update, but updates can have unknown breaking changes.</p> </li> <li> <p>Neutral: We don't have enough data about the update, or we can't decide if the update should be Low or High confidence.</p> </li> <li> <p>High: We rank updates as High confidence when the combination of <code>Age</code>, <code>Adoption</code> and <code>Passing</code> tests means there's a very low chance of breaking changes.</p> </li> <li> <p>Very High: We only use this for updates which are months old and have either high <code>Adoption</code> or have very high test <code>Passing</code> scores.</p> </li> </ul>"},{"location":"merge-confidence/#how-it-works","title":"How it works","text":"<p>Mend's hosted Renovate App has created millions of pull requests on <code>github.com</code> to help developers update their dependencies since 2017. We bundle and analyze metrics such as package <code>Age</code>, package <code>Adoption</code>, and <code>Passing</code> tests. This way we can find packages that have undeclared breaking changes.</p>"},{"location":"merge-confidence/#algorithm","title":"Algorithm","text":"<p>The algorithm that decides on the values is private and is not something we plan to share. Similar to a search engine's algorithm, we plan to adjust and improve it over time, for example by using historical data to set a baseline confidence level for packages.</p>"},{"location":"merge-confidence/#data","title":"Data","text":"<p>We plan to expose much more of the data via a companion website, such as number of users of a package and popular repositories which already updated to the version in question.</p>"},{"location":"merge-confidence/#explanations","title":"Explanations","text":""},{"location":"merge-confidence/#npm-package-ranking","title":"npm package ranking","text":"<p>npm packages less than three days old can be unpublished, which can result in a service impact if you have updated to a package that gets unpublished. This is why npm packages can only get the High Confidence badge when they are at least three days old.</p>"},{"location":"merge-confidence/#percentage-values-weighting","title":"Percentage values weighting","text":"<p>The percentages for <code>Adoption</code> and <code>Passing</code> are weighted towards Organizations, private repositories, and projects with high test reliability. This means those values aren't raw percentages.</p>"},{"location":"merge-confidence/#roadmap","title":"Roadmap","text":"<p>High-level information on planned improvements is available in the Merge Confidence Roadmap Project on GitHub.</p>"},{"location":"merge-confidence/#questions-and-feedback","title":"Questions and feedback","text":"<p>You are invited to create an Issue if you have anything you'd like to discuss.</p>"},{"location":"node/","title":"Node.js Versions","text":"<p>Renovate can upgrade the Node.js runtime used by your project. This way you're using the latest bug fixes, performance improvements, security mitigations, etc.</p>"},{"location":"node/#lts-codenames","title":"LTS codenames","text":"<p>Renovate understands codenames for Node.js LTS releases and will offer upgrades for them (e.g. from <code>fermium</code> to <code>gallium</code>) as long as the <code>node</code> versioning scheme is being used.</p>"},{"location":"node/#file-support","title":"File Support","text":"<p>Renovate can manage the Node.js version in the following files:</p> <ul> <li>The <code>engines</code> field in <code>package.json</code></li> <li>The <code>volta</code> field in <code>package.json</code></li> <li>The <code>.nvmrc</code> file for the Node Version Manager</li> <li>The <code>.node-version</code> file for the nodenv environment manager</li> <li>The <code>node_js</code> field in <code>.travis.yml</code></li> </ul>"},{"location":"node/#configuring-which-version-of-npm-renovate-uses","title":"Configuring which version of npm Renovate uses","text":"<p>When <code>binarySource=docker</code>, such as in the hosted Mend Renovate App, Renovate will choose and install an <code>npm</code> version dynamically.</p> <p>To control which version or constraint is installed, you should use the <code>engines.npm</code> property in your <code>package.json</code> file. Renovate bot will then use that version constraint for npm when it creates a pull request.</p> <p>For example, if you want to use at least npm <code>8.1.0</code> and also allow newer versions of npm in the <code>8.x</code> range, you would put this in your <code>package.json</code> file:</p> <pre><code>{\n\"engines\": {\n\"npm\": \"^8.1.0\"\n}\n}\n</code></pre> <p>Alternatively, the npm version can also be configured via the <code>constraints</code> option.</p>"},{"location":"noise-reduction/","title":"Noise Reduction","text":"<p>Generally, the first reaction people have to automated dependency updates like Renovate is \"oh great/feel the power of automation\". The next reaction a few days or weeks later is often \"this is getting overwhelming\". Indeed, if you leave Renovate on its default settings of raising a PR every single time any dependency receives any update.. you will get a lot of PRs and related notifications. This document will give you some ideas of how to reduce the amount of \"noise\" in your repository and the Pros/Cons of each approach.</p> <p>Of course, please keep in mind that people's definitions of \"noise\" may differ. For some people, it's noisy only if they get a notification or email from GitHub. For others, too many commits in their base branch may be \"noise\". In other words, your mileage may vary. If you have any ideas on this topic, please contact the author by starting a new discussion on the Renovate repository.</p>"},{"location":"noise-reduction/#package-grouping","title":"Package Grouping","text":"<p>To reduce noise, you can reduce the number of updates in total, and a good way to do that is via intelligent grouping of related packages.</p> <p>As an example, our default <code>\":app\"</code> and <code>\":library\"</code> presets include the rule <code>\"group:monorepos\"</code>, which means that \"sibling\" packages from known monorepos will always be grouped into the same branch/PR by renovate. For example, all <code>@angular/*</code> packages that are updated at the same time will be raised in a \"Renovate angular monorepo packages\" PR. And every package in the React monorepo will be grouped together in a React monorepo PR too.</p> <p>You may wish to take this further, for example you might want to group together all packages related to <code>eslint</code>, even if they come from separate repositories/authors. In that case you might create a config like this:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"groupName\": \"eslint\"\n}\n]\n}\n</code></pre> <p>By setting <code>matchPackagePatterns</code> to \"eslint\", it means that any package with ESLint anywhere in its name will be grouped into a <code>renovate/eslint</code> branch and related PR.</p>"},{"location":"noise-reduction/#be-smart-about-grouping-dependencies","title":"Be smart about grouping dependencies","text":"<p>Grouping dependencies may help you, but can also cause problems. Sometimes you're better off getting a single PR per dependency!</p> <p>Grouping dependencies versus single PRs:</p> <ul> <li>Grouping dependencies increases the chance that the branch has an error (\"break\" your build)</li> <li>When you upgrade multiple dependencies in one PR, it takes longer to find out which package broke the build</li> <li>If a group PR \"breaks\", you'll have to wait upgrading your other dependencies until all updates in the PR pass</li> <li>You will have less flexibility when one (or more) dependencies in the group have a major upgrade, but the other dependencies are good to go</li> </ul>"},{"location":"noise-reduction/#scheduling-renovate","title":"Scheduling Renovate","text":"<p>For a high level overview of scheduling when Renovate bot runs, read the key concepts, scheduling docs.</p> <p>On its own, the Renovate CLI tool runs once and then exits. Hence, it only runs as often as its administrator sets it to (e.g. via <code>cron</code>).</p> <p>For the Renovate app on GitHub, it currently runs continuously using a job queue that gets refreshed hourly, or when you make relevant commits to your repository. You can expect to get PRs at any time of the day, e.g. soon after versions are published to npm.</p> <p>Receiving PRs at any hour can increase the feeling of being \"overwhelmed\" by updates and possibly interrupt your flow during working hours, so many Renovate users also consider reducing Renovate's schedule to be outside their normal working hours, for example weeknights and weekends. This is achievable by configuring <code>schedule</code> in your Renovate config and optionally <code>timezone</code> (Renovate's default time zone is UTC, so you may find it easier to write schedules if you override <code>timezone</code> to your local one).</p> <p>Another example of adjusting schedules to fit with your workflow might be if your company performs releases every Monday. In that case, you might schedule Renovate to run every Tuesday after midnight to pick up new dependency updates that you can test over the following week before the next release.</p> <p>Caution: You need to make sure you leave yourself and Renovate enough time in a week to actually get all your updating and merging done. There are multiple reasons why Renovate may need to \"recreate\" PRs after you merge another:</p> <ol> <li>Conflict with <code>package.json</code> (sometimes)</li> <li>Conflict with lock files (often)</li> <li>If you have configured Renovate or GitHub that PRs must always be kept up-to-date with the base branch</li> </ol> <p>Any of the above reasons can lead to a Renovate branch being considered \"stale\" and then Renovate needs to rebase it off the base branch before you can test and merge again, and Renovate won't do this until it's back in schedule.</p>"},{"location":"noise-reduction/#selective-scheduling","title":"Selective scheduling","text":"<p>Don't think that you need to apply blanket rules to scheduling. Remember that Renovate's configuration is highly flexible so you can configure <code>automerge</code> anywhere from globally (entire repo) right down to a package/upgrade type level. You could even configure a nonsensical rule like: \"patch updates of <code>jquery</code> are for Mondays only\".</p> <p>Remember our example of grouping all <code>eslint</code> packages? If you think about it, updates to <code>eslint</code> rules don't exactly need to be applied in real time! You don't want to get too far behind, so how about we update <code>eslint</code> packages only once a month?</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"groupName\": \"eslint\",\n\"schedule\": [\"on the first day of the month\"]\n}\n]\n}\n</code></pre> <p>Or perhaps at least weekly:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"groupName\": \"eslint\",\n\"schedule\": [\"before 2am on monday\"]\n}\n]\n}\n</code></pre> <p>If you're wondering what is supported and not, under the hood, the schedule is parsed using @breejs/later using the <code>later.parse.text(scheduleString)</code> API. Read the parser documentation at breejs.github.io/later/parsers.html#text. Renovate does not support scheduled minutes or \"at an exact time\" granularity. Granularity must be at least one hour.</p>"},{"location":"noise-reduction/#automerging","title":"Automerging","text":"<p>Automerging is a Renovate feature that can save you a lot of time/noise directly, while also benefiting grouping and scheduling. In short: it means that Renovate can merge PRs or even branches itself if they pass your tests.</p> <p>We recommend that you enable automerge for any type of dependency update where you would just select Merge anyway. We all know that there are some types of updates that we (nearly) always verify manually before merging, and plenty of others that we don't bother looking at unless tests fail. Every time you select Merge on a Renovate PR without manually testing it, you should consider if you can enable automerge and save yourself the time in future.</p> <p>Automerge works particularly well for <code>devDependencies</code> and for production <code>dependencies</code> that have great test coverage.</p> <p>For example, if you have <code>jest</code> or <code>mocha</code> as a dependency, and it has an upgrade with passing tests: automerge them! If you have a linter like <code>eslint</code> or <code>tslint</code> and its update passes: automerge them! If you have an API with 100% test coverage and <code>express</code> is updated: automerge it!</p>"},{"location":"noise-reduction/#branch-automerging","title":"Branch automerging","text":"<p>Those of you familiar with GitHub might note that even if you automerge PRs, you are still going to get notifications (noise) anyway - one when the PR is created and another when it is merged. For this reason we recommend you consider setting <code>automergeType=branch</code> which will mean:</p> <ul> <li>Renovate first creates a branch and no PR</li> <li>If tests pass, Renovate pushes a commit directly to the base branch without PR</li> <li>If tests fail, Renovate raises a PR for you to review</li> </ul> <p>The result is that passing updates are essentially \"silent\" - the only sign of them are the commits to your base branch.</p>"},{"location":"noise-reduction/#automerging-and-scheduling","title":"Automerging and scheduling","text":"<p>Automerging is particularly beneficial if you have configured a schedule, because Renovate on its own may be able to automerge the majority of your updates. And this is especially so if your repository needs rebasing, e.g. because you use lock files. e.g. let's say you have dependencies <code>abc</code> and <code>xyz</code> with upgrades, and you use a <code>yarn.lock</code> file.</p> <ul> <li>At the start of the schedule, <code>Renovate</code> will create branches for <code>abc</code> and <code>xyz</code> upgrades, including <code>yarn.lock</code> updates</li> <li>After <code>abc</code> passes tests, <code>Renovate</code> will automerge it to your base branch</li> <li>The <code>xyz</code> branch probably now has <code>yarn.lock</code> conflicts</li> <li>Renovate will immediately check all other branches and rebase them</li> <li>The change to <code>xyz</code> branch will trigger another round of CI tests</li> <li>After the updated <code>xyz</code> branch passes, Renovate will automerge it too</li> </ul> <p>This is a lot better than you waking up to two PRs and then having to deal with conflicts yourself after you merge the first one.</p> <p>Remember our running <code>eslint</code> example? Let's automerge it if all the linting updates pass:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"eslint\"],\n\"groupName\": \"eslint\",\n\"schedule\": [\"before 2am on monday\"],\n\"automerge\": true,\n\"automergeType\": \"branch\"\n}\n]\n}\n</code></pre> <p>Have you come up with a rule that you think others would benefit from? How about a PR to our presets? For example the above rule could be named <code>\":automergeEslintWeekly\"</code> in <code>schedule.ts</code>.</p>"},{"location":"noise-reduction/#lock-file-considerations","title":"Lock file considerations","text":"<p>Using lock files greatly increases the chance that merging one PR will result in a second PR becoming conflicted with the base branch. The table below highlights different noise reduction strategies and their effect on pull request and potential lock file conflicts:</p> Action Effect on pull requests Chance of lock file conflicts Group dependencies together Decreases separate PRs Decreases Automerge dependencies Decreases concurrent PRs Decreases Decrease scheduled time for Renovate Increases concurrent PRs Increases"},{"location":"noise-reduction/#the-future-of-noise-reduction","title":"The Future of Noise Reduction","text":"<p>First of all, if you ever have any ideas about how to make Renovate less noisy, please raise or comment on issues in the main repository. Our philosophy is:</p> <ol> <li>Nearly everyone should use Renovate-like dependency update automation</li> <li>Over time, you should \"see\" Renovate less and less</li> </ol> <p>One of our hopes with preset configs is that a set of \"sensible\" configs can be maintained by the community that combine grouping, scheduling and automerging to reduce the amount of noise in repositories with little downside or increased risk. Such lists could be maintained and used somewhat like Adblock lists - kept up to date by maintainers but for the majority of users they are simply trusted/automatic/invisible.</p>"},{"location":"nuget/","title":"NuGet","text":"<p>Renovate can upgrade dependencies in these files:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> </ul>"},{"location":"nuget/#version-support","title":"Version Support","text":"<p>Renovate only works with SDK-style <code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files. By default, this includes:</p> <ul> <li>.NET Core 1.0 and above</li> <li>.NET Standard class libraries</li> <li><code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files that use the SDK-style syntax</li> </ul> <p>To convert your .NET Framework <code>.csproj</code>, <code>.fsproj</code> or <code>.vbproj</code> files into an SDK-style project, follow the steps in this guide.</p>"},{"location":"nuget/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any files with a <code>.csproj</code>, <code>.fsproj</code>, or <code>.vbproj</code> extension</li> <li>Existing dependencies are extracted from <code>&lt;PackageReference&gt;</code> and <code>&lt;PackageVersion&gt;</code> tags</li> <li>Renovate looks up the latest version on nuget.org (or an alternative feed if configured) to see if any upgrades are available</li> <li> <p>If the source package includes a GitHub URL as its source, and has either:</p> </li> <li> <p>a \"changelog\" file, or</p> </li> <li>uses GitHub releases</li> </ol> <p>then release notes for each version are embedded in the generated PR</p> <p>If your project file references a <code>packages.config</code> file, no dependencies will be extracted. Find out here how to migrate from <code>packages.config</code> to <code>PackageReference</code>.</p>"},{"location":"nuget/#alternate-feeds","title":"Alternate feeds","text":"<p>By default Renovate performs all lookups on <code>https://api.nuget.org/v3/index.json</code>, but you can set alternative NuGet feeds. You can set alternative feeds:</p> <ul> <li>in a <code>NuGet.config</code> file within your repository (Renovate will not search outside the repository), or</li> <li>in a Renovate configuration options file like <code>renovate.json</code></li> </ul> <pre><code>{\n\"nuget\": {\n\"registryUrls\": [\n\"https://api.nuget.org/v3/index.json\",\n\"https://example1.com/nuget/\",\n\"https://example2.com/nuget/v3/index.json\"\n]\n}\n}\n</code></pre> <p>In the example above we've set three NuGet feeds. The package resolving process uses the <code>merge</code> strategy to handle the three feeds. All feeds are checked for dependency updates, and duplicate updates are merged into a single dependency update.</p> <p>Warning</p> <p>If your project has lockfile(s), for example a <code>package.lock.json</code> file, then you must set alternate feed settings in the <code>NuGet.config</code> file only. <code>registryUrls</code> set in other files are not passed to the NuGet commands.</p>"},{"location":"nuget/#protocol-versions","title":"Protocol versions","text":"<p>NuGet supports two protocol versions, <code>v2</code> and <code>v3</code>. The NuGet client and server must use the same version. When Renovate acts as the client, it can use the <code>v2</code> and <code>v3</code> protocols.</p> <p>By default, Renovate uses the <code>v2</code> protocol. If the configured feed URL ends with <code>index.json</code>, Renovate uses the <code>v3</code> protocol. So Renovate behaves like the official NuGet client.</p>"},{"location":"nuget/#v3-feed-url-not-ending-with-indexjson","title":"v3 feed URL not ending with index.json","text":"<p>If a <code>v3</code> feed URL does not end with <code>index.json</code>, you must append <code>#protocolVersion=3</code> to the registry URL:</p> <pre><code>{\n\"nuget\": {\n\"registryUrls\": [\"http://myV3feed#protocolVersion=3\"]\n}\n}\n</code></pre> <p>You may need this workaround when you use the JFrog Artifactory.</p>"},{"location":"nuget/#authenticated-feeds","title":"Authenticated feeds","text":"<p>Credentials for authenticated/private feeds can be given via host rules in the configuration options (file or command line parameter).</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"nuget\",\n\"matchHost\": \"http://example1.com/nuget\",\n\"username\": \"root\",\n\"password\": \"p4$$w0rd\"\n}\n]\n}\n</code></pre> <p>If you're using Azure DevOps, you can set <code>matchHost</code> to <code>pkgs.dev.azure.com</code>.</p> <p>Note</p> <p>Only Basic HTTP authentication (via username and password) is supported. For Azure DevOps, you can use a PAT with <code>read</code> permissions on <code>Packaging</code> plus an empty username.</p>"},{"location":"nuget/#future-work","title":"Future work","text":"<p>Contributions and/or feature requests are welcome to support more patterns or additional use cases.</p>"},{"location":"opentelemetry/","title":"OpenTelemetry and Renovate","text":"<p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p> <p>Renovate partially supports OpenTelemetry, the emerging monitoring standard.</p> <p>OpenTelemetry has three types of observability data:</p> <ul> <li>traces</li> <li>metrics</li> <li>logs</li> </ul>"},{"location":"opentelemetry/#limitations","title":"Limitations","text":"<p>While OTLP support traces, metrics, and logs, Renovate only supports traces. This means Renovate does not support other observability data like: stats on caching, error events, number of found updates, and so on.</p> <p>Renovate uses <code>@opentelemetry/exporter-trace-otlp-http</code> under the hood. This means that Renovate sends traces via OTLP/HTTP in JSON-encoded protobuf format only.</p>"},{"location":"opentelemetry/#usage","title":"Usage","text":"<p>To activate the instrumentation, you must set the <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> environment variable. This variable controls the endpoint for the telemetry data. Once this endpoint is set, you can use all environment variables listed in the OpenTelemetry specification.</p>"},{"location":"opentelemetry/#debugging","title":"Debugging","text":"<p>To help you debug, you can print the telemetry to the console. Use the environment variable <code>RENOVATE_TRACING_CONSOLE_EXPORTER</code>.</p>"},{"location":"opentelemetry/#examples","title":"Examples","text":"<p>An example with a local OpenTelemetry setup can be found on the OpenTelemetry examples page.</p>"},{"location":"php/","title":"Automated Dependency Updates for PHP Composer Dependencies","text":"<p>Renovate can upgrade dependencies in PHP's <code>composer.json</code> and <code>composer.lock</code> files.</p>"},{"location":"php/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>composer.json</code> files</li> <li>Existing dependencies are extracted from the relevant sections of the JSON</li> <li>Renovate resolves the dependency on Packagist (or elsewhere if configured), and filter for SemVer versions</li> <li>A PR is created with <code>composer.json</code> and <code>composer.lock</code> updated in the same commit</li> <li>If the source repository has either a \"changelog\" file or uses GitHub releases, then Release Notes for each version will be embedded in the generated PR</li> </ol>"},{"location":"php/#enabling","title":"Enabling","text":"<p>Either install the Renovate App on GitHub, or check out Renovate OSS for self-hosted.</p>"},{"location":"php/#private-packages","title":"Private packages","text":"<p>If you are using a privately hosted Composer package you can pass the credentials via the <code>hostRules</code> configuration.</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"some.vendor.com\",\n\"hostType\": \"packagist\",\n\"username\": \"&lt;your-username&gt;\",\n\"password\": \"&lt;your-password&gt;\"\n},\n{\n\"matchHost\": \"bearer-auth.for.vendor.com\",\n\"hostType\": \"packagist\",\n\"token\": \"abcdef0123456789\"\n}\n]\n}\n</code></pre> <p>This host rule is best added to the bot's <code>config.js</code> config so that it is not visible to users of the repository. If you are using the hosted Mend Renovate App then you can encrypt it with Renovate's public key instead, so that only Renovate can decrypt it.</p> <p>Go to https://app.renovatebot.com/encrypt, paste in the secret string you wish to encrypt, select Encrypt, then copy the encrypted result. You may encrypt your <code>password</code> only, but you can encrypt your <code>username</code> as well.</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"some.vendor.com\",\n\"hostType\": \"packagist\",\n\"encrypted\": {\n\"username\": \"&lt;your-encrypted-username&gt;\",\n\"password\": \"&lt;your-encrypted-password&gt;\"\n}\n},\n{\n\"matchHost\": \"bearer-auth.for.vendor.com\",\n\"hostType\": \"packagist\",\n\"encrypted\": {\n\"token\": \"&lt;your-encrypted-token&gt;\"\n}\n}\n]\n}\n</code></pre>"},{"location":"presets-compatibility/","title":"Compatibility Presets","text":""},{"location":"presets-compatibility/#compatibilityadditionalbranchprefix","title":"compatibility:additionalBranchPrefix","text":"<p>Backwards-compatibility preset to restore <code>additionalBranchPrefix</code> settings for multiple managers which were removed in Renovate <code>v25</code>.</p> <pre><code>{\n\"buildkite\": {\n\"additionalBranchPrefix\": \"buildkite-\"\n},\n\"cargo\": {\n\"additionalBranchPrefix\": \"rust-\"\n},\n\"docker\": {\n\"additionalBranchPrefix\": \"docker-\"\n},\n\"homebrew\": {\n\"additionalBranchPrefix\": \"homebrew-\"\n},\n\"packageRules\": [\n{\n\"additionalBranchPrefix\": \"helm-\",\n\"matchDatasources\": [\n\"helm\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-config/","title":"Full Config Presets","text":""},{"location":"presets-config/#configbase","title":"config:base","text":"<p>Default base configuration for all languages.</p> <pre><code>{\n\"extends\": [\n\":dependencyDashboard\",\n\":semanticPrefixFixDepsChoreOthers\",\n\":ignoreModulesAndTests\",\n\"group:monorepos\",\n\"group:recommended\",\n\"replacements:all\",\n\"workarounds:all\"\n]\n}\n</code></pre>"},{"location":"presets-config/#configjs-app","title":"config:js-app","text":"<p>Default configuration for webapps.</p> <pre><code>{\n\"extends\": [\n\"config:base\",\n\":pinAllExceptPeerDependencies\"\n]\n}\n</code></pre>"},{"location":"presets-config/#configjs-lib","title":"config:js-lib","text":"<p>Default configuration for libraries.</p> <pre><code>{\n\"extends\": [\n\"config:base\",\n\":pinOnlyDevDependencies\"\n]\n}\n</code></pre>"},{"location":"presets-config/#configsemverallmonthly","title":"config:semverAllMonthly","text":"<p>Preserve SemVer ranges and update everything together once a month.</p> <pre><code>{\n\"extends\": [\n\":preserveSemverRanges\",\n\"group:all\",\n\"schedule:monthly\",\n\":maintainLockFilesMonthly\"\n],\n\"lockFileMaintenance\": {\n\"commitMessageAction\": \"Update\",\n\"extends\": [\n\"group:all\"\n]\n},\n\"separateMajorMinor\": false\n}\n</code></pre>"},{"location":"presets-default/","title":"Default Presets","text":""},{"location":"presets-default/#assignandreviewarg0","title":":assignAndReview(<code>&lt;arg0&gt;</code>)","text":"<p>Set <code>arg0</code> as assignee and reviewer of PRs.</p> <pre><code>{\n\"extends\": [\n\":assignee(arg0)\",\n\":reviewer(arg0)\"\n]\n}\n</code></pre>"},{"location":"presets-default/#assigneearg0","title":":assignee(<code>&lt;arg0&gt;</code>)","text":"<p>Assign PRs to <code>arg0</code>.</p> <pre><code>{\n\"assignees\": [\n\"arg0\"\n]\n}\n</code></pre>"},{"location":"presets-default/#automergeall","title":":automergeAll","text":"<p>Automerge all upgrades (including <code>major</code>) if they pass tests.</p> <pre><code>{\n\"automerge\": true\n}\n</code></pre>"},{"location":"presets-default/#automergebranch","title":":automergeBranch","text":"<p>If automerging, push the new commit directly to the base branch (no PR).</p> <pre><code>{\n\"automergeType\": \"branch\"\n}\n</code></pre>"},{"location":"presets-default/#automergedigest","title":":automergeDigest","text":"<p>Automerge <code>digest</code> upgrades if they pass tests.</p> <pre><code>{\n\"digest\": {\n\"automerge\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#automergedisabled","title":":automergeDisabled","text":"<p>Disable automerging feature - wait for humans to merge all PRs.</p> <pre><code>{\n\"automerge\": false\n}\n</code></pre>"},{"location":"presets-default/#automergelinters","title":":automergeLinters","text":"<p>Update lint packages automatically if tests pass.</p> <pre><code>{\n\"packageRules\": [\n{\n\"automerge\": true,\n\"extends\": [\n\"packages:linters\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#automergemajor","title":":automergeMajor","text":"<p>Automerge all upgrades (including <code>major</code>) if they pass tests.</p> <pre><code>{\n\"automerge\": true\n}\n</code></pre>"},{"location":"presets-default/#automergeminor","title":":automergeMinor","text":"<p>Automerge <code>patch</code> and <code>minor</code> upgrades if they pass tests.</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"automerge\": true\n},\n\"minor\": {\n\"automerge\": true\n},\n\"patch\": {\n\"automerge\": true\n},\n\"pin\": {\n\"automerge\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#automergepatch","title":":automergePatch","text":"<p>Automerge <code>patch</code> upgrades if they pass tests.</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"automerge\": true\n},\n\"patch\": {\n\"automerge\": true\n},\n\"pin\": {\n\"automerge\": true\n},\n\"separateMinorPatch\": true\n}\n</code></pre>"},{"location":"presets-default/#automergepr","title":":automergePr","text":"<p>Raise a PR first before any automerging.</p> <pre><code>{\n\"automergeType\": \"pr\"\n}\n</code></pre>"},{"location":"presets-default/#automergerequireallstatuschecks","title":":automergeRequireAllStatusChecks","text":"<p>Require all status checks to pass before any automerging.</p> <pre><code>{\n\"ignoreTests\": false\n}\n</code></pre>"},{"location":"presets-default/#automergetesters","title":":automergeTesters","text":"<p>Update testing packages automatically if tests pass.</p> <pre><code>{\n\"packageRules\": [\n{\n\"automerge\": true,\n\"extends\": [\n\"packages:test\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#automergetypes","title":":automergeTypes","text":"<p>Update <code>@types/*</code> packages automatically if tests pass.</p> <pre><code>{\n\"packageRules\": [\n{\n\"automerge\": true,\n\"matchPackagePrefixes\": [\n\"@types/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#combinepatchminorreleases","title":":combinePatchMinorReleases","text":"<p>Do not separate <code>patch</code> and <code>minor</code> upgrades into separate PRs for the same dependency.</p> <pre><code>{\n\"separateMinorPatch\": false\n}\n</code></pre>"},{"location":"presets-default/#dependencydashboard","title":":dependencyDashboard","text":"<p>Enable Renovate Dependency Dashboard creation.</p> <pre><code>{\n\"dependencyDashboard\": true\n}\n</code></pre>"},{"location":"presets-default/#dependencydashboardapproval","title":":dependencyDashboardApproval","text":"<p>Enable Renovate Dependency Dashboard approval workflow.</p> <pre><code>{\n\"dependencyDashboardApproval\": true\n}\n</code></pre>"},{"location":"presets-default/#disabledependencydashboard","title":":disableDependencyDashboard","text":"<p>Disable Renovate Dependency Dashboard creation.</p> <pre><code>{\n\"dependencyDashboard\": false\n}\n</code></pre>"},{"location":"presets-default/#disabledevdependencies","title":":disableDevDependencies","text":"<p>Do not renovate <code>devDependencies</code> versions/ranges.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": false,\n\"matchDepTypes\": [\n\"devDependencies\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#disabledigestupdates","title":":disableDigestUpdates","text":"<p>Disable <code>digest</code> and Git hash updates.</p> <pre><code>{\n\"digest\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-default/#disabledomainarg0","title":":disableDomain(<code>&lt;arg0&gt;</code>)","text":"<p>Disable requests to a particular domain.</p> <pre><code>{\n\"hostRules\": [\n{\n\"enabled\": false,\n\"matchHost\": \"arg0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#disablehostarg0","title":":disableHost(<code>&lt;arg0&gt;</code>)","text":"<p>Disable requests to a particular host.</p> <pre><code>{\n\"hostRules\": [\n{\n\"enabled\": false,\n\"matchHost\": \"https://arg0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#disablelockfiles","title":":disableLockFiles","text":"<p>Disable lock file updates.</p> <pre><code>{\n\"updateLockFiles\": false\n}\n</code></pre>"},{"location":"presets-default/#disablemajorupdates","title":":disableMajorUpdates","text":"<p>Disable <code>major</code> updates.</p> <pre><code>{\n\"major\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-default/#disablepeerdependencies","title":":disablePeerDependencies","text":"<p>Do not renovate <code>peerDependencies</code> versions/ranges.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": false,\n\"matchDepTypes\": [\n\"peerDependencies\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#disableprcontrols","title":":disablePrControls","text":"<p>Remove the checkbox controls from PRs.</p> <pre><code>{\n\"prBodyTemplate\": \"{{{header}}}{{{table}}}{{{notes}}}{{{changelogs}}}{{{configDescription}}}{{{footer}}}\"\n}\n</code></pre>"},{"location":"presets-default/#disableratelimiting","title":":disableRateLimiting","text":"<p>Remove hourly and concurrent rate limits.</p> <pre><code>{\n\"prConcurrentLimit\": 0,\n\"prHourlyLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#disablerenovate","title":":disableRenovate","text":"<p>Disable Renovate.</p> <pre><code>{\n\"enabled\": false\n}\n</code></pre>"},{"location":"presets-default/#disablevulnerabilityalerts","title":":disableVulnerabilityAlerts","text":"<p>Disable vulnerability alerts completely.</p> <pre><code>{\n\"vulnerabilityAlerts\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-default/#docker","title":":docker","text":"<p>Keep Dockerfile <code>FROM</code> sources updated.</p> <pre><code>{\n\"docker\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#donotpinpackagearg0","title":":doNotPinPackage(<code>&lt;arg0&gt;</code>)","text":"<p>Disable version pinning for <code>arg0</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\n\"arg0\"\n],\n\"rangeStrategy\": \"replace\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#enableprecommit","title":":enablePreCommit","text":"<p>Enable the pre-commit manager.</p> <pre><code>{\n\"pre-commit\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#enablerenovate","title":":enableRenovate","text":"<p>Enable Renovate.</p> <pre><code>{\n\"enabled\": true\n}\n</code></pre>"},{"location":"presets-default/#enablevulnerabilityalerts","title":":enableVulnerabilityAlerts","text":"<p>Raise PR when vulnerability alerts are detected.</p> <pre><code>{\n\"vulnerabilityAlerts\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#enablevulnerabilityalertswithlabelarg0","title":":enableVulnerabilityAlertsWithLabel(<code>&lt;arg0&gt;</code>)","text":"<p>Raise PR when vulnerability alerts are detected with label <code>arg0</code>.</p> <pre><code>{\n\"vulnerabilityAlerts\": {\n\"enabled\": true,\n\"labels\": [\n\"arg0\"\n]\n}\n}\n</code></pre>"},{"location":"presets-default/#followtagarg0-arg1","title":":followTag(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>For package <code>arg0</code>, strictly follow release tag <code>arg1</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"followTag\": \"arg1\",\n\"matchPackageNames\": [\n\"arg0\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#githubcomtokenarg0","title":":githubComToken(<code>&lt;arg0&gt;</code>)","text":"<p>Use provided token for <code>github.com</code> lookups. Do not configure this if you are already running on <code>github.com</code>.</p> <pre><code>{\n\"hostRules\": [\n{\n\"encrypted\": {\n\"token\": \"arg0\"\n},\n\"matchHost\": \"github.com\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#gitsignoff","title":":gitSignOff","text":"<p>Append <code>Signed-off-by:</code> to signoff Git commits.</p> <pre><code>{\n\"commitBody\": \"Signed-off-by: {{{gitAuthor}}}\"\n}\n</code></pre>"},{"location":"presets-default/#gomod","title":":gomod","text":"<p>Enable Go modules support.</p> <pre><code>{\n\"gomod\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#grouparg0-arg1","title":":group(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Group <code>arg1</code> packages into same branch/PR.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": [\n\"arg0\"\n],\n\"groupName\": \"arg1\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#ignoremodulesandtests","title":":ignoreModulesAndTests","text":"<p>Ignore <code>node_modules</code>, <code>bower_components</code>, <code>vendor</code> and various test/tests directories.</p> <pre><code>{\n\"ignorePaths\": [\n\"**/node_modules/**\",\n\"**/bower_components/**\",\n\"**/vendor/**\",\n\"**/examples/**\",\n\"**/__tests__/**\",\n\"**/test/**\",\n\"**/tests/**\",\n\"**/__fixtures__/**\"\n]\n}\n</code></pre>"},{"location":"presets-default/#ignoreunstable","title":":ignoreUnstable","text":"<p>Upgrade to unstable versions only if the existing version is unstable.</p> <pre><code>{\n\"ignoreUnstable\": true\n}\n</code></pre>"},{"location":"presets-default/#includenodemodules","title":":includeNodeModules","text":"<p>Include <code>package.json</code> files found within <code>node_modules</code> folders or <code>bower_components</code>.</p> <pre><code>{\n\"ignorePaths\": []\n}\n</code></pre>"},{"location":"presets-default/#labelarg0","title":":label(<code>&lt;arg0&gt;</code>)","text":"<p>Apply label <code>arg0</code> to PRs.</p> <pre><code>{\n\"labels\": [\n\"arg0\"\n]\n}\n</code></pre>"},{"location":"presets-default/#labelsarg0-arg1","title":":labels(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Apply labels <code>arg0</code> and <code>arg1</code> to PRs.</p> <pre><code>{\n\"labels\": [\n\"arg0\",\n\"arg1\"\n]\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesdisabled","title":":maintainLockFilesDisabled","text":"<p>Update existing lock files only when <code>package.json</code> is modified.</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesmonthly","title":":maintainLockFilesMonthly","text":"<p>Run lock file maintenance (updates) on the first day of each month.</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"enabled\": true,\n\"extends\": [\n\"schedule:monthly\"\n]\n}\n}\n</code></pre>"},{"location":"presets-default/#maintainlockfilesweekly","title":":maintainLockFilesWeekly","text":"<p>Run lock file maintenance (updates) early Monday mornings.</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"enabled\": true,\n\"extends\": [\n\"schedule:weekly\"\n]\n}\n}\n</code></pre>"},{"location":"presets-default/#meteor","title":":meteor","text":"<p>Keep Meteor Npm.depends packages updated.</p> <pre><code>{\n\"meteor\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#nounscheduledupdates","title":":noUnscheduledUpdates","text":"<p>Only update branches when scheduled.</p> <pre><code>{\n\"updateNotScheduled\": false\n}\n</code></pre>"},{"location":"presets-default/#npm","title":":npm","text":"<p>Keep <code>package.json</code> npm dependencies updated.</p> <pre><code>{\n\"npm\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-default/#onlynpm","title":":onlyNpm","text":"<p>Renovate only npm dependencies.</p> <pre><code>{\n\"docker\": {\n\"enabled\": false\n},\n\"meteor\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-default/#pathsemanticcommittypearg0-arg1","title":":pathSemanticCommitType(<code>&lt;arg0&gt;</code>, <code>&lt;arg1&gt;</code>)","text":"<p>Use semanticCommitType <code>arg0</code> for all package files matching path <code>arg1</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPaths\": [\n\"arg0\"\n],\n\"semanticCommitType\": \"arg1\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#pinallexceptpeerdependencies","title":":pinAllExceptPeerDependencies","text":"<p>Pin all dependency versions except <code>peerDependencies</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"rangeStrategy\": \"pin\"\n},\n{\n\"matchDepTypes\": [\n\"engines\",\n\"peerDependencies\"\n],\n\"rangeStrategy\": \"auto\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#pindependencies","title":":pinDependencies","text":"<p>Pin dependency versions where <code>depType=dependencies</code>. Usually applies only to non-dev dependencies in <code>package.json</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\n\"dependencies\"\n],\n\"rangeStrategy\": \"pin\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#pindevdependencies","title":":pinDevDependencies","text":"<p>Pin dependency versions for <code>devDependencies</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\n\"devDependencies\"\n],\n\"rangeStrategy\": \"pin\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#pindigestsdisabled","title":":pinDigestsDisabled","text":"<p>Disable pinning of Docker dependency digests.</p> <pre><code>{\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"presets-default/#pinonlydevdependencies","title":":pinOnlyDevDependencies","text":"<p>Pin dependency versions for <code>devDependencies</code> and retain SemVer ranges for others.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"rangeStrategy\": \"replace\"\n},\n{\n\"matchDepTypes\": [\n\"devDependencies\"\n],\n\"rangeStrategy\": \"pin\"\n},\n{\n\"matchDepTypes\": [\n\"peerDependencies\"\n],\n\"rangeStrategy\": \"widen\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#pinskipci","title":":pinSkipCi","text":"<p>Add <code>[skip ci]</code> to commit message body whenever pinning.</p> <pre><code>{\n\"pin\": {\n\"commitBody\": \"[skip ci]\"\n}\n}\n</code></pre>"},{"location":"presets-default/#pinversions","title":":pinVersions","text":"<p>Use version pinning (maintain a single version only and not SemVer ranges).</p> <pre><code>{\n\"rangeStrategy\": \"pin\"\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimit10","title":":prConcurrentLimit10","text":"<p>Limit to maximum 10 open PRs at any time.</p> <pre><code>{\n\"prConcurrentLimit\": 10\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimit20","title":":prConcurrentLimit20","text":"<p>Limit to maximum 20 open PRs at any time.</p> <pre><code>{\n\"prConcurrentLimit\": 20\n}\n</code></pre>"},{"location":"presets-default/#prconcurrentlimitnone","title":":prConcurrentLimitNone","text":"<p>Remove limit for open PRs at any time.</p> <pre><code>{\n\"prConcurrentLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#preservesemverranges","title":":preserveSemverRanges","text":"<p>Preserve (but continue to upgrade) any existing SemVer ranges.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"rangeStrategy\": \"replace\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit1","title":":prHourlyLimit1","text":"<p>Rate limit PR creation to a maximum of one per hour.</p> <pre><code>{\n\"prHourlyLimit\": 1\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit2","title":":prHourlyLimit2","text":"<p>Rate limit PR creation to a maximum of two per hour.</p> <pre><code>{\n\"prHourlyLimit\": 2\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimit4","title":":prHourlyLimit4","text":"<p>Rate limit PR creation to a maximum of four per hour.</p> <pre><code>{\n\"prHourlyLimit\": 4\n}\n</code></pre>"},{"location":"presets-default/#prhourlylimitnone","title":":prHourlyLimitNone","text":"<p>Removes rate limit for PR creation per hour.</p> <pre><code>{\n\"prHourlyLimit\": 0\n}\n</code></pre>"},{"location":"presets-default/#primmediately","title":":prImmediately","text":"<p>Raise PRs immediately (after branch is created).</p> <pre><code>{\n\"prCreation\": \"immediate\"\n}\n</code></pre>"},{"location":"presets-default/#prnotpending","title":":prNotPending","text":"<p>Wait for branch tests to pass or fail before creating the PR.</p> <pre><code>{\n\"prCreation\": \"not-pending\"\n}\n</code></pre>"},{"location":"presets-default/#rebasestaleprs","title":":rebaseStalePrs","text":"<p>Rebase existing PRs any time the base branch has been updated.</p> <pre><code>{\n\"rebaseWhen\": \"behind-base-branch\"\n}\n</code></pre>"},{"location":"presets-default/#renovateprefix","title":":renovatePrefix","text":"<p>Prefix <code>renovate/</code> to all branch names.</p> <pre><code>{\n\"branchPrefix\": \"renovate/\"\n}\n</code></pre>"},{"location":"presets-default/#respectlatest","title":":respectLatest","text":"<p>Upgrade versions up to the \"latest\" tag in the npm registry.</p> <pre><code>{\n\"respectLatest\": true\n}\n</code></pre>"},{"location":"presets-default/#reviewerarg0","title":":reviewer(<code>&lt;arg0&gt;</code>)","text":"<p>Add <code>arg0</code> as reviewer for PRs.</p> <pre><code>{\n\"reviewers\": [\n\"arg0\"\n]\n}\n</code></pre>"},{"location":"presets-default/#semanticcommits","title":":semanticCommits","text":"<p>Use semantic prefixes for commit messages and PR titles.</p> <pre><code>{\n\"semanticCommits\": \"enabled\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitscopearg0","title":":semanticCommitScope(<code>&lt;arg0&gt;</code>)","text":"<p>Use semantic commit scope <code>arg0</code> for all commits and PR titles.</p> <pre><code>{\n\"semanticCommitScope\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitscopedisabled","title":":semanticCommitScopeDisabled","text":"<p>Disable semantic commit scope for all commits and PR titles.</p> <pre><code>{\n\"semanticCommitScope\": null\n}\n</code></pre>"},{"location":"presets-default/#semanticcommitsdisabled","title":":semanticCommitsDisabled","text":"<p>Disable semantic prefixes for commit messages and PR titles.</p> <pre><code>{\n\"semanticCommits\": \"disabled\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommittypearg0","title":":semanticCommitType(<code>&lt;arg0&gt;</code>)","text":"<p>Use <code>arg0</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n\"semanticCommitType\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#semanticcommittypeallarg0","title":":semanticCommitTypeAll(<code>&lt;arg0&gt;</code>)","text":"<p>If Renovate detects semantic commits, it will use semantic commit type <code>arg0</code> for all commits.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"semanticCommitType\": \"arg0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixchore","title":":semanticPrefixChore","text":"<p>Use <code>chore</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n\"extends\": [\n\":semanticCommitType(chore)\"\n]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixfix","title":":semanticPrefixFix","text":"<p>Use <code>fix</code> as semantic commit type for commit messages and PR titles.</p> <pre><code>{\n\"extends\": [\n\":semanticCommitType(fix)\"\n]\n}\n</code></pre>"},{"location":"presets-default/#semanticprefixfixdepschoreothers","title":":semanticPrefixFixDepsChoreOthers","text":"<p>Use semantic commit type <code>fix</code> for dependencies and <code>chore</code> for all others if semantic commits are in use.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"semanticCommitType\": \"chore\"\n},\n{\n\"matchDepTypes\": [\n\"dependencies\",\n\"require\"\n],\n\"semanticCommitType\": \"fix\"\n},\n{\n\"matchDatasources\": [\n\"maven\"\n],\n\"matchDepTypes\": [\n\"compile\",\n\"provided\",\n\"runtime\",\n\"system\",\n\"import\",\n\"parent\"\n],\n\"semanticCommitType\": \"fix\"\n}\n]\n}\n</code></pre>"},{"location":"presets-default/#separatemajorreleases","title":":separateMajorReleases","text":"<p>Separate <code>major</code> versions of dependencies into individual branches/PRs.</p> <pre><code>{\n\"separateMajorMinor\": true\n}\n</code></pre>"},{"location":"presets-default/#separatemultiplemajorreleases","title":":separateMultipleMajorReleases","text":"<p>Separate each <code>major</code> version of dependencies into individual branches/PRs.</p> <pre><code>{\n\"separateMajorMinor\": true,\n\"separateMultipleMajor\": true\n}\n</code></pre>"},{"location":"presets-default/#separatepatchreleases","title":":separatePatchReleases","text":"<p>Separate <code>patch</code> and <code>minor</code> releases of dependencies into separate PRs.</p> <pre><code>{\n\"separateMinorPatch\": true\n}\n</code></pre>"},{"location":"presets-default/#skipstatuschecks","title":":skipStatusChecks","text":"<p>Skip status checks and automerge right away.</p> <pre><code>{\n\"ignoreTests\": true\n}\n</code></pre>"},{"location":"presets-default/#timezonearg0","title":":timezone(<code>&lt;arg0&gt;</code>)","text":"<p>Evaluate schedules according to timezone <code>arg0</code>.</p> <pre><code>{\n\"timezone\": \"arg0\"\n}\n</code></pre>"},{"location":"presets-default/#updatenotscheduled","title":":updateNotScheduled","text":"<p>Keep existing branches updated even when not scheduled.</p> <pre><code>{\n\"updateNotScheduled\": true\n}\n</code></pre>"},{"location":"presets-default/#widenpeerdependencies","title":":widenPeerDependencies","text":"<p>Always widen <code>peerDependencies</code> SemVer ranges when updating, instead of replacing.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\n\"peerDependencies\"\n],\n\"rangeStrategy\": \"widen\"\n}\n]\n}\n</code></pre>"},{"location":"presets-docker/","title":"Docker Presets","text":""},{"location":"presets-docker/#dockerdisable","title":"docker:disable","text":"<p>Disable Docker updates.</p> <pre><code>{\n\"circleci\": {\n\"enabled\": false\n},\n\"docker\": {\n\"enabled\": false\n},\n\"docker-compose\": {\n\"enabled\": false\n}\n}\n</code></pre>"},{"location":"presets-docker/#dockerdisablemajor","title":"docker:disableMajor","text":"<p>Disable Docker <code>major</code> updates.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": false,\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchUpdateTypes\": [\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-docker/#dockerenablemajor","title":"docker:enableMajor","text":"<p>Enable Docker <code>major</code> updates.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": true,\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchUpdateTypes\": [\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-docker/#dockerpindigests","title":"docker:pinDigests","text":"<p>Pin Docker digests.</p> <pre><code>{\n\"docker\": {\n\"pinDigests\": true\n}\n}\n</code></pre>"},{"location":"presets-group/","title":"Group Presets","text":""},{"location":"presets-group/#groupall","title":"group:all","text":"<p>Group all updates together.</p> <pre><code>{\n\"groupName\": \"all dependencies\",\n\"groupSlug\": \"all\",\n\"lockFileMaintenance\": {\n\"enabled\": false\n},\n\"packageRules\": [\n{\n\"groupName\": \"all dependencies\",\n\"groupSlug\": \"all\",\n\"matchPackagePatterns\": [\n\"*\"\n]\n}\n],\n\"separateMajorMinor\": false\n}\n</code></pre>"},{"location":"presets-group/#groupallapollographql","title":"group:allApollographql","text":"<p>Group all packages published by Apollo GraphQL together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:apollographql\",\n\"groupName\": \"Apollo GraphQL packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupallnonmajor","title":"group:allNonMajor","text":"<p>Group all <code>minor</code> and <code>patch</code> updates together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"all non-major dependencies\",\n\"groupSlug\": \"all-minor-patch\",\n\"matchPackagePatterns\": [\n\"*\"\n],\n\"matchUpdateTypes\": [\n\"minor\",\n\"patch\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupcodemirror","title":"group:codemirror","text":"<p>Group CodeMirror packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"CodeMirror\",\n\"matchPackagePrefixes\": [\n\"@codemirror/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdefinitelytyped","title":"group:definitelyTyped","text":"<p>Group all <code>@types</code> packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"definitelyTyped\",\n\"matchPackagePrefixes\": [\n\"@types/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnetcore","title":"group:dotNetCore","text":"<p>.NET Core Docker containers.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \".NET Core Docker containers\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePrefixes\": [\n\"mcr.microsoft.com/dotnet/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfortawesome","title":"group:fortawesome","text":"<p>Group all packages by Font Awesome together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"Font Awesome\",\n\"matchPackagePrefixes\": [\n\"@fortawesome/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfusionjs","title":"group:fusionjs","text":"<p>Group Fusion.js packages together.</p> <pre><code>{\n\"matchPackageNames\": [\n\"fusion-cli\",\n\"fusion-core\",\n\"fusion-test-utils\",\n\"fusion-tokens\"\n],\n\"matchPackagePrefixes\": [\n\"fusion-plugin-\",\n\"fusion-react\",\n\"^usion-apollo\"\n]\n}\n</code></pre>"},{"location":"presets-group/#groupglimmer","title":"group:glimmer","text":"<p>Group Glimmer.js packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"Glimmer.js packages\",\n\"groupSlug\": \"glimmer\",\n\"matchPackageNames\": [\n\"@glimmer/component\",\n\"@glimmer/tracking\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgoogleapis","title":"group:googleapis","text":"<p>Group <code>googleapis</code> packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:googleapis\",\n\"groupName\": \"googleapis packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgoopenapi","title":"group:goOpenapi","text":"<p>Group <code>go-openapi</code> packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"go-openapi packages\",\n\"groupSlug\": \"go-openapi\",\n\"matchDatasources\": [\n\"go\"\n],\n\"matchPackagePrefixes\": [\n\"github.com/go-openapi/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatecommons","title":"group:hibernateCommons","text":"<p>Group Java Hibernate Commons packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"hibernate commons\",\n\"matchPackagePrefixes\": [\n\"org.hibernate.common:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatecore","title":"group:hibernateCore","text":"<p>Group Java Hibernate Core packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"hibernate core\",\n\"matchPackagePrefixes\": [\n\"org.hibernate:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernateogm","title":"group:hibernateOgm","text":"<p>Group Java Hibernate OGM packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"hibernate ogm\",\n\"matchPackagePrefixes\": [\n\"org.hibernate.ogm:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphibernatevalidator","title":"group:hibernateValidator","text":"<p>Group Java Hibernate Validator packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"hibernate validator\",\n\"matchPackagePrefixes\": [\n\"org.hibernate.validator:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupilluminate","title":"group:illuminate","text":"<p>Group PHP Illuminate packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"illuminate packages\",\n\"groupSlug\": \"illuminate\",\n\"matchPackagePrefixes\": [\n\"illuminate/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjekyllecosystem","title":"group:jekyllEcosystem","text":"<p>Group Jekyll and related Ruby packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"jekyll ecosystem packages\",\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/jekyll/\",\n\"https://github.com/github/pages-gem\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjestplustsjest","title":"group:jestPlusTSJest","text":"<p>Add <code>ts-jest</code> <code>major</code> update to Jest monorepo.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"jest monorepo\",\n\"matchSourceUrls\": [\n\"https://github.com/kulshekhar/ts-jest\"\n],\n\"matchUpdateTypes\": [\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjestplustypes","title":"group:jestPlusTypes","text":"<p>Add <code>@types/jest</code> update to Jest monorepo.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"jest monorepo\",\n\"matchPackageNames\": [\n\"@types/jest\"\n],\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjstest","title":"group:jsTest","text":"<p>Group JS test packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:jsTest\",\n\"groupName\": \"JS test packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjstestnonmajor","title":"group:jsTestNonMajor","text":"<p>Group non-major JS test package updates together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:jsTest\",\n\"groupName\": \"JS test packages\",\n\"matchUpdateTypes\": [\n\"minor\",\n\"patch\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjsunittest","title":"group:jsUnitTest","text":"<p>Group JavaScript unit test packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:jsUnitTest\",\n\"groupName\": \"JS unit test packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjsunittestnonmajor","title":"group:jsUnitTestNonMajor","text":"<p>Group JavaScipt unit test packages together for non-major updates.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:jsUnitTest\",\n\"groupName\": \"JS unit test packages\",\n\"matchUpdateTypes\": [\n\"minor\",\n\"patch\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjwtframework","title":"group:jwtFramework","text":"<p>Group JWT Framework packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"JWT Framework packages\",\n\"matchDatasources\": [\n\"packagist\"\n],\n\"matchPackagePrefixes\": [\n\"web-token/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupkubernetes","title":"group:kubernetes","text":"<p>Group Kubernetes packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"kubernetes packages\",\n\"groupSlug\": \"kubernetes-go\",\n\"matchDatasources\": [\n\"go\"\n],\n\"matchPackagePrefixes\": [\n\"k8s.io/api\",\n\"k8s.io/apiextensions-apiserver\",\n\"k8s.io/apimachinery\",\n\"k8s.io/apiserver\",\n\"k8s.io/cli-runtime\",\n\"k8s.io/client-go\",\n\"k8s.io/cloud-provider\",\n\"k8s.io/cluster-bootstrap\",\n\"k8s.io/code-generator\",\n\"k8s.io/component-base\",\n\"k8s.io/controller-manager\",\n\"k8s.io/cri-api\",\n\"k8s.io/csi-translation-lib\",\n\"k8s.io/kube-aggregator\",\n\"k8s.io/kube-controller-manager\",\n\"k8s.io/kube-proxy\",\n\"k8s.io/kube-scheduler\",\n\"k8s.io/kubectl\",\n\"k8s.io/kubelet\",\n\"k8s.io/legacy-cloud-providers\",\n\"k8s.io/metrics\",\n\"k8s.io/mount-utils\",\n\"k8s.io/pod-security-admission\",\n\"k8s.io/sample-apiserver\",\n\"k8s.io/sample-cli-plugin\",\n\"k8s.io/sample-controller\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouplinters","title":"group:linters","text":"<p>Group various lint packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:linters\",\n\"groupName\": \"linters\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnodejs","title":"group:nodeJs","text":"<p>Group anything that looks like Node.js together so that it's updated together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"commitMessageTopic\": \"Node.js\",\n\"excludePackageNames\": [\n\"calico/node\",\n\"kindest/node\"\n],\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackageNames\": [\n\"node\"\n],\n\"matchPackagePatterns\": [\n\"/node$\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupphpstan","title":"group:phpstan","text":"<p>Group PHPStan packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"PHPStan packages\",\n\"matchDatasources\": [\n\"packagist\"\n],\n\"matchPackagePatterns\": [\n\"^phpstan/phpstan$\",\n\"/phpstan-\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppolymer","title":"group:polymer","text":"<p>Group all <code>@polymer</code> packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"polymer packages\",\n\"matchPackagePrefixes\": [\n\"@polymer/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppostcss","title":"group:postcss","text":"<p>Group PostCSS packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:postcss\",\n\"groupName\": \"postcss packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact","title":"group:react","text":"<p>Group React and corresponding <code>@types</code> packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"react monorepo\",\n\"matchPackageNames\": [\n\"@types/react\",\n\"@types/react-dom\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprecommended","title":"group:recommended","text":"<p>Use curated list of recommended non-monorepo package groupings.</p> <pre><code>{\n\"extends\": [\n\"group:nodeJs\",\n\"group:allApollographql\",\n\"group:codemirror\",\n\"group:fortawesome\",\n\"group:fusionjs\",\n\"group:glimmer\",\n\"group:goOpenapi\",\n\"group:hibernateCore\",\n\"group:hibernateValidator\",\n\"group:hibernateOgm\",\n\"group:hibernateCommons\",\n\"group:illuminate\",\n\"group:jekyllEcosystem\",\n\"group:jestPlusTSJest\",\n\"group:jestPlusTypes\",\n\"group:jwtFramework\",\n\"group:kubernetes\",\n\"group:phpstan\",\n\"group:polymer\",\n\"group:react\",\n\"group:resilience4j\",\n\"group:rubyOnRails\",\n\"group:rubyOmniauth\",\n\"group:socketio\",\n\"group:springAmqp\",\n\"group:springAndroid\",\n\"group:springBatch\",\n\"group:springBoot\",\n\"group:springCloud\",\n\"group:springCore\",\n\"group:springData\",\n\"group:springHateoas\",\n\"group:springIntegration\",\n\"group:springKafka\",\n\"group:springLdap\",\n\"group:springMobile\",\n\"group:springOsgi\",\n\"group:springRestDocs\",\n\"group:springRoo\",\n\"group:springScala\",\n\"group:springSecurity\",\n\"group:springSession\",\n\"group:springShell\",\n\"group:springSocial\",\n\"group:springStatemachine\",\n\"group:springWebflow\",\n\"group:springWs\",\n\"group:symfony\"\n],\n\"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-group/#groupresilience4j","title":"group:resilience4j","text":"<p>Group Java Resilience4j packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"resilience4j\",\n\"matchPackagePrefixes\": [\n\"io.github.resilience4j:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprubyomniauth","title":"group:rubyOmniauth","text":"<p>Group OmniAuth packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"omniauth packages\",\n\"matchDatasources\": [\n\"rubygems\"\n],\n\"matchPackagePrefixes\": [\n\"omniauth\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprubyonrails","title":"group:rubyOnRails","text":"<p>Group Ruby on Rails packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"Ruby on Rails packages\",\n\"matchDatasources\": [\n\"rubygems\"\n],\n\"matchPackageNames\": [\n\"actioncable\",\n\"actionmailbox\",\n\"actionmailer\",\n\"actionpack\",\n\"actiontext\",\n\"actionview\",\n\"activejob\",\n\"activemodel\",\n\"activerecord\",\n\"activestorage\",\n\"activesupport\",\n\"railties\",\n\"rails\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsocketio","title":"group:socketio","text":"<p>Group socket.io packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"socket.io packages\",\n\"matchPackagePrefixes\": [\n\"socket.io\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringamqp","title":"group:springAmqp","text":"<p>Group Java Spring AMQP packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring amqp\",\n\"matchPackagePrefixes\": [\n\"org.springframework.amqp:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringandroid","title":"group:springAndroid","text":"<p>Group Java Spring Android packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring android\",\n\"matchPackagePrefixes\": [\n\"org.springframework.android:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringbatch","title":"group:springBatch","text":"<p>Group Java Spring Batch packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring batch\",\n\"matchPackagePrefixes\": [\n\"org.springframework.batch:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringboot","title":"group:springBoot","text":"<p>Group Java Spring Boot packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring boot\",\n\"matchPackageNames\": [\n\"org.springframework.boot\"\n],\n\"matchPackagePrefixes\": [\n\"org.springframework.boot:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringcloud","title":"group:springCloud","text":"<p>Group Java Spring Cloud packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring cloud\",\n\"matchPackagePrefixes\": [\n\"org.springframework.cloud:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringcore","title":"group:springCore","text":"<p>Group Java Spring Core packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring core\",\n\"matchPackagePrefixes\": [\n\"org.springframework:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringdata","title":"group:springData","text":"<p>Group Java Spring Data packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring data\",\n\"matchPackagePrefixes\": [\n\"org.springframework.data:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringhateoas","title":"group:springHateoas","text":"<p>Group Java Spring HATEOAS packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring hateoas\",\n\"matchPackagePrefixes\": [\n\"org.springframework.hateoas:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringintegration","title":"group:springIntegration","text":"<p>Group Java Spring Integration packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring integration\",\n\"matchPackagePrefixes\": [\n\"org.springframework.integration:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringkafka","title":"group:springKafka","text":"<p>Group Java Spring Kafka packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring kafka\",\n\"matchPackagePrefixes\": [\n\"org.springframework.kafka:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringldap","title":"group:springLdap","text":"<p>Group Java Spring LDAP packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring ldap\",\n\"matchPackagePrefixes\": [\n\"org.springframework.ldap:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringmobile","title":"group:springMobile","text":"<p>Group Java Spring Mobile packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring mobile\",\n\"matchPackagePrefixes\": [\n\"org.springframework.mobile:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringosgi","title":"group:springOsgi","text":"<p>Group Java Spring OSGi packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring osgi\",\n\"matchPackagePrefixes\": [\n\"org.springframework.osgi:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringrestdocs","title":"group:springRestDocs","text":"<p>Group Java Spring REST Docs packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring restdocs\",\n\"matchPackagePrefixes\": [\n\"org.springframework.restdocs:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringroo","title":"group:springRoo","text":"<p>Group Java Spring Roo packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring roo\",\n\"matchPackagePrefixes\": [\n\"org.springframework.roo:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringscala","title":"group:springScala","text":"<p>Group Java Spring Scala packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring scala\",\n\"matchPackagePrefixes\": [\n\"org.springframework.scala:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsecurity","title":"group:springSecurity","text":"<p>Group Java Spring Security packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring security\",\n\"matchPackagePrefixes\": [\n\"org.springframework.security:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsession","title":"group:springSession","text":"<p>Group Java Spring Session packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring session\",\n\"matchPackagePrefixes\": [\n\"org.springframework.session:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringshell","title":"group:springShell","text":"<p>Group Java Spring Shell packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring shell\",\n\"matchPackagePrefixes\": [\n\"org.springframework.shell:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringsocial","title":"group:springSocial","text":"<p>Group Java Spring Social packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring social\",\n\"matchPackagePrefixes\": [\n\"org.springframework.social:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringstatemachine","title":"group:springStatemachine","text":"<p>Group Java Spring Statemachine packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring statemachine\",\n\"matchPackagePrefixes\": [\n\"org.springframework.statemachine:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringwebflow","title":"group:springWebflow","text":"<p>Group Java Spring WebFlow packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring webflow\",\n\"matchPackagePrefixes\": [\n\"org.springframework.webflow:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringws","title":"group:springWs","text":"<p>Group Java Spring WS packages.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"spring ws\",\n\"matchPackagePrefixes\": [\n\"org.springframework.ws:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsymfony","title":"group:symfony","text":"<p>Group PHP Symfony packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"groupName\": \"symfony packages\",\n\"groupSlug\": \"symfony\",\n\"matchPackagePrefixes\": [\n\"symfony/\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptest","title":"group:test","text":"<p>Group all test packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:test\",\n\"groupName\": \"test packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptestnonmajor","title":"group:testNonMajor","text":"<p>Group all non-major test package updates together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:test\",\n\"groupName\": \"test packages\",\n\"matchUpdateTypes\": [\n\"minor\",\n\"patch\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupunittest","title":"group:unitTest","text":"<p>Group all unit test packages together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:unitTest\",\n\"groupName\": \"unit test packages\"\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupunittestnonmajor","title":"group:unitTestNonMajor","text":"<p>Group all unit test packages together for non-major updates.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"packages:unitTest\",\n\"groupName\": \"unit test packages\",\n\"matchUpdateTypes\": [\n\"minor\",\n\"patch\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaccountsmonorepo","title":"group:accountsMonorepo","text":"<p>Group packages from accounts monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:accounts\",\n\"groupName\": \"accounts monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupacotmonorepo","title":"group:acotMonorepo","text":"<p>Group packages from acot monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:acot\",\n\"groupName\": \"acot monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupag-gridmonorepo","title":"group:ag-gridMonorepo","text":"<p>Group packages from ag-grid monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ag-grid\",\n\"groupName\": \"ag-grid monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupalgolia-instantsearchmonorepo","title":"group:algolia-instantsearchMonorepo","text":"<p>Group packages from algolia-instantsearch monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:algolia-instantsearch\",\n\"groupName\": \"algolia-instantsearch monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupalgolia-react-instantsearchmonorepo","title":"group:algolia-react-instantsearchMonorepo","text":"<p>Group packages from algolia-react-instantsearch monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:algolia-react-instantsearch\",\n\"groupName\": \"algolia-react-instantsearch monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupalgoliasearch-autocompletemonorepo","title":"group:algoliasearch-autocompleteMonorepo","text":"<p>Group packages from algoliasearch-autocomplete monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:algoliasearch-autocomplete\",\n\"groupName\": \"algoliasearch-autocomplete monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupalgoliasearch-client-javascriptmonorepo","title":"group:algoliasearch-client-javascriptMonorepo","text":"<p>Group packages from algoliasearch-client-javascript monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:algoliasearch-client-javascript\",\n\"groupName\": \"algoliasearch-client-javascript monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangularmonorepo","title":"group:angularMonorepo","text":"<p>Group packages from angular monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angular\",\n\"groupName\": \"angular monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangular-climonorepo","title":"group:angular-cliMonorepo","text":"<p>Group packages from angular-cli monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angular-cli\",\n\"groupName\": \"angular-cli monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangular-eslintmonorepo","title":"group:angular-eslintMonorepo","text":"<p>Group packages from angular-eslint monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angular-eslint\",\n\"groupName\": \"angular-eslint monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangularfiremonorepo","title":"group:angularfireMonorepo","text":"<p>Group packages from angularfire monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angularfire\",\n\"groupName\": \"angularfire monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangularjsmonorepo","title":"group:angularjsMonorepo","text":"<p>Group packages from angularjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angularjs\",\n\"groupName\": \"angularjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupapollo-servermonorepo","title":"group:apollo-serverMonorepo","text":"<p>Group packages from apollo-server monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:apollo-server\",\n\"groupName\": \"apollo-server monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupapolloclientmonorepo","title":"group:apolloclientMonorepo","text":"<p>Group packages from apolloclient monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:apolloclient\",\n\"groupName\": \"apolloclient monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupapplicationinsights-dotnetmonorepo","title":"group:applicationinsights-dotnetMonorepo","text":"<p>Group packages from applicationinsights-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:applicationinsights-dotnet\",\n\"groupName\": \"applicationinsights-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusbackground-jobsmonorepo","title":"group:arcus.background-jobsMonorepo","text":"<p>Group packages from arcus.background-jobs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.background-jobs\",\n\"groupName\": \"arcus.background-jobs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusevent-gridmonorepo","title":"group:arcus.event-gridMonorepo","text":"<p>Group packages from arcus.event-grid monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.event-grid\",\n\"groupName\": \"arcus.event-grid monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusmessagingmonorepo","title":"group:arcus.messagingMonorepo","text":"<p>Group packages from arcus.messaging monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.messaging\",\n\"groupName\": \"arcus.messaging monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcusobservabilitymonorepo","title":"group:arcus.observabilityMonorepo","text":"<p>Group packages from arcus.observability monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.observability\",\n\"groupName\": \"arcus.observability monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcussecuritymonorepo","title":"group:arcus.securityMonorepo","text":"<p>Group packages from arcus.security monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.security\",\n\"groupName\": \"arcus.security monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouparcuswebapimonorepo","title":"group:arcus.webapiMonorepo","text":"<p>Group packages from arcus.webapi monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:arcus.webapi\",\n\"groupName\": \"arcus.webapi monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-aspnetwebstackmonorepo","title":"group:aspnet aspnetwebstackMonorepo","text":"<p>Group packages from aspnet aspnetwebstack monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aspnet aspnetwebstack\",\n\"groupName\": \"aspnet aspnetwebstack monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-extensionsmonorepo","title":"group:aspnet extensionsMonorepo","text":"<p>Group packages from aspnet extensions monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aspnet extensions\",\n\"groupName\": \"aspnet extensions monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaspnet-api-versioningmonorepo","title":"group:aspnet-api-versioningMonorepo","text":"<p>Group packages from aspnet-api-versioning monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aspnet-api-versioning\",\n\"groupName\": \"aspnet-api-versioning monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupautomapper-dotnetmonorepo","title":"group:automapper-dotnetMonorepo","text":"<p>Group packages from automapper-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:automapper-dotnet\",\n\"groupName\": \"automapper-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-cdkmonorepo","title":"group:aws-cdkMonorepo","text":"<p>Group packages from aws-cdk monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-cdk\",\n\"groupName\": \"aws-cdk monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-lambda-powertools-typescriptmonorepo","title":"group:aws-lambda-powertools-typescriptMonorepo","text":"<p>Group packages from aws-lambda-powertools-typescript monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-lambda-powertools-typescript\",\n\"groupName\": \"aws-lambda-powertools-typescript monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-js-v3monorepo","title":"group:aws-sdk-js-v3Monorepo","text":"<p>Group packages from aws-sdk-js-v3 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-sdk-js-v3\",\n\"groupName\": \"aws-sdk-js-v3 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-sdk-netmonorepo","title":"group:aws-sdk-netMonorepo","text":"<p>Group packages from aws-sdk-net monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-sdk-net\",\n\"groupName\": \"aws-sdk-net monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupawsappsyncmonorepo","title":"group:awsappsyncMonorepo","text":"<p>Group packages from awsappsync monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:awsappsync\",\n\"groupName\": \"awsappsync monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-libraries-for-netmonorepo","title":"group:azure azure-libraries-for-netMonorepo","text":"<p>Group packages from azure azure-libraries-for-net monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:azure azure-libraries-for-net\",\n\"groupName\": \"azure azure-libraries-for-net monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-sdk-for-netmonorepo","title":"group:azure azure-sdk-for-netMonorepo","text":"<p>Group packages from azure azure-sdk-for-net monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:azure azure-sdk-for-net\",\n\"groupName\": \"azure azure-sdk-for-net monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupazure-azure-storage-netmonorepo","title":"group:azure azure-storage-netMonorepo","text":"<p>Group packages from azure azure-storage-net monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:azure azure-storage-net\",\n\"groupName\": \"azure azure-storage-net monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupbabelmonorepo","title":"group:babelMonorepo","text":"<p>Group packages from babel monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:babel\",\n\"groupName\": \"babel monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupbasetmonorepo","title":"group:basetMonorepo","text":"<p>Group packages from baset monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:baset\",\n\"groupName\": \"baset monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupbravemonorepo","title":"group:braveMonorepo","text":"<p>Group packages from brave monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:brave\",\n\"groupName\": \"brave monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupbugsnag-jsmonorepo","title":"group:bugsnag-jsMonorepo","text":"<p>Group packages from bugsnag-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:bugsnag-js\",\n\"groupName\": \"bugsnag-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupcapacitormonorepo","title":"group:capacitorMonorepo","text":"<p>Group packages from capacitor monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:capacitor\",\n\"groupName\": \"capacitor monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupchakra-uimonorepo","title":"group:chakra-uiMonorepo","text":"<p>Group packages from chakra-ui monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:chakra-ui\",\n\"groupName\": \"chakra-ui monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupchromelymonorepo","title":"group:chromelyMonorepo","text":"<p>Group packages from chromely monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:chromely\",\n\"groupName\": \"chromely monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupclaritymonorepo","title":"group:clarityMonorepo","text":"<p>Group packages from clarity monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:clarity\",\n\"groupName\": \"clarity monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupclearscriptmonorepo","title":"group:clearscriptMonorepo","text":"<p>Group packages from clearscript monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:clearscript\",\n\"groupName\": \"clearscript monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupcommitlintmonorepo","title":"group:commitlintMonorepo","text":"<p>Group packages from commitlint monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:commitlint\",\n\"groupName\": \"commitlint monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupcontentful-rich-textmonorepo","title":"group:contentful-rich-textMonorepo","text":"<p>Group packages from contentful-rich-text monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:contentful-rich-text\",\n\"groupName\": \"contentful-rich-text monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdatadog-browser-sdkmonorepo","title":"group:datadog-browser-sdkMonorepo","text":"<p>Group packages from datadog-browser-sdk monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:datadog-browser-sdk\",\n\"groupName\": \"datadog-browser-sdk monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdate-iomonorepo","title":"group:date-ioMonorepo","text":"<p>Group packages from date-io monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:date-io\",\n\"groupName\": \"date-io monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdenomonorepo","title":"group:denoMonorepo","text":"<p>Group packages from deno monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:deno\",\n\"groupName\": \"deno monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdevextreme-reactivemonorepo","title":"group:devextreme-reactiveMonorepo","text":"<p>Group packages from devextreme-reactive monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:devextreme-reactive\",\n\"groupName\": \"devextreme-reactive monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdnd-kitmonorepo","title":"group:dnd-kitMonorepo","text":"<p>Group packages from dnd-kit monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dnd-kit\",\n\"groupName\": \"dnd-kit monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdocusaurusmonorepo","title":"group:docusaurusMonorepo","text":"<p>Group packages from docusaurus monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:docusaurus\",\n\"groupName\": \"docusaurus monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnetmonorepo","title":"group:dotnetMonorepo","text":"<p>Group packages from dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dotnet\",\n\"groupName\": \"dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-azure-ad-identitymodel-extensionsmonorepo","title":"group:dotnet-azure-ad-identitymodel-extensionsMonorepo","text":"<p>Group packages from dotnet-azure-ad-identitymodel-extensions monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dotnet-azure-ad-identitymodel-extensions\",\n\"groupName\": \"dotnet-azure-ad-identitymodel-extensions monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-azure-ad-microsoft-identity-webmonorepo","title":"group:dotnet-azure-ad-microsoft-identity-webMonorepo","text":"<p>Group packages from dotnet-azure-ad-microsoft-identity-web monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dotnet-azure-ad-microsoft-identity-web\",\n\"groupName\": \"dotnet-azure-ad-microsoft-identity-web monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdotnet-wcfmonorepo","title":"group:dotnet-wcfMonorepo","text":"<p>Group packages from dotnet-wcf monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dotnet-wcf\",\n\"groupName\": \"dotnet-wcf monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupdropwizardmonorepo","title":"group:dropwizardMonorepo","text":"<p>Group packages from dropwizard monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:dropwizard\",\n\"groupName\": \"dropwizard monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupelastic-apm-agent-rum-jsmonorepo","title":"group:elastic-apm-agent-rum-jsMonorepo","text":"<p>Group packages from elastic-apm-agent-rum-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:elastic-apm-agent-rum-js\",\n\"groupName\": \"elastic-apm-agent-rum-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupelectron-forgemonorepo","title":"group:electron-forgeMonorepo","text":"<p>Group packages from electron-forge monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:electron-forge\",\n\"groupName\": \"electron-forge monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupember-decoratorsmonorepo","title":"group:ember-decoratorsMonorepo","text":"<p>Group packages from ember-decorators monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ember-decorators\",\n\"groupName\": \"ember-decorators monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupemojibasemonorepo","title":"group:emojibaseMonorepo","text":"<p>Group packages from emojibase monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:emojibase\",\n\"groupName\": \"emojibase monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupemotionmonorepo","title":"group:emotionMonorepo","text":"<p>Group packages from emotion monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:emotion\",\n\"groupName\": \"emotion monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupeslint-config-globexmonorepo","title":"group:eslint-config-globexMonorepo","text":"<p>Group packages from eslint-config-globex monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:eslint-config-globex\",\n\"groupName\": \"eslint-config-globex monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupexpomonorepo","title":"group:expoMonorepo","text":"<p>Group packages from expo monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:expo\",\n\"groupName\": \"expo monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfeathersmonorepo","title":"group:feathersMonorepo","text":"<p>Group packages from feathers monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:feathers\",\n\"groupName\": \"feathers monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfeignmonorepo","title":"group:feignMonorepo","text":"<p>Group packages from feign monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:feign\",\n\"groupName\": \"feign monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfelamonorepo","title":"group:felaMonorepo","text":"<p>Group packages from fela monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:fela\",\n\"groupName\": \"fela monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfimbullintermonorepo","title":"group:fimbullinterMonorepo","text":"<p>Group packages from fimbullinter monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:fimbullinter\",\n\"groupName\": \"fimbullinter monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupflopflipmonorepo","title":"group:flopflipMonorepo","text":"<p>Group packages from flopflip monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:flopflip\",\n\"groupName\": \"flopflip monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfontsourcemonorepo","title":"group:fontsourceMonorepo","text":"<p>Group packages from fontsource monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:fontsource\",\n\"groupName\": \"fontsource monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupformatjsmonorepo","title":"group:formatjsMonorepo","text":"<p>Group packages from formatjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:formatjs\",\n\"groupName\": \"formatjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupframework7monorepo","title":"group:framework7Monorepo","text":"<p>Group packages from framework7 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:framework7\",\n\"groupName\": \"framework7 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgatsbymonorepo","title":"group:gatsbyMonorepo","text":"<p>Group packages from gatsby monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:gatsby\",\n\"groupName\": \"gatsby monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgitbeakermonorepo","title":"group:gitbeakerMonorepo","text":"<p>Group packages from gitbeaker monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:gitbeaker\",\n\"groupName\": \"gitbeaker monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgrafanamonorepo","title":"group:grafanaMonorepo","text":"<p>Group packages from grafana monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:grafana\",\n\"groupName\": \"grafana monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-meshmonorepo","title":"group:graphql-meshMonorepo","text":"<p>Group packages from graphql-mesh monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:graphql-mesh\",\n\"groupName\": \"graphql-mesh monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-modulesmonorepo","title":"group:graphql-modulesMonorepo","text":"<p>Group packages from graphql-modules monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:graphql-modules\",\n\"groupName\": \"graphql-modules monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphql-toolsmonorepo","title":"group:graphql-toolsMonorepo","text":"<p>Group packages from graphql-tools monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:graphql-tools\",\n\"groupName\": \"graphql-tools monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgraphqlcodegeneratormonorepo","title":"group:graphqlcodegeneratorMonorepo","text":"<p>Group packages from graphqlcodegenerator monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:graphqlcodegenerator\",\n\"groupName\": \"graphqlcodegenerator monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupgroovymonorepo","title":"group:groovyMonorepo","text":"<p>Group packages from groovy monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:groovy\",\n\"groupName\": \"groovy monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupguavamonorepo","title":"group:guavaMonorepo","text":"<p>Group packages from guava monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:guava\",\n\"groupName\": \"guava monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphangfiremonorepo","title":"group:HangfireMonorepo","text":"<p>Group packages from Hangfire monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:Hangfire\",\n\"groupName\": \"Hangfire monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphotchocolatemonorepo","title":"group:hotchocolateMonorepo","text":"<p>Group packages from hotchocolate monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:hotchocolate\",\n\"groupName\": \"hotchocolate monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupinfrastructure-uimonorepo","title":"group:infrastructure-uiMonorepo","text":"<p>Group packages from infrastructure-ui monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:infrastructure-ui\",\n\"groupName\": \"infrastructure-ui monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupionic-nativemonorepo","title":"group:ionic-nativeMonorepo","text":"<p>Group packages from ionic-native monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ionic-native\",\n\"groupName\": \"ionic-native monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupistanbuljsmonorepo","title":"group:istanbuljsMonorepo","text":"<p>Group packages from istanbuljs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:istanbuljs\",\n\"groupName\": \"istanbuljs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjasminemonorepo","title":"group:jasmineMonorepo","text":"<p>Group packages from jasmine monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:jasmine\",\n\"groupName\": \"jasmine monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjavahamcrestmonorepo","title":"group:javahamcrestMonorepo","text":"<p>Group packages from javahamcrest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:javahamcrest\",\n\"groupName\": \"javahamcrest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjavascriptengineswitchermonorepo","title":"group:javascriptengineswitcherMonorepo","text":"<p>Group packages from javascriptengineswitcher monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:javascriptengineswitcher\",\n\"groupName\": \"javascriptengineswitcher monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjerseymonorepo","title":"group:jerseyMonorepo","text":"<p>Group packages from jersey monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:jersey\",\n\"groupName\": \"jersey monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjestmonorepo","title":"group:jestMonorepo","text":"<p>Group packages from jest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:jest\",\n\"groupName\": \"jest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjsplumbmonorepo","title":"group:jsplumbMonorepo","text":"<p>Group packages from jsplumb monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:jsplumb\",\n\"groupName\": \"jsplumb monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupjunit5monorepo","title":"group:junit5Monorepo","text":"<p>Group packages from junit5 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:junit5\",\n\"groupName\": \"junit5 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupkotlinmonorepo","title":"group:kotlinMonorepo","text":"<p>Group packages from kotlin monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:kotlin\",\n\"groupName\": \"kotlin monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouplernamonorepo","title":"group:lernaMonorepo","text":"<p>Group packages from lerna monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:lerna\",\n\"groupName\": \"lerna monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouplinguijsmonorepo","title":"group:linguijsMonorepo","text":"<p>Group packages from linguijs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:linguijs\",\n\"groupName\": \"linguijs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouploopbackmonorepo","title":"group:loopbackMonorepo","text":"<p>Group packages from loopback monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:loopback\",\n\"groupName\": \"loopback monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouplrnwebcomponentsmonorepo","title":"group:lrnwebcomponentsMonorepo","text":"<p>Group packages from lrnwebcomponents monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:lrnwebcomponents\",\n\"groupName\": \"lrnwebcomponents monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmailingmonorepo","title":"group:mailingMonorepo","text":"<p>Group packages from mailing monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mailing\",\n\"groupName\": \"mailing monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmantinemonorepo","title":"group:mantineMonorepo","text":"<p>Group packages from mantine monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mantine\",\n\"groupName\": \"mantine monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmapstructmonorepo","title":"group:mapstructMonorepo","text":"<p>Group packages from mapstruct monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mapstruct\",\n\"groupName\": \"mapstruct monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmasstransitmonorepo","title":"group:masstransitMonorepo","text":"<p>Group packages from masstransit monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:masstransit\",\n\"groupName\": \"masstransit monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmaterial-components-webmonorepo","title":"group:material-components-webMonorepo","text":"<p>Group packages from material-components-web monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:material-components-web\",\n\"groupName\": \"material-components-web monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmaterial-uimonorepo","title":"group:material-uiMonorepo","text":"<p>Group packages from material-ui monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:material-ui\",\n\"groupName\": \"material-ui monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmdc-reactmonorepo","title":"group:mdc-reactMonorepo","text":"<p>Group packages from mdc-react monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mdc-react\",\n\"groupName\": \"mdc-react monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmdxmonorepo","title":"group:mdxMonorepo","text":"<p>Group packages from mdx monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mdx\",\n\"groupName\": \"mdx monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmiddy-jsmonorepo","title":"group:middy-jsMonorepo","text":"<p>Group packages from middy-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:middy-js\",\n\"groupName\": \"middy-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmikro-ormmonorepo","title":"group:mikro-ormMonorepo","text":"<p>Group packages from mikro-orm monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mikro-orm\",\n\"groupName\": \"mikro-orm monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmockitomonorepo","title":"group:mockitoMonorepo","text":"<p>Group packages from mockito monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mockito\",\n\"groupName\": \"mockito monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmstestmonorepo","title":"group:mstestMonorepo","text":"<p>Group packages from mstest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:mstest\",\n\"groupName\": \"mstest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnestmonorepo","title":"group:nestMonorepo","text":"<p>Group packages from nest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nest\",\n\"groupName\": \"nest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnettymonorepo","title":"group:nettyMonorepo","text":"<p>Group packages from netty monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:netty\",\n\"groupName\": \"netty monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupneutrinomonorepo","title":"group:neutrinoMonorepo","text":"<p>Group packages from neutrino monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:neutrino\",\n\"groupName\": \"neutrino monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnexpectmonorepo","title":"group:nexpectMonorepo","text":"<p>Group packages from nexpect monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nexpect\",\n\"groupName\": \"nexpect monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnextjsmonorepo","title":"group:nextjsMonorepo","text":"<p>Group packages from nextjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nextjs\",\n\"groupName\": \"nextjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnextramonorepo","title":"group:nextraMonorepo","text":"<p>Group packages from nextra monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nextra\",\n\"groupName\": \"nextra monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupngx-formlymonorepo","title":"group:ngx-formlyMonorepo","text":"<p>Group packages from ngx-formly monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ngx-formly\",\n\"groupName\": \"ngx-formly monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupngxs-storemonorepo","title":"group:ngxs-storeMonorepo","text":"<p>Group packages from ngxs-store monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ngxs-store\",\n\"groupName\": \"ngxs-store monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnivomonorepo","title":"group:nivoMonorepo","text":"<p>Group packages from nivo monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nivo\",\n\"groupName\": \"nivo monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnswagmonorepo","title":"group:nswagMonorepo","text":"<p>Group packages from nswag monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nswag\",\n\"groupName\": \"nswag monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnuxtjsmonorepo","title":"group:nuxtjsMonorepo","text":"<p>Group packages from nuxtjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nuxtjs\",\n\"groupName\": \"nuxtjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-dotnetmonorepo","title":"group:opentelemetry-dotnetMonorepo","text":"<p>Group packages from opentelemetry-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:opentelemetry-dotnet\",\n\"groupName\": \"opentelemetry-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-gomonorepo","title":"group:opentelemetry-goMonorepo","text":"<p>Group packages from opentelemetry-go monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:opentelemetry-go\",\n\"groupName\": \"opentelemetry-go monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupopentelemetry-jsmonorepo","title":"group:opentelemetry-jsMonorepo","text":"<p>Group packages from opentelemetry-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:opentelemetry-js\",\n\"groupName\": \"opentelemetry-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouporleansmonorepo","title":"group:orleansMonorepo","text":"<p>Group packages from orleans monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:orleans\",\n\"groupName\": \"orleans monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupparcelmonorepo","title":"group:parcelMonorepo","text":"<p>Group packages from parcel monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:parcel\",\n\"groupName\": \"parcel monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppercy-climonorepo","title":"group:percy-cliMonorepo","text":"<p>Group packages from percy-cli monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:percy-cli\",\n\"groupName\": \"percy-cli monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppicassojsmonorepo","title":"group:picassojsMonorepo","text":"<p>Group packages from picassojs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:picassojs\",\n\"groupName\": \"picassojs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppixijsmonorepo","title":"group:pixijsMonorepo","text":"<p>Group packages from pixijs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:pixijs\",\n\"groupName\": \"pixijs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupplaywrightmonorepo","title":"group:playwrightMonorepo","text":"<p>Group packages from playwright monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:playwright\",\n\"groupName\": \"playwright monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppnpjsmonorepo","title":"group:pnpjsMonorepo","text":"<p>Group packages from pnpjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:pnpjs\",\n\"groupName\": \"pnpjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppollyjsmonorepo","title":"group:pollyjsMonorepo","text":"<p>Group packages from pollyjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:pollyjs\",\n\"groupName\": \"pollyjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouppouchdbmonorepo","title":"group:pouchdbMonorepo","text":"<p>Group packages from pouchdb monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:pouchdb\",\n\"groupName\": \"pouchdb monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupprismamonorepo","title":"group:prismaMonorepo","text":"<p>Group packages from prisma monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:prisma\",\n\"groupName\": \"prisma monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupquartznetmonorepo","title":"group:quartznetMonorepo","text":"<p>Group packages from quartznet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:quartznet\",\n\"groupName\": \"quartznet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreach-uimonorepo","title":"group:reach-uiMonorepo","text":"<p>Group packages from reach-ui monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:reach-ui\",\n\"groupName\": \"reach-ui monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreactmonorepo","title":"group:reactMonorepo","text":"<p>Group packages from react monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react\",\n\"groupName\": \"react monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-adminmonorepo","title":"group:react-adminMonorepo","text":"<p>Group packages from react-admin monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-admin\",\n\"groupName\": \"react-admin monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-apollomonorepo","title":"group:react-apolloMonorepo","text":"<p>Group packages from react-apollo monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-apollo\",\n\"groupName\": \"react-apollo monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-dndmonorepo","title":"group:react-dndMonorepo","text":"<p>Group packages from react-dnd monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-dnd\",\n\"groupName\": \"react-dnd monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-navigationmonorepo","title":"group:react-navigationMonorepo","text":"<p>Group packages from react-navigation monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-navigation\",\n\"groupName\": \"react-navigation monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-pagemonorepo","title":"group:react-pageMonorepo","text":"<p>Group packages from react-page monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-page\",\n\"groupName\": \"react-page monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreact-routermonorepo","title":"group:react-routerMonorepo","text":"<p>Group packages from react-router monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:react-router\",\n\"groupName\": \"react-router monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreactivestack-cookiesmonorepo","title":"group:reactivestack-cookiesMonorepo","text":"<p>Group packages from reactivestack-cookies monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:reactivestack-cookies\",\n\"groupName\": \"reactivestack-cookies monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreakitmonorepo","title":"group:reakitMonorepo","text":"<p>Group packages from reakit monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:reakit\",\n\"groupName\": \"reakit monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupredwoodmonorepo","title":"group:redwoodMonorepo","text":"<p>Group packages from redwood monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:redwood\",\n\"groupName\": \"redwood monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupreg-suitmonorepo","title":"group:reg-suitMonorepo","text":"<p>Group packages from reg-suit monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:reg-suit\",\n\"groupName\": \"reg-suit monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupremarkmonorepo","title":"group:remarkMonorepo","text":"<p>Group packages from remark monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:remark\",\n\"groupName\": \"remark monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupremixmonorepo","title":"group:remixMonorepo","text":"<p>Group packages from remix monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:remix\",\n\"groupName\": \"remix monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprouter5monorepo","title":"group:router5Monorepo","text":"<p>Group packages from router5 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:router5\",\n\"groupName\": \"router5 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprust-futuresmonorepo","title":"group:rust-futuresMonorepo","text":"<p>Group packages from rust-futures monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:rust-futures\",\n\"groupName\": \"rust-futures monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouprust-wasm-bindgenmonorepo","title":"group:rust-wasm-bindgenMonorepo","text":"<p>Group packages from rust-wasm-bindgen monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:rust-wasm-bindgen\",\n\"groupName\": \"rust-wasm-bindgen monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsanitymonorepo","title":"group:sanityMonorepo","text":"<p>Group packages from sanity monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sanity\",\n\"groupName\": \"sanity monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsendgrid-nodejsmonorepo","title":"group:sendgrid-nodejsMonorepo","text":"<p>Group packages from sendgrid-nodejs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sendgrid-nodejs\",\n\"groupName\": \"sendgrid-nodejs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-dotnetmonorepo","title":"group:sentry-dotnetMonorepo","text":"<p>Group packages from sentry-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sentry-dotnet\",\n\"groupName\": \"sentry-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-javascriptmonorepo","title":"group:sentry-javascriptMonorepo","text":"<p>Group packages from sentry-javascript monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sentry-javascript\",\n\"groupName\": \"sentry-javascript monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsentry-rubymonorepo","title":"group:sentry-rubyMonorepo","text":"<p>Group packages from sentry-ruby monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sentry-ruby\",\n\"groupName\": \"sentry-ruby monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupshedlockmonorepo","title":"group:shedlockMonorepo","text":"<p>Group packages from shedlock monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:shedlock\",\n\"groupName\": \"shedlock monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupshopify-app-bridgemonorepo","title":"group:shopify-app-bridgeMonorepo","text":"<p>Group packages from shopify-app-bridge monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:shopify-app-bridge\",\n\"groupName\": \"shopify-app-bridge monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsitecore-jssmonorepo","title":"group:sitecore-jssMonorepo","text":"<p>Group packages from sitecore-jss monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:sitecore-jss\",\n\"groupName\": \"sitecore-jss monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupskiasharpmonorepo","title":"group:skiasharpMonorepo","text":"<p>Group packages from skiasharp monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:skiasharp\",\n\"groupName\": \"skiasharp monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspringfoxmonorepo","title":"group:springfoxMonorepo","text":"<p>Group packages from springfox monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:springfox\",\n\"groupName\": \"springfox monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsteeltoemonorepo","title":"group:steeltoeMonorepo","text":"<p>Group packages from steeltoe monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:steeltoe\",\n\"groupName\": \"steeltoe monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupstorybookmonorepo","title":"group:storybookMonorepo","text":"<p>Group packages from storybook monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:storybook\",\n\"groupName\": \"storybook monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupstorybook-react-nativemonorepo","title":"group:storybook-react-nativeMonorepo","text":"<p>Group packages from storybook-react-native monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:storybook-react-native\",\n\"groupName\": \"storybook-react-native monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupstrapimonorepo","title":"group:strapiMonorepo","text":"<p>Group packages from strapi monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:strapi\",\n\"groupName\": \"strapi monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupstryker-jsmonorepo","title":"group:stryker-jsMonorepo","text":"<p>Group packages from stryker-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:stryker-js\",\n\"groupName\": \"stryker-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsurveyjsmonorepo","title":"group:surveyjsMonorepo","text":"<p>Group packages from surveyjs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:surveyjs\",\n\"groupName\": \"surveyjs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupswashbuckle-aspnetcoremonorepo","title":"group:swashbuckle-aspnetcoreMonorepo","text":"<p>Group packages from swashbuckle-aspnetcore monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:swashbuckle-aspnetcore\",\n\"groupName\": \"swashbuckle-aspnetcore monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsystemioabstractionsmonorepo","title":"group:system.io.abstractionsMonorepo","text":"<p>Group packages from system.io.abstractions monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:system.io.abstractions\",\n\"groupName\": \"system.io.abstractions monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptanstack-querymonorepo","title":"group:tanstack-queryMonorepo","text":"<p>Group packages from tanstack-query monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:tanstack-query\",\n\"groupName\": \"tanstack-query monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptaurimonorepo","title":"group:tauriMonorepo","text":"<p>Group packages from tauri monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:tauri\",\n\"groupName\": \"tauri monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptelus-tdsmonorepo","title":"group:telus-tdsMonorepo","text":"<p>Group packages from telus-tds monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:telus-tds\",\n\"groupName\": \"telus-tds monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptelus-tds-coremonorepo","title":"group:telus-tds-coreMonorepo","text":"<p>Group packages from telus-tds-core monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:telus-tds-core\",\n\"groupName\": \"telus-tds-core monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptemporalio-tsmonorepo","title":"group:temporalio-tsMonorepo","text":"<p>Group packages from temporalio-ts monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:temporalio-ts\",\n\"groupName\": \"temporalio-ts monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptestcontainers-javamonorepo","title":"group:testcontainers-javaMonorepo","text":"<p>Group packages from testcontainers-java monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:testcontainers-java\",\n\"groupName\": \"testcontainers-java monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptheme-uimonorepo","title":"group:theme-uiMonorepo","text":"<p>Group packages from theme-ui monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:theme-ui\",\n\"groupName\": \"theme-ui monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptiptapmonorepo","title":"group:tiptapMonorepo","text":"<p>Group packages from tiptap monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:tiptap\",\n\"groupName\": \"tiptap monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptreatmonorepo","title":"group:treatMonorepo","text":"<p>Group packages from treat monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:treat\",\n\"groupName\": \"treat monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptrpcmonorepo","title":"group:trpcMonorepo","text":"<p>Group packages from trpc monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:trpc\",\n\"groupName\": \"trpc monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptsoamonorepo","title":"group:tsoaMonorepo","text":"<p>Group packages from tsoa monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:tsoa\",\n\"groupName\": \"tsoa monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptypefacesmonorepo","title":"group:typefacesMonorepo","text":"<p>Group packages from typefaces monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:typefaces\",\n\"groupName\": \"typefaces monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptypescript-eslintmonorepo","title":"group:typescript-eslintMonorepo","text":"<p>Group packages from typescript-eslint monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:typescript-eslint\",\n\"groupName\": \"typescript-eslint monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouptypography-jsmonorepo","title":"group:typography-jsMonorepo","text":"<p>Group packages from typography-js monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:typography-js\",\n\"groupName\": \"typography-js monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupuppymonorepo","title":"group:uppyMonorepo","text":"<p>Group packages from uppy monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:uppy\",\n\"groupName\": \"uppy monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvaadinwebcomponentsmonorepo","title":"group:vaadinWebComponentsMonorepo","text":"<p>Group packages from vaadinWebComponents monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vaadinWebComponents\",\n\"groupName\": \"vaadinWebComponents monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvitestmonorepo","title":"group:vitestMonorepo","text":"<p>Group packages from vitest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vitest\",\n\"groupName\": \"vitest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvstestmonorepo","title":"group:vstestMonorepo","text":"<p>Group packages from vstest monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vstest\",\n\"groupName\": \"vstest monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvuemonorepo","title":"group:vueMonorepo","text":"<p>Group packages from vue monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vue\",\n\"groupName\": \"vue monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvue-climonorepo","title":"group:vue-cliMonorepo","text":"<p>Group packages from vue-cli monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vue-cli\",\n\"groupName\": \"vue-cli monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupvuepressmonorepo","title":"group:vuepressMonorepo","text":"<p>Group packages from vuepress monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:vuepress\",\n\"groupName\": \"vuepress monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupwebdriveriomonorepo","title":"group:webdriverioMonorepo","text":"<p>Group packages from webdriverio monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:webdriverio\",\n\"groupName\": \"webdriverio monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupworkboxmonorepo","title":"group:workboxMonorepo","text":"<p>Group packages from workbox monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:workbox\",\n\"groupName\": \"workbox monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupxtermmonorepo","title":"group:xtermMonorepo","text":"<p>Group packages from xterm monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:xterm\",\n\"groupName\": \"xterm monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupxunit-dotnetmonorepo","title":"group:xunit-dotnetMonorepo","text":"<p>Group packages from xunit-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:xunit-dotnet\",\n\"groupName\": \"xunit-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupyarnmonorepo","title":"group:yarnMonorepo","text":"<p>Group packages from yarn monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:yarn\",\n\"groupName\": \"yarn monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupzxing-netmonorepo","title":"group:zxing-netMonorepo","text":"<p>Group packages from zxing-net monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:zxing-net\",\n\"groupName\": \"zxing-net monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouphapijsmonorepo","title":"group:hapijsMonorepo","text":"<p>Group packages from hapijs monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:hapijs\",\n\"groupName\": \"hapijs monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#grouplodashmonorepo","title":"group:lodashMonorepo","text":"<p>Group packages from lodash monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:lodash\",\n\"groupName\": \"lodash monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupngrxmonorepo","title":"group:ngrxMonorepo","text":"<p>Group packages from ngrx monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:ngrx\",\n\"groupName\": \"ngrx monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupnrwlmonorepo","title":"group:nrwlMonorepo","text":"<p>Group packages from nrwl monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:nrwl\",\n\"groupName\": \"nrwl monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsemantic-releasemonorepo","title":"group:semantic-releaseMonorepo","text":"<p>Group packages from semantic-release monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:semantic-release\",\n\"groupName\": \"semantic-release monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupswcmonorepo","title":"group:swcMonorepo","text":"<p>Group packages from swc monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:swc\",\n\"groupName\": \"swc monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupangularmaterialmonorepo","title":"group:angularmaterialMonorepo","text":"<p>Group packages from angularmaterial monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:angularmaterial\",\n\"groupName\": \"angularmaterial monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupapache-camelmonorepo","title":"group:apache-camelMonorepo","text":"<p>Group packages from apache-camel monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:apache-camel\",\n\"groupName\": \"apache-camel monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-java-sdkmonorepo","title":"group:aws-java-sdkMonorepo","text":"<p>Group packages from aws-java-sdk monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-java-sdk\",\n\"groupName\": \"aws-java-sdk monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupaws-java-sdk-v2monorepo","title":"group:aws-java-sdk-v2Monorepo","text":"<p>Group packages from aws-java-sdk-v2 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:aws-java-sdk-v2\",\n\"groupName\": \"aws-java-sdk-v2 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupbabel6monorepo","title":"group:babel6Monorepo","text":"<p>Group packages from babel6 monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:babel6\",\n\"groupName\": \"babel6 monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupembroidermonorepo","title":"group:embroiderMonorepo","text":"<p>Group packages from embroider monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:embroider\",\n\"groupName\": \"embroider monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupfullcalendarmonorepo","title":"group:fullcalendarMonorepo","text":"<p>Group packages from fullcalendar monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:fullcalendar\",\n\"groupName\": \"fullcalendar monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspfxmonorepo","title":"group:spfxMonorepo","text":"<p>Group packages from spfx monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:spfx\",\n\"groupName\": \"spfx monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupspockmonorepo","title":"group:spockMonorepo","text":"<p>Group packages from spock monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:spock\",\n\"groupName\": \"spock monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupsyncfusion-dotnetmonorepo","title":"group:syncfusion-dotnetMonorepo","text":"<p>Group packages from syncfusion-dotnet monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:syncfusion-dotnet\",\n\"groupName\": \"syncfusion-dotnet monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupwordpressmonorepo","title":"group:wordpressMonorepo","text":"<p>Group packages from wordpress monorepo together.</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": \"monorepo:wordpress\",\n\"groupName\": \"wordpress monorepo\",\n\"matchUpdateTypes\": [\n\"digest\",\n\"patch\",\n\"minor\",\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-group/#groupmonorepos","title":"group:monorepos","text":"<p>Group known monorepo packages together.</p> <pre><code>{\n\"extends\": [\n\"group:accountsMonorepo\",\n\"group:acotMonorepo\",\n\"group:ag-gridMonorepo\",\n\"group:algolia-instantsearchMonorepo\",\n\"group:algolia-react-instantsearchMonorepo\",\n\"group:algoliasearch-autocompleteMonorepo\",\n\"group:algoliasearch-client-javascriptMonorepo\",\n\"group:angularMonorepo\",\n\"group:angular-cliMonorepo\",\n\"group:angular-eslintMonorepo\",\n\"group:angularfireMonorepo\",\n\"group:angularjsMonorepo\",\n\"group:apollo-serverMonorepo\",\n\"group:apolloclientMonorepo\",\n\"group:applicationinsights-dotnetMonorepo\",\n\"group:arcus.background-jobsMonorepo\",\n\"group:arcus.event-gridMonorepo\",\n\"group:arcus.messagingMonorepo\",\n\"group:arcus.observabilityMonorepo\",\n\"group:arcus.securityMonorepo\",\n\"group:arcus.webapiMonorepo\",\n\"group:aspnet aspnetwebstackMonorepo\",\n\"group:aspnet extensionsMonorepo\",\n\"group:aspnet-api-versioningMonorepo\",\n\"group:automapper-dotnetMonorepo\",\n\"group:aws-cdkMonorepo\",\n\"group:aws-lambda-powertools-typescriptMonorepo\",\n\"group:aws-sdk-js-v3Monorepo\",\n\"group:aws-sdk-netMonorepo\",\n\"group:awsappsyncMonorepo\",\n\"group:azure azure-libraries-for-netMonorepo\",\n\"group:azure azure-sdk-for-netMonorepo\",\n\"group:azure azure-storage-netMonorepo\",\n\"group:babelMonorepo\",\n\"group:basetMonorepo\",\n\"group:braveMonorepo\",\n\"group:bugsnag-jsMonorepo\",\n\"group:capacitorMonorepo\",\n\"group:chakra-uiMonorepo\",\n\"group:chromelyMonorepo\",\n\"group:clarityMonorepo\",\n\"group:clearscriptMonorepo\",\n\"group:commitlintMonorepo\",\n\"group:contentful-rich-textMonorepo\",\n\"group:datadog-browser-sdkMonorepo\",\n\"group:date-ioMonorepo\",\n\"group:denoMonorepo\",\n\"group:devextreme-reactiveMonorepo\",\n\"group:dnd-kitMonorepo\",\n\"group:docusaurusMonorepo\",\n\"group:dotnetMonorepo\",\n\"group:dotnet-azure-ad-identitymodel-extensionsMonorepo\",\n\"group:dotnet-azure-ad-microsoft-identity-webMonorepo\",\n\"group:dotnet-wcfMonorepo\",\n\"group:dropwizardMonorepo\",\n\"group:elastic-apm-agent-rum-jsMonorepo\",\n\"group:electron-forgeMonorepo\",\n\"group:ember-decoratorsMonorepo\",\n\"group:emojibaseMonorepo\",\n\"group:emotionMonorepo\",\n\"group:eslint-config-globexMonorepo\",\n\"group:expoMonorepo\",\n\"group:feathersMonorepo\",\n\"group:feignMonorepo\",\n\"group:felaMonorepo\",\n\"group:fimbullinterMonorepo\",\n\"group:flopflipMonorepo\",\n\"group:fontsourceMonorepo\",\n\"group:formatjsMonorepo\",\n\"group:framework7Monorepo\",\n\"group:gatsbyMonorepo\",\n\"group:gitbeakerMonorepo\",\n\"group:grafanaMonorepo\",\n\"group:graphql-meshMonorepo\",\n\"group:graphql-modulesMonorepo\",\n\"group:graphql-toolsMonorepo\",\n\"group:graphqlcodegeneratorMonorepo\",\n\"group:groovyMonorepo\",\n\"group:guavaMonorepo\",\n\"group:HangfireMonorepo\",\n\"group:hotchocolateMonorepo\",\n\"group:infrastructure-uiMonorepo\",\n\"group:ionic-nativeMonorepo\",\n\"group:istanbuljsMonorepo\",\n\"group:jasmineMonorepo\",\n\"group:javahamcrestMonorepo\",\n\"group:javascriptengineswitcherMonorepo\",\n\"group:jerseyMonorepo\",\n\"group:jestMonorepo\",\n\"group:jsplumbMonorepo\",\n\"group:junit5Monorepo\",\n\"group:kotlinMonorepo\",\n\"group:lernaMonorepo\",\n\"group:linguijsMonorepo\",\n\"group:loopbackMonorepo\",\n\"group:lrnwebcomponentsMonorepo\",\n\"group:mailingMonorepo\",\n\"group:mantineMonorepo\",\n\"group:mapstructMonorepo\",\n\"group:masstransitMonorepo\",\n\"group:material-components-webMonorepo\",\n\"group:material-uiMonorepo\",\n\"group:mdc-reactMonorepo\",\n\"group:mdxMonorepo\",\n\"group:middy-jsMonorepo\",\n\"group:mikro-ormMonorepo\",\n\"group:mockitoMonorepo\",\n\"group:mstestMonorepo\",\n\"group:nestMonorepo\",\n\"group:nettyMonorepo\",\n\"group:neutrinoMonorepo\",\n\"group:nexpectMonorepo\",\n\"group:nextjsMonorepo\",\n\"group:nextraMonorepo\",\n\"group:ngx-formlyMonorepo\",\n\"group:ngxs-storeMonorepo\",\n\"group:nivoMonorepo\",\n\"group:nswagMonorepo\",\n\"group:nuxtjsMonorepo\",\n\"group:opentelemetry-dotnetMonorepo\",\n\"group:opentelemetry-goMonorepo\",\n\"group:opentelemetry-jsMonorepo\",\n\"group:orleansMonorepo\",\n\"group:parcelMonorepo\",\n\"group:percy-cliMonorepo\",\n\"group:picassojsMonorepo\",\n\"group:pixijsMonorepo\",\n\"group:playwrightMonorepo\",\n\"group:pnpjsMonorepo\",\n\"group:pollyjsMonorepo\",\n\"group:pouchdbMonorepo\",\n\"group:prismaMonorepo\",\n\"group:quartznetMonorepo\",\n\"group:reach-uiMonorepo\",\n\"group:reactMonorepo\",\n\"group:react-adminMonorepo\",\n\"group:react-apolloMonorepo\",\n\"group:react-dndMonorepo\",\n\"group:react-navigationMonorepo\",\n\"group:react-pageMonorepo\",\n\"group:react-routerMonorepo\",\n\"group:reactivestack-cookiesMonorepo\",\n\"group:reakitMonorepo\",\n\"group:redwoodMonorepo\",\n\"group:reg-suitMonorepo\",\n\"group:remarkMonorepo\",\n\"group:remixMonorepo\",\n\"group:router5Monorepo\",\n\"group:rust-futuresMonorepo\",\n\"group:rust-wasm-bindgenMonorepo\",\n\"group:sanityMonorepo\",\n\"group:sendgrid-nodejsMonorepo\",\n\"group:sentry-dotnetMonorepo\",\n\"group:sentry-javascriptMonorepo\",\n\"group:sentry-rubyMonorepo\",\n\"group:shedlockMonorepo\",\n\"group:shopify-app-bridgeMonorepo\",\n\"group:sitecore-jssMonorepo\",\n\"group:skiasharpMonorepo\",\n\"group:springfoxMonorepo\",\n\"group:steeltoeMonorepo\",\n\"group:storybookMonorepo\",\n\"group:storybook-react-nativeMonorepo\",\n\"group:strapiMonorepo\",\n\"group:stryker-jsMonorepo\",\n\"group:surveyjsMonorepo\",\n\"group:swashbuckle-aspnetcoreMonorepo\",\n\"group:system.io.abstractionsMonorepo\",\n\"group:tanstack-queryMonorepo\",\n\"group:tauriMonorepo\",\n\"group:telus-tdsMonorepo\",\n\"group:telus-tds-coreMonorepo\",\n\"group:temporalio-tsMonorepo\",\n\"group:testcontainers-javaMonorepo\",\n\"group:theme-uiMonorepo\",\n\"group:tiptapMonorepo\",\n\"group:treatMonorepo\",\n\"group:trpcMonorepo\",\n\"group:tsoaMonorepo\",\n\"group:typefacesMonorepo\",\n\"group:typescript-eslintMonorepo\",\n\"group:typography-jsMonorepo\",\n\"group:uppyMonorepo\",\n\"group:vaadinWebComponentsMonorepo\",\n\"group:vitestMonorepo\",\n\"group:vstestMonorepo\",\n\"group:vueMonorepo\",\n\"group:vue-cliMonorepo\",\n\"group:vuepressMonorepo\",\n\"group:webdriverioMonorepo\",\n\"group:workboxMonorepo\",\n\"group:xtermMonorepo\",\n\"group:xunit-dotnetMonorepo\",\n\"group:yarnMonorepo\",\n\"group:zxing-netMonorepo\",\n\"group:hapijsMonorepo\",\n\"group:lodashMonorepo\",\n\"group:ngrxMonorepo\",\n\"group:nrwlMonorepo\",\n\"group:semantic-releaseMonorepo\",\n\"group:swcMonorepo\",\n\"group:angularmaterialMonorepo\",\n\"group:apache-camelMonorepo\",\n\"group:aws-java-sdkMonorepo\",\n\"group:aws-java-sdk-v2Monorepo\",\n\"group:babel6Monorepo\",\n\"group:embroiderMonorepo\",\n\"group:fullcalendarMonorepo\",\n\"group:spfxMonorepo\",\n\"group:spockMonorepo\",\n\"group:syncfusion-dotnetMonorepo\",\n\"group:wordpressMonorepo\"\n],\n\"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-helpers/","title":"Helper Presets","text":""},{"location":"presets-helpers/#helpersdisabletypesnodemajor","title":"helpers:disableTypesNodeMajor","text":"<p>Disable <code>major</code> updates to <code>@types/node</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": false,\n\"matchPackageNames\": [\n\"@types/node\"\n],\n\"matchUpdateTypes\": [\n\"major\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-helpers/#helpersfollowtypescriptnext","title":"helpers:followTypescriptNext","text":"<p>Keep <code>typescript</code> version in sync with the <code>next</code> tag.</p> <pre><code>{\n\"extends\": [\n\":followTag(typescript, next)\"\n]\n}\n</code></pre>"},{"location":"presets-helpers/#helpersfollowtypescriptrc","title":"helpers:followTypescriptRc","text":"<p>Keep <code>typescript</code> version in sync with the <code>rc</code> tag.</p> <pre><code>{\n\"extends\": [\n\":followTag(typescript, rc)\"\n]\n}\n</code></pre>"},{"location":"presets-helpers/#helperspingithubactiondigests","title":"helpers:pinGitHubActionDigests","text":"<p>Pin <code>github-action</code> digests.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\n\"action\"\n],\n\"pinDigests\": true\n}\n]\n}\n</code></pre>"},{"location":"presets-monorepo/","title":"Monorepo Presets","text":""},{"location":"presets-monorepo/#monorepoaccounts","title":"monorepo:accounts","text":"<p>accounts monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/accounts-js/accounts\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoacot","title":"monorepo:acot","text":"<p>acot monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/acot-a11y/acot\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoag-grid","title":"monorepo:ag-grid","text":"<p>ag-grid monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ag-grid/ag-grid\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgolia-instantsearch","title":"monorepo:algolia-instantsearch","text":"<p>algolia-instantsearch monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/algolia/instantsearch\",\n\"https://github.com/algolia/instantsearch.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgolia-react-instantsearch","title":"monorepo:algolia-react-instantsearch","text":"<p>algolia-react-instantsearch monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/algolia/react-instantsearch\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgoliasearch-autocomplete","title":"monorepo:algoliasearch-autocomplete","text":"<p>algoliasearch-autocomplete monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/algolia/autocomplete\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoalgoliasearch-client-javascript","title":"monorepo:algoliasearch-client-javascript","text":"<p>algoliasearch-client-javascript monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/algolia/algoliasearch-client-javascript\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular","title":"monorepo:angular","text":"<p>angular monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/angular/angular\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular-cli","title":"monorepo:angular-cli","text":"<p>angular-cli monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/angular/angular-cli\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangular-eslint","title":"monorepo:angular-eslint","text":"<p>angular-eslint monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/angular-eslint/angular-eslint\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularfire","title":"monorepo:angularfire","text":"<p>angularfire monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/angular/angularfire\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularjs","title":"monorepo:angularjs","text":"<p>angularjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/angular/angular.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapollo-server","title":"monorepo:apollo-server","text":"<p>apollo-server monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/apollographql/apollo-server\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapolloclient","title":"monorepo:apolloclient","text":"<p>apolloclient monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/apollographql/apollo-client\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapplicationinsights-dotnet","title":"monorepo:applicationinsights-dotnet","text":"<p>applicationinsights-dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Microsoft/ApplicationInsights-dotnet\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusbackground-jobs","title":"monorepo:arcus.background-jobs","text":"<p>arcus.background-jobs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.backgroundjobs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusevent-grid","title":"monorepo:arcus.event-grid","text":"<p>arcus.event-grid monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.eventgrid\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusmessaging","title":"monorepo:arcus.messaging","text":"<p>arcus.messaging monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.messaging\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcusobservability","title":"monorepo:arcus.observability","text":"<p>arcus.observability monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.observability\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcussecurity","title":"monorepo:arcus.security","text":"<p>arcus.security monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.security\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoarcuswebapi","title":"monorepo:arcus.webapi","text":"<p>arcus.webapi monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/arcus-azure/arcus.webapi\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-aspnetwebstack","title":"monorepo:aspnet aspnetwebstack","text":"<p>aspnet aspnetwebstack monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/aspnet/AspNetWebStack\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-extensions","title":"monorepo:aspnet extensions","text":"<p>aspnet extensions monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/aspnet/Extensions\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaspnet-api-versioning","title":"monorepo:aspnet-api-versioning","text":"<p>aspnet-api-versioning monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Microsoft/aspnet-api-versioning\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoautomapper-dotnet","title":"monorepo:automapper-dotnet","text":"<p>automapper-dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/AutoMapper/AutoMapper\",\n\"https://github.com/AutoMapper/AutoMapper.Extensions.Microsoft.DependencyInjection\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-cdk","title":"monorepo:aws-cdk","text":"<p>aws-cdk monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/aws/aws-cdk\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-lambda-powertools-typescript","title":"monorepo:aws-lambda-powertools-typescript","text":"<p>aws-lambda-powertools-typescript monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/awslabs/aws-lambda-powertools-typescript\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-js-v3","title":"monorepo:aws-sdk-js-v3","text":"<p>aws-sdk-js-v3 monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/aws/aws-sdk-js-v3\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-sdk-net","title":"monorepo:aws-sdk-net","text":"<p>aws-sdk-net monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/aws/aws-sdk-net\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoawsappsync","title":"monorepo:awsappsync","text":"<p>awsappsync monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/awslabs/aws-mobile-appsync-sdk-js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-libraries-for-net","title":"monorepo:azure azure-libraries-for-net","text":"<p>azure azure-libraries-for-net monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Azure/azure-libraries-for-net\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-sdk-for-net","title":"monorepo:azure azure-sdk-for-net","text":"<p>azure azure-sdk-for-net monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Azure/azure-sdk-for-net\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoazure-azure-storage-net","title":"monorepo:azure azure-storage-net","text":"<p>azure azure-storage-net monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Azure/azure-storage-net\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobabel","title":"monorepo:babel","text":"<p>babel monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/babel/babel\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobaset","title":"monorepo:baset","text":"<p>baset monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/igmat/baset\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobrave","title":"monorepo:brave","text":"<p>brave monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/openzipkin/brave\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobugsnag-js","title":"monorepo:bugsnag-js","text":"<p>bugsnag-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/bugsnag/bugsnag-js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocapacitor","title":"monorepo:capacitor","text":"<p>capacitor monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ionic-team/capacitor\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepochakra-ui","title":"monorepo:chakra-ui","text":"<p>chakra-ui monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/chakra-ui/chakra-ui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepochromely","title":"monorepo:chromely","text":"<p>chromely monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/chromelyapps/Chromely\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoclarity","title":"monorepo:clarity","text":"<p>clarity monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@cds/\",\n\"^@clr/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoclearscript","title":"monorepo:clearscript","text":"<p>clearscript monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/microsoft/ClearScript\",\n\"https://github.com/Microsoft/ClearScript\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocommitlint","title":"monorepo:commitlint","text":"<p>commitlint monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/conventional-changelog/commitlint\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepocontentful-rich-text","title":"monorepo:contentful-rich-text","text":"<p>contentful-rich-text monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/contentful/rich-text\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodatadog-browser-sdk","title":"monorepo:datadog-browser-sdk","text":"<p>datadog-browser-sdk monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/DataDog/browser-sdk\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodate-io","title":"monorepo:date-io","text":"<p>date-io monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dmtrKovalenko/date-io\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodeno","title":"monorepo:deno","text":"<p>deno monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/denoland/deno\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodevextreme-reactive","title":"monorepo:devextreme-reactive","text":"<p>devextreme-reactive monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/DevExpress/devextreme-reactive\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodnd-kit","title":"monorepo:dnd-kit","text":"<p>dnd-kit monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/clauderic/dnd-kit\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodocusaurus","title":"monorepo:docusaurus","text":"<p>docusaurus monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/facebook/docusaurus\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet","title":"monorepo:dotnet","text":"<p>dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dotnet/aspnetcore\",\n\"https://github.com/dotnet/efcore\",\n\"https://github.com/dotnet/extensions\",\n\"https://github.com/dotnet/runtime\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-azure-ad-identitymodel-extensions","title":"monorepo:dotnet-azure-ad-identitymodel-extensions","text":"<p>dotnet-azure-ad-identitymodel-extensions monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-azure-ad-microsoft-identity-web","title":"monorepo:dotnet-azure-ad-microsoft-identity-web","text":"<p>dotnet-azure-ad-microsoft-identity-web monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/AzureAD/microsoft-identity-web\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodotnet-wcf","title":"monorepo:dotnet-wcf","text":"<p>dotnet-wcf monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dotnet/wcf\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepodropwizard","title":"monorepo:dropwizard","text":"<p>dropwizard monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dropwizard/dropwizard\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoelastic-apm-agent-rum-js","title":"monorepo:elastic-apm-agent-rum-js","text":"<p>elastic-apm-agent-rum-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/elastic/apm-agent-rum-js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoelectron-forge","title":"monorepo:electron-forge","text":"<p>electron-forge monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/electron-userland/electron-forge\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoember-decorators","title":"monorepo:ember-decorators","text":"<p>ember-decorators monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ember-decorators/ember-decorators\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoemojibase","title":"monorepo:emojibase","text":"<p>emojibase monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/milesj/emojibase\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoemotion","title":"monorepo:emotion","text":"<p>emotion monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/emotion-js/emotion\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoeslint-config-globex","title":"monorepo:eslint-config-globex","text":"<p>eslint-config-globex monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/GlobexDesignsInc/eslint-config-globex\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoexpo","title":"monorepo:expo","text":"<p>expo monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/expo/expo\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofeathers","title":"monorepo:feathers","text":"<p>feathers monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/feathersjs/feathers\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofeign","title":"monorepo:feign","text":"<p>feign monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/OpenFeign/feign\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofela","title":"monorepo:fela","text":"<p>fela monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/robinweser/fela\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofimbullinter","title":"monorepo:fimbullinter","text":"<p>fimbullinter monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/fimbullinter/wotan\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoflopflip","title":"monorepo:flopflip","text":"<p>flopflip monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/tdeekens/flopflip\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofontsource","title":"monorepo:fontsource","text":"<p>fontsource monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/fontsource/fontsource\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoformatjs","title":"monorepo:formatjs","text":"<p>formatjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/formatjs/formatjs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoframework7","title":"monorepo:framework7","text":"<p>framework7 monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/framework7io/framework7\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogatsby","title":"monorepo:gatsby","text":"<p>gatsby monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/gatsbyjs/gatsby\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogitbeaker","title":"monorepo:gitbeaker","text":"<p>gitbeaker monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/jdalrymple/gitbeaker\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepografana","title":"monorepo:grafana","text":"<p>grafana monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/grafana/grafana\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-mesh","title":"monorepo:graphql-mesh","text":"<p>graphql-mesh monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Urigo/graphql-mesh\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-modules","title":"monorepo:graphql-modules","text":"<p>graphql-modules monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Urigo/graphql-modules\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographql-tools","title":"monorepo:graphql-tools","text":"<p>graphql-tools monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ardatan/graphql-tools\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepographqlcodegenerator","title":"monorepo:graphqlcodegenerator","text":"<p>graphqlcodegenerator monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dotansimha/graphql-code-generator-community\",\n\"https://github.com/dotansimha/graphql-code-generator\",\n\"https://github.com/dotansimha/graphql-codegen\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepogroovy","title":"monorepo:groovy","text":"<p>groovy monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/apache/groovy\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoguava","title":"monorepo:guava","text":"<p>guava monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/google/guava\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohangfire","title":"monorepo:Hangfire","text":"<p>Hangfire monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/HangfireIO/Hangfire\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohotchocolate","title":"monorepo:hotchocolate","text":"<p>hotchocolate monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ChilliCream/hotchocolate\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoinfrastructure-ui","title":"monorepo:infrastructure-ui","text":"<p>infrastructure-ui monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/instructure/instructure-ui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoionic-native","title":"monorepo:ionic-native","text":"<p>ionic-native monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ionic-team/ionic-native\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoistanbuljs","title":"monorepo:istanbuljs","text":"<p>istanbuljs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/istanbuljs/istanbuljs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojasmine","title":"monorepo:jasmine","text":"<p>jasmine monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/jasmine/jasmine\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojavahamcrest","title":"monorepo:javahamcrest","text":"<p>javahamcrest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/hamcrest/JavaHamcrest\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojavascriptengineswitcher","title":"monorepo:javascriptengineswitcher","text":"<p>javascriptengineswitcher monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Taritsyn/JavaScriptEngineSwitcher\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojersey","title":"monorepo:jersey","text":"<p>jersey monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/eclipse-ee4j/jersey\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojest","title":"monorepo:jest","text":"<p>jest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/facebook/jest\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojsplumb","title":"monorepo:jsplumb","text":"<p>jsplumb monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/jsplumb/jsplumb\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepojunit5","title":"monorepo:junit5","text":"<p>junit5 monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/junit-team/junit5\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepokotlin","title":"monorepo:kotlin","text":"<p>kotlin monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/JetBrains/kotlin\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolerna","title":"monorepo:lerna","text":"<p>lerna monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/lerna/lerna\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolinguijs","title":"monorepo:linguijs","text":"<p>linguijs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/lingui/js-lingui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoloopback","title":"monorepo:loopback","text":"<p>loopback monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/strongloop/loopback-next\",\n\"https://github.com/loopbackio/loopback-next\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolrnwebcomponents","title":"monorepo:lrnwebcomponents","text":"<p>lrnwebcomponents monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/elmsln/lrnwebcomponents\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomailing","title":"monorepo:mailing","text":"<p>mailing monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/sofn-xyz/mailing\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomantine","title":"monorepo:mantine","text":"<p>mantine monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mantinedev/mantine\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomapstruct","title":"monorepo:mapstruct","text":"<p>mapstruct monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mapstruct/mapstruct\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomasstransit","title":"monorepo:masstransit","text":"<p>masstransit monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/MassTransit/MassTransit\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomaterial-components-web","title":"monorepo:material-components-web","text":"<p>material-components-web monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/material-components/material-components-web\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomaterial-ui","title":"monorepo:material-ui","text":"<p>material-ui monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mui-org/material-ui\",\n\"https://github.com/mui/material-ui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomdc-react","title":"monorepo:mdc-react","text":"<p>mdc-react monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"material-components/material-components-web-react\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomdx","title":"monorepo:mdx","text":"<p>mdx monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mdx-js/mdx\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomiddy-js","title":"monorepo:middy-js","text":"<p>middy-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/middyjs/middy\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomikro-orm","title":"monorepo:mikro-orm","text":"<p>mikro-orm monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mikro-orm/mikro-orm\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomockito","title":"monorepo:mockito","text":"<p>mockito monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mockito/mockito\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepomstest","title":"monorepo:mstest","text":"<p>mstest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/microsoft/testfx\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponest","title":"monorepo:nest","text":"<p>nest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/nestjs/nest\",\n\"https://github.com/nestjs/passport\",\n\"https://github.com/nestjs/schematics\",\n\"https://github.com/nestjs/terminus\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponetty","title":"monorepo:netty","text":"<p>netty monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/netty/netty\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponeutrino","title":"monorepo:neutrino","text":"<p>neutrino monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/neutrinojs/neutrino\",\n\"https://github.com/mozilla-neutrino/neutrino-dev\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponexpect","title":"monorepo:nexpect","text":"<p>nexpect monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/fluffynuts/NExpect\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponextjs","title":"monorepo:nextjs","text":"<p>nextjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/zeit/next.js\",\n\"https://github.com/vercel/next.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponextra","title":"monorepo:nextra","text":"<p>nextra monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/shuding/nextra\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongx-formly","title":"monorepo:ngx-formly","text":"<p>ngx-formly monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ngx-formly/ngx-formly\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongxs-store","title":"monorepo:ngxs-store","text":"<p>ngxs-store monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ngxs/store\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponivo","title":"monorepo:nivo","text":"<p>nivo monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/plouc/nivo\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponswag","title":"monorepo:nswag","text":"<p>nswag monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/RicoSuter/NSwag\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponuxtjs","title":"monorepo:nuxtjs","text":"<p>nuxtjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/nuxt/nuxt.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-dotnet","title":"monorepo:opentelemetry-dotnet","text":"<p>opentelemetry-dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/open-telemetry/opentelemetry-dotnet\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-go","title":"monorepo:opentelemetry-go","text":"<p>opentelemetry-go monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/open-telemetry/opentelemetry-go\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoopentelemetry-js","title":"monorepo:opentelemetry-js","text":"<p>opentelemetry-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/open-telemetry/opentelemetry-js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoorleans","title":"monorepo:orleans","text":"<p>orleans monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/dotnet/orleans\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoparcel","title":"monorepo:parcel","text":"<p>parcel monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/parcel-bundler/parcel\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopercy-cli","title":"monorepo:percy-cli","text":"<p>percy-cli monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/percy/cli\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopicassojs","title":"monorepo:picassojs","text":"<p>picassojs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/qlik-oss/picasso.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopixijs","title":"monorepo:pixijs","text":"<p>pixijs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/pixijs/pixi.js\",\n\"https://github.com/pixijs/pixijs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoplaywright","title":"monorepo:playwright","text":"<p>playwright monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Microsoft/playwright\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopnpjs","title":"monorepo:pnpjs","text":"<p>pnpjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/pnp/pnpjs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopollyjs","title":"monorepo:pollyjs","text":"<p>pollyjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Netflix/pollyjs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepopouchdb","title":"monorepo:pouchdb","text":"<p>pouchdb monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/pouchdb/pouchdb\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoprisma","title":"monorepo:prisma","text":"<p>prisma monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/prisma/prisma\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoquartznet","title":"monorepo:quartznet","text":"<p>quartznet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/quartznet/quartznet\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeach-ui","title":"monorepo:reach-ui","text":"<p>reach-ui monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/reach/reach-ui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact","title":"monorepo:react","text":"<p>react monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/facebook/react\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-admin","title":"monorepo:react-admin","text":"<p>react-admin monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/marmelab/react-admin\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-apollo","title":"monorepo:react-apollo","text":"<p>react-apollo monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/apollographql/react-apollo\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-dnd","title":"monorepo:react-dnd","text":"<p>react-dnd monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/react-dnd/react-dnd\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-navigation","title":"monorepo:react-navigation","text":"<p>react-navigation monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/react-navigation/react-navigation\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-page","title":"monorepo:react-page","text":"<p>react-page monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/react-page/react-page\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeact-router","title":"monorepo:react-router","text":"<p>react-router monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ReactTraining/react-router\",\n\"https://github.com/remix-run/react-router\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeactivestack-cookies","title":"monorepo:reactivestack-cookies","text":"<p>reactivestack-cookies monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/reactivestack/cookies\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeakit","title":"monorepo:reakit","text":"<p>reakit monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/reakit/reakit\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporedwood","title":"monorepo:redwood","text":"<p>redwood monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/redwoodjs/redwood\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporeg-suit","title":"monorepo:reg-suit","text":"<p>reg-suit monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/reg-viz/reg-suit\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporemark","title":"monorepo:remark","text":"<p>remark monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/remarkjs/remark\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporemix","title":"monorepo:remix","text":"<p>remix monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/remix-run/remix\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporouter5","title":"monorepo:router5","text":"<p>router5 monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/router5/router5\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporust-futures","title":"monorepo:rust-futures","text":"<p>rust-futures monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/rust-lang/futures-rs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreporust-wasm-bindgen","title":"monorepo:rust-wasm-bindgen","text":"<p>rust-wasm-bindgen monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/rustwasm/wasm-bindgen\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposanity","title":"monorepo:sanity","text":"<p>sanity monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/sanity-io/sanity\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposendgrid-nodejs","title":"monorepo:sendgrid-nodejs","text":"<p>sendgrid-nodejs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/sendgrid/sendgrid-nodejs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-dotnet","title":"monorepo:sentry-dotnet","text":"<p>sentry-dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/getsentry/sentry-dotnet\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-javascript","title":"monorepo:sentry-javascript","text":"<p>sentry-javascript monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/getsentry/sentry-javascript\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposentry-ruby","title":"monorepo:sentry-ruby","text":"<p>sentry-ruby monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/getsentry/sentry-ruby\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposhedlock","title":"monorepo:shedlock","text":"<p>shedlock monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/lukas-krecan/ShedLock\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposhopify-app-bridge","title":"monorepo:shopify-app-bridge","text":"<p>shopify-app-bridge monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Shopify/app-bridge\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepositecore-jss","title":"monorepo:sitecore-jss","text":"<p>sitecore-jss monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/Sitecore/jss\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposkiasharp","title":"monorepo:skiasharp","text":"<p>skiasharp monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/mono/SkiaSharp\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospringfox","title":"monorepo:springfox","text":"<p>springfox monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/springfox/springfox\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposteeltoe","title":"monorepo:steeltoe","text":"<p>steeltoe monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/SteeltoeOSS/steeltoe\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostorybook","title":"monorepo:storybook","text":"<p>storybook monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/storybookjs/storybook\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostorybook-react-native","title":"monorepo:storybook-react-native","text":"<p>storybook-react-native monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/storybookjs/react-native\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostrapi","title":"monorepo:strapi","text":"<p>strapi monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/strapi/strapi\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepostryker-js","title":"monorepo:stryker-js","text":"<p>stryker-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/stryker-mutator/stryker-js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposurveyjs","title":"monorepo:surveyjs","text":"<p>surveyjs monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/surveyjs/surveyjs\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposwashbuckle-aspnetcore","title":"monorepo:swashbuckle-aspnetcore","text":"<p>swashbuckle-aspnetcore monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposystemioabstractions","title":"monorepo:system.io.abstractions","text":"<p>system.io.abstractions monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/System-IO-Abstractions/System.IO.Abstractions/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotanstack-query","title":"monorepo:tanstack-query","text":"<p>tanstack-query monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/TanStack/query\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotauri","title":"monorepo:tauri","text":"<p>tauri monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/tauri-apps/tauri\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotelus-tds","title":"monorepo:telus-tds","text":"<p>telus-tds monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/telusdigital/tds\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotelus-tds-core","title":"monorepo:telus-tds-core","text":"<p>telus-tds-core monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/telus/tds-core\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotemporalio-ts","title":"monorepo:temporalio-ts","text":"<p>temporalio-ts monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/temporalio/sdk-typescript\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotestcontainers-java","title":"monorepo:testcontainers-java","text":"<p>testcontainers-java monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/testcontainers/testcontainers-java\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotheme-ui","title":"monorepo:theme-ui","text":"<p>theme-ui monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/system-ui/theme-ui\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotiptap","title":"monorepo:tiptap","text":"<p>tiptap monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/ueberdosis/tiptap\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotreat","title":"monorepo:treat","text":"<p>treat monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/seek-oss/treat\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotrpc","title":"monorepo:trpc","text":"<p>trpc monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/trpc/trpc\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotsoa","title":"monorepo:tsoa","text":"<p>tsoa monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/lukeautry/tsoa\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypefaces","title":"monorepo:typefaces","text":"<p>typefaces monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/KyleAMathews/typefaces\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypescript-eslint","title":"monorepo:typescript-eslint","text":"<p>typescript-eslint monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/typescript-eslint/typescript-eslint\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepotypography-js","title":"monorepo:typography-js","text":"<p>typography-js monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/KyleAMathews/typography.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepouppy","title":"monorepo:uppy","text":"<p>uppy monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/transloadit/uppy\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovaadinwebcomponents","title":"monorepo:vaadinWebComponents","text":"<p>vaadinWebComponents monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/vaadin/web-components\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovitest","title":"monorepo:vitest","text":"<p>vitest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/vitest-dev/vitest\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovstest","title":"monorepo:vstest","text":"<p>vstest monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/microsoft/vstest\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovue","title":"monorepo:vue","text":"<p>vue monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/vuejs/vue\",\n\"https://github.com/vuejs/core\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovue-cli","title":"monorepo:vue-cli","text":"<p>vue-cli monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/vuejs/vue-cli\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepovuepress","title":"monorepo:vuepress","text":"<p>vuepress monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/vuejs/vuepress\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowebdriverio","title":"monorepo:webdriverio","text":"<p>webdriverio monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/webdriverio/webdriverio\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoworkbox","title":"monorepo:workbox","text":"<p>workbox monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/googlechrome/workbox\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoxterm","title":"monorepo:xterm","text":"<p>xterm monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/xtermjs/xterm.js\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoxunit-dotnet","title":"monorepo:xunit-dotnet","text":"<p>xunit-dotnet monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/xunit/xunit\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoyarn","title":"monorepo:yarn","text":"<p>yarn monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/yarnpkg/berry\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepozxing-net","title":"monorepo:zxing-net","text":"<p>zxing-net monorepo</p> <pre><code>{\n\"matchSourceUrls\": [\n\"https://github.com/micjahn/ZXing.Net\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepohapijs","title":"monorepo:hapijs","text":"<p>hapijs monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/hapijs/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepolodash","title":"monorepo:lodash","text":"<p>lodash monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/lodash/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepongrx","title":"monorepo:ngrx","text":"<p>ngrx monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/ngrx/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreponrwl","title":"monorepo:nrwl","text":"<p>nrwl monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/nrwl/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposemantic-release","title":"monorepo:semantic-release","text":"<p>semantic-release monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/semantic-release/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposwc","title":"monorepo:swc","text":"<p>swc monorepo</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/swc-project/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoangularmaterial","title":"monorepo:angularmaterial","text":"<p>angularmaterial monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@angular/material\",\n\"^@angular/cdk\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoapache-camel","title":"monorepo:apache-camel","text":"<p>apache-camel monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^org.apache.camel:\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-java-sdk","title":"monorepo:aws-java-sdk","text":"<p>aws-java-sdk monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^com.amazonaws:aws-java-sdk-\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoaws-java-sdk-v2","title":"monorepo:aws-java-sdk-v2","text":"<p>aws-java-sdk-v2 monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^software.amazon.awssdk:\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepobabel6","title":"monorepo:babel6","text":"<p>babel6 monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^babel6$\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepoembroider","title":"monorepo:embroider","text":"<p>embroider monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@embroider/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepofullcalendar","title":"monorepo:fullcalendar","text":"<p>fullcalendar monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@fullcalendar/\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospfx","title":"monorepo:spfx","text":"<p>spfx monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@microsoft/sp-\",\n\"^@microsoft/eslint-.+-spfx$\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepospock","title":"monorepo:spock","text":"<p>spock monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^org\\\\.spockframework:spock-\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monoreposyncfusion-dotnet","title":"monorepo:syncfusion-dotnet","text":"<p>syncfusion-dotnet monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^Syncfusion\\\\.\"\n]\n}\n</code></pre>"},{"location":"presets-monorepo/#monorepowordpress","title":"monorepo:wordpress","text":"<p>wordpress monorepo</p> <pre><code>{\n\"matchPackagePatterns\": [\n\"^@wordpress/\"\n]\n}\n</code></pre>"},{"location":"presets-npm/","title":"Npm Presets","text":""},{"location":"presets-npm/#npmunpublishsafe","title":"npm:unpublishSafe","text":"<p>Wait until the npm package is three days old before raising the update, this prevents npm unpublishing a package you already upgraded to.</p> <pre><code>{\n\"npm\": {\n\"minimumReleaseAge\": \"3 days\"\n}\n}\n</code></pre>"},{"location":"presets-packages/","title":"Package Presets","text":""},{"location":"presets-packages/#packagesangularjs","title":"packages:angularJs","text":"<p>All AngularJS packages.</p> <pre><code>{\n\"matchPackageNames\": [\n\"angular\",\n\"angular-animate\",\n\"angular-scroll\",\n\"angular-sanitize\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesapollographql","title":"packages:apollographql","text":"<p>All packages published by Apollo GraphQL.</p> <pre><code>{\n\"matchSourceUrlPrefixes\": [\n\"https://github.com/apollographql/\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesembertemplatelint","title":"packages:emberTemplateLint","text":"<p>All ember-template-lint packages.</p> <pre><code>{\n\"matchPackagePrefixes\": [\n\"ember-template-lint\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packageseslint","title":"packages:eslint","text":"<p>All ESLint packages.</p> <pre><code>{\n\"matchPackageNames\": [\n\"@types/eslint\",\n\"babel-eslint\"\n],\n\"matchPackagePrefixes\": [\n\"@typescript-eslint/\",\n\"eslint\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesgatsby","title":"packages:gatsby","text":"<p>All packages published by Gatsby.</p> <pre><code>{\n\"extends\": [\n\"monorepo:gatsby\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesgoogleapis","title":"packages:googleapis","text":"<p>All <code>googleapis</code> packages.</p> <pre><code>{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"google-auth-library\"\n],\n\"matchPackagePrefixes\": [\n\"@google-cloud/\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesjstest","title":"packages:jsTest","text":"<p>JavaScript test packages.</p> <pre><code>{\n\"extends\": [\n\"packages:jsUnitTest\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesjsunittest","title":"packages:jsUnitTest","text":"<p>Unit test packages for JavaScript.</p> <pre><code>{\n\"matchPackageNames\": [\n\"@types/chai\",\n\"@types/ember-mocha\",\n\"@types/ember-qunit\",\n\"@types/enzyme\",\n\"@types/istanbul\",\n\"@types/jest\",\n\"@types/mocha\",\n\"@types/mock-fs\",\n\"@types/proxyquire\",\n\"@types/sinon\",\n\"@types/supertest\",\n\"coveralls\",\n\"ember-exam\",\n\"ember-mocha\",\n\"ember-qunit\",\n\"enzyme\",\n\"istanbul\",\n\"mock-fs\",\n\"nock\",\n\"nyc\",\n\"proxyquire\",\n\"supertest\",\n\"ts-auto-mock\",\n\"ts-jest\",\n\"vitest\"\n],\n\"matchPackagePrefixes\": [\n\"@testing-library\",\n\"@vitest\",\n\"chai\",\n\"jest\",\n\"mocha\",\n\"qunit\",\n\"should\",\n\"sinon\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packageslinters","title":"packages:linters","text":"<p>All lint-related packages.</p> <pre><code>{\n\"extends\": [\n\"packages:emberTemplateLint\",\n\"packages:eslint\",\n\"packages:stylelint\",\n\"packages:tslint\"\n],\n\"matchPackageNames\": [\n\"prettier\",\n\"remark-lint\",\n\"standard\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesmapbox","title":"packages:mapbox","text":"<p>All Mapbox-related packages.</p> <pre><code>{\n\"matchPackagePrefixes\": [\n\"leaflet\",\n\"mapbox\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagespostcss","title":"packages:postcss","text":"<p>All PostCSS packages.</p> <pre><code>{\n\"matchPackageNames\": [\n\"postcss\"\n],\n\"matchPackagePrefixes\": [\n\"postcss-\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesreact","title":"packages:react","text":"<p>All React packages.</p> <pre><code>{\n\"matchPackageNames\": [\n\"@types/react\"\n],\n\"matchPackagePrefixes\": [\n\"react\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesstylelint","title":"packages:stylelint","text":"<p>All Stylelint packages.</p> <pre><code>{\n\"matchPackagePrefixes\": [\n\"stylelint\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagestest","title":"packages:test","text":"<p>Test packages.</p> <pre><code>{\n\"extends\": [\n\"packages:unitTest\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagestslint","title":"packages:tslint","text":"<p>All TSLint packages.</p> <pre><code>{\n\"matchPackageNames\": [\n\"codelyzer\"\n],\n\"matchPackagePatterns\": [\n\"\\\\btslint\\\\b\"\n]\n}\n</code></pre>"},{"location":"presets-packages/#packagesunittest","title":"packages:unitTest","text":"<p>All unit test packages.</p> <pre><code>{\n\"extends\": [\n\"packages:jsUnitTest\"\n]\n}\n</code></pre>"},{"location":"presets-preview/","title":"Preview Presets","text":""},{"location":"presets-preview/#previewbuildkite","title":"preview:buildkite","text":"<p>Enable Buildkite functionality.</p> <pre><code>{\n\"buildkite\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-preview/#previewdockercompose","title":"preview:dockerCompose","text":"<p>Enable Docker Compose image updating.</p> <pre><code>{\n\"docker-compose\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"presets-preview/#previewdockerversions","title":"preview:dockerVersions","text":"<p>Upgrade Docker tags to newer versions.</p> <pre><code>{\n\"docker\": {\n\"major\": {\n\"enabled\": true\n},\n\"minor\": {\n\"enabled\": true\n}\n}\n}\n</code></pre>"},{"location":"presets-regexManagers/","title":"RegexManager Presets","text":""},{"location":"presets-regexManagers/#regexmanagersdockerfileversions","title":"regexManagers:dockerfileVersions","text":"<p>Update <code>_VERSION</code> variables in Dockerfiles.</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\n\"(^|/|\\\\.)Dockerfile$\",\n\"(^|/)Dockerfile[^/]*$\"\n],\n\"matchStrings\": [\n\"# renovate: datasource=(?&lt;datasource&gt;[a-z-]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[^\\\\s]+?))?(?: registryUrl=(?&lt;registryUrl&gt;[^\\\\s]+?))?\\\\s(?:ENV|ARG) .+?_VERSION[ =]\\\"?(?&lt;currentValue&gt;.+?)\\\"?\\\\s\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-regexManagers/#regexmanagersgithubactionsversions","title":"regexManagers:githubActionsVersions","text":"<p>Update <code>_VERSION</code> environment variables in GitHub Action files.</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\n\"^.github/(?:workflows|actions)/.+\\\\.ya?ml$\"\n],\n\"matchStrings\": [\n\"# renovate: datasource=(?&lt;datasource&gt;[a-z-]+?) depName=(?&lt;depName&gt;[^\\\\s]+?)(?: (?:lookupName|packageName)=(?&lt;packageName&gt;[^\\\\s]+?))?(?: versioning=(?&lt;versioning&gt;[a-z-0-9]+?))?\\\\s+[A-Za-z0-9_]+?_VERSION\\\\s*:\\\\s*[\\\"']?(?&lt;currentValue&gt;.+?)[\\\"']?\\\\s\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-regexManagers/#regexmanagershelmchartyamlappversions","title":"regexManagers:helmChartYamlAppVersions","text":"<p>Update <code>appVersion</code> value in Helm chart Chart.yaml.</p> <pre><code>{\n\"regexManagers\": [\n{\n\"datasourceTemplate\": \"docker\",\n\"fileMatch\": [\n\"(^|/)Chart\\\\.yaml$\"\n],\n\"matchStrings\": [\n\"#\\\\s*renovate: image=(?&lt;depName&gt;.*?)\\\\s+appVersion:\\\\s*[\\\"']?(?&lt;currentValue&gt;[\\\\w+\\\\.\\\\-]*)\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/","title":"Replacement Presets","text":""},{"location":"presets-replacements/#replacementsall","title":"replacements:all","text":"<p>Apply crowd-sourced package replacement rules.</p> <pre><code>{\n\"extends\": [\n\"replacements:apollo-server-to-scoped\",\n\"replacements:babel-eslint-to-eslint-parser\",\n\"replacements:containerbase\",\n\"replacements:cucumber-to-scoped\",\n\"replacements:fastify-to-scoped\",\n\"replacements:hapi-to-scoped\",\n\"replacements:jade-to-pug\",\n\"replacements:joi-to-scoped\",\n\"replacements:joi-to-unscoped\",\n\"replacements:k8s-registry-move\",\n\"replacements:material-ui-to-mui\",\n\"replacements:messageFormat-{{package}}-to-@messageformat/{{package}}\",\n\"replacements:middie-to-scoped\",\n\"replacements:now-to-vercel\",\n\"replacements:parcel-css-to-lightningcss\",\n\"replacements:react-query-devtools-to-scoped\",\n\"replacements:react-query-to-scoped\",\n\"replacements:react-scripts-ts-to-react-scripts\",\n\"replacements:renovate-pep440-to-renovatebot-pep440\",\n\"replacements:rollup-node-resolve-to-scoped\",\n\"replacements:vso-task-lib-to-azure-pipelines-task-lib\",\n\"replacements:vsts-task-lib-to-azure-pipelines-task-lib\",\n\"replacements:xmldom-to-scoped\"\n],\n\"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsapollo-server-to-scoped","title":"replacements:apollo-server-to-scoped","text":"<p><code>apollo-server</code> packages became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=3.10.3\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-server\",\n\"apollo-server-core\",\n\"apollo-server-express\"\n],\n\"replacementName\": \"@apollo/server\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.3.1\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-server-errors\"\n],\n\"replacementName\": \"@apollo/server\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.6.3\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-server-types\",\n\"apollo-server-plugin-base\"\n],\n\"replacementName\": \"@apollo/server\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.7.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-datasource-rest\"\n],\n\"replacementName\": \"@apollo/datasource-rest\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.7.1\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-server-plugin-response-cache\"\n],\n\"replacementName\": \"@apollo/server-plugin-response-cache\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.5.1\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-server-plugin-operation-registry\"\n],\n\"replacementName\": \"@apollo/server-plugin-operation-registry\",\n\"replacementVersion\": \"3.5.6\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.3.3\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"apollo-reporting-protobuf\"\n],\n\"replacementName\": \"@apollo/usage-reporting-protobuf\",\n\"replacementVersion\": \"4.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsbabel-eslint-to-eslint-parser","title":"replacements:babel-eslint-to-eslint-parser","text":"<p><code>babel-eslint</code> was renamed under the <code>@babel</code> scope.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=7.11.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"babel-eslint\"\n],\n\"replacementName\": \"@babel/eslint-parser\",\n\"replacementVersion\": \"7.11.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementscontainerbase","title":"replacements:containerbase","text":"<p>Replace containerbase dependencies.</p> <pre><code>{\n\"packageRules\": [\n{\n\"description\": \"Replace `containerbase/(buildpack|base)` and `renovate/buildpack` with `ghcr.io/containerbase/base`.\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePatterns\": [\n\"^(?:docker\\\\.io/)?containerbase/(?:buildpack|base)$\",\n\"^ghcr\\\\.io/containerbase/buildpack$\",\n\"^(?:docker\\\\.io/)?renovate/buildpack$\"\n],\n\"replacementName\": \"ghcr.io/containerbase/base\"\n},\n{\n\"description\": \"Replace `containerbase/node` and `renovate/node` with `ghcr.io/containerbase/node`.\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePatterns\": [\n\"^(?:docker\\\\.io/)?(?:containerbase|renovate)/node$\"\n],\n\"replacementName\": \"ghcr.io/containerbase/node\"\n},\n{\n\"description\": \"Replace `containerbase/sidecar` and `renovate/sidecar` with `ghcr.io/containerbase/sidecar`.\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePatterns\": [\n\"^(?:docker\\\\.io/)?(?:containerbase|renovate)/sidecar$\"\n],\n\"replacementName\": \"ghcr.io/containerbase/sidecar\"\n},\n{\n\"description\": \"Replace `renovatebot/internal-tools` with `containerbase/internal-tools`.\",\n\"matchDatasources\": [\n\"github-tags\"\n],\n\"matchPackageNames\": [\n\"renovatebot/internal-tools\"\n],\n\"replacementName\": \"containerbase/internal-tools\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementscucumber-to-scoped","title":"replacements:cucumber-to-scoped","text":"<p><code>cucumber</code> became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"cucumber\"\n],\n\"replacementName\": \"@cucumber/cucumber\",\n\"replacementVersion\": \"7.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsfastify-to-scoped","title":"replacements:fastify-to-scoped","text":"<p><code>fastify</code> packages became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=3.3.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-accepts-serializer\"\n],\n\"replacementName\": \"@fastify/accepts-serializer\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-accepts\"\n],\n\"replacementName\": \"@fastify/accepts\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-auth\"\n],\n\"replacementName\": \"@fastify/auth\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.13.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-autoload\"\n],\n\"replacementName\": \"@fastify/autoload\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.3.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-awilix\"\n],\n\"replacementName\": \"@fastify/awilix\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-basic-auth\"\n],\n\"replacementName\": \"@fastify/basic-auth\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-bearer-auth\"\n],\n\"replacementName\": \"@fastify/bearer-auth\",\n\"replacementVersion\": \"7.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-caching\"\n],\n\"replacementName\": \"@fastify/caching\",\n\"replacementVersion\": \"7.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-circuit-breaker\"\n],\n\"replacementName\": \"@fastify/circuit-breaker\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.1.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-compress\"\n],\n\"replacementName\": \"@fastify/compress\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=5.7.0 &lt;6.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-cookie\"\n],\n\"replacementName\": \"@fastify/cookie\",\n\"replacementVersion\": \"6.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=6.1.0 &lt;7.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-cors\"\n],\n\"replacementName\": \"@fastify/cors\",\n\"replacementVersion\": \"7.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-diagnostics-channel\"\n],\n\"replacementName\": \"@fastify/diagnostics-channel\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-elasticsearch\"\n],\n\"replacementName\": \"@fastify/elasticsearch\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-env\"\n],\n\"replacementName\": \"@fastify/env\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.2.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-error\"\n],\n\"replacementName\": \"@fastify/error\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-etag\"\n],\n\"replacementName\": \"@fastify/etag\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-express\"\n],\n\"replacementName\": \"@fastify/express\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.1.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-flash\"\n],\n\"replacementName\": \"@fastify/flash\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=5.3.0 &lt;6.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-formbody\"\n],\n\"replacementName\": \"@fastify/formbody\",\n\"replacementVersion\": \"6.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-funky\"\n],\n\"replacementName\": \"@fastify/funky\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=7.1.0 &lt;8.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-helmet\"\n],\n\"replacementName\": \"@fastify/helmet\",\n\"replacementVersion\": \"8.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-hotwire\"\n],\n\"replacementName\": \"@fastify/hotwire\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=6.3.0 &lt;7.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-http-proxy\"\n],\n\"replacementName\": \"@fastify/http-proxy\",\n\"replacementVersion\": \"7.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.2.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-jwt\"\n],\n\"replacementName\": \"@fastify/jwt\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-kafka\"\n],\n\"replacementName\": \"@fastify/kafka\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-leveldb\"\n],\n\"replacementName\": \"@fastify/leveldb\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.2.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-mongodb\"\n],\n\"replacementName\": \"@fastify/mongodb\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=5.4.0 &lt;6.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-multipart\"\n],\n\"replacementName\": \"@fastify/multipart\",\n\"replacementVersion\": \"6.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.2.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-mysql\"\n],\n\"replacementName\": \"@fastify/mysql\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=7.3.0 &lt;8.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-nextjs\"\n],\n\"replacementName\": \"@fastify/nextjs\",\n\"replacementVersion\": \"8.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.6.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-oauth2\"\n],\n\"replacementName\": \"@fastify/oauth2\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.5.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-passport\"\n],\n\"replacementName\": \"@fastify/passport\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.7.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-postgres\"\n],\n\"replacementName\": \"@fastify/postgres\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=5.9.0 &lt;6.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-rate-limit\"\n],\n\"replacementName\": \"@fastify/rate-limit\",\n\"replacementVersion\": \"6.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.4.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-redis\"\n],\n\"replacementName\": \"@fastify/redis\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=6.7.0 &lt;7.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-reply-from\"\n],\n\"replacementName\": \"@fastify/reply-from\",\n\"replacementVersion\": \"7.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.3.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-request-context\"\n],\n\"replacementName\": \"@fastify/request-context\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-response-validation\"\n],\n\"replacementName\": \"@fastify/response-validation\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.1.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-routes-stats\"\n],\n\"replacementName\": \"@fastify/routes-stats\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-routes\"\n],\n\"replacementName\": \"@fastify/routes\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=1.1.0 &lt;2.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-schedule\"\n],\n\"replacementName\": \"@fastify/schedule\",\n\"replacementVersion\": \"2.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-secure-session\"\n],\n\"replacementName\": \"@fastify/secure-session\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.2.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-sensible\"\n],\n\"replacementName\": \"@fastify/sensible\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.3.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-soap-client\"\n],\n\"replacementName\": \"@fastify/soap-client\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.7.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-static\"\n],\n\"replacementName\": \"@fastify/static\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=5.2.0 &lt;6.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-swagger\"\n],\n\"replacementName\": \"@fastify/swagger\",\n\"replacementVersion\": \"6.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=3.1.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-url-data\"\n],\n\"replacementName\": \"@fastify/url-data\",\n\"replacementVersion\": \"4.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.3.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-websocket\"\n],\n\"replacementName\": \"@fastify/websocket\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.1.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"fastify-zipkin\"\n],\n\"replacementName\": \"@fastify/zipkin\",\n\"replacementVersion\": \"3.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementshapi-to-scoped","title":"replacements:hapi-to-scoped","text":"<p><code>hapi</code> became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=18.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"hapi\"\n],\n\"replacementName\": \"@hapi/hapi\",\n\"replacementVersion\": \"18.2.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjade-to-pug","title":"replacements:jade-to-pug","text":"<p>Jade was renamed to Pug.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"jade\"\n],\n\"replacementName\": \"pug\",\n\"replacementVersion\": \"2.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjoi-to-scoped","title":"replacements:joi-to-scoped","text":"<p><code>joi</code> became scoped under the <code>hapi</code> organization.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=14.0.0 &lt;14.4.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"joi\"\n],\n\"replacementName\": \"@hapi/joi\",\n\"replacementVersion\": \"14.4.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsjoi-to-unscoped","title":"replacements:joi-to-unscoped","text":"<p><code>joi</code> was moved out of the <code>hapi</code> organization.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=17.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@hapi/joi\"\n],\n\"replacementName\": \"joi\",\n\"replacementVersion\": \"17.1.1\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsk8s-registry-move","title":"replacements:k8s-registry-move","text":"<p>The Kubernetes container registry has changed from <code>k8s.gcr.io</code> to <code>registry.k8s.io</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePatterns\": [\n\"^k8s\\\\.gcr\\\\.io/.+$\"\n],\n\"replacementNameTemplate\": \"{{{replace 'k8s\\\\.gcr\\\\.io/' 'registry\\\\.k8s\\\\.io/' packageName}}}\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmiddie-to-scoped","title":"replacements:middie-to-scoped","text":"<p><code>middie</code> became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=7.1.0 &lt;8.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"middie\"\n],\n\"replacementName\": \"@fastify/middie\",\n\"replacementVersion\": \"8.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsnow-to-vercel","title":"replacements:now-to-vercel","text":"<p><code>now</code> was renamed to <code>vercel</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=21.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"now\"\n],\n\"replacementName\": \"vercel\",\n\"replacementVersion\": \"21.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsparcel-css-to-lightningcss","title":"replacements:parcel-css-to-lightningcss","text":"<p><code>@parcel/css</code> was renamed to <code>lightningcss</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@parcel/css\"\n],\n\"replacementName\": \"lightningcss\",\n\"replacementVersion\": \"1.14.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-query-devtools-to-scoped","title":"replacements:react-query-devtools-to-scoped","text":"<p><code>react-query/devtools</code> became scoped under the <code>tanstack</code> organization.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=2.0.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"react-query/devtools\"\n],\n\"replacementName\": \"@tanstack/react-query-devtools\",\n\"replacementVersion\": \"4.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-query-to-scoped","title":"replacements:react-query-to-scoped","text":"<p><code>react-query</code> became scoped under the <code>tanstack</code> organization.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=3.0.0 &lt;4.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"react-query\"\n],\n\"replacementName\": \"@tanstack/react-query\",\n\"replacementVersion\": \"4.0.5\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsreact-scripts-ts-to-react-scripts","title":"replacements:react-scripts-ts-to-react-scripts","text":"<p><code>react-scripts</code> supports TypeScript since version <code>2.1.0</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"react-scripts-ts\"\n],\n\"replacementName\": \"react-scripts\",\n\"replacementVersion\": \"2.1.8\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsredux-devtools-extension-to-scope","title":"replacements:redux-devtools-extension-to-scope","text":"<p>The <code>redux-devtools-extension</code> package was renamed to <code>@redux-devtools/extension</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"redux-devtools-extension\"\n],\n\"replacementName\": \"@redux-devtools/extension\",\n\"replacementVersion\": \"3.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrenovate-pep440-to-renovatebot-pep440","title":"replacements:renovate-pep440-to-renovatebot-pep440","text":"<p>The <code>@renovate/pep440</code> package was renamed to <code>@renovatebot/pep440</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@renovate/pep440\"\n],\n\"replacementName\": \"@renovatebot/pep440\",\n\"replacementVersion\": \"1.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsrollup-node-resolve-to-scoped","title":"replacements:rollup-node-resolve-to-scoped","text":"<p>The node-resolve plugin for rollup became scoped.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"rollup-plugin-node-resolve\"\n],\n\"replacementName\": \"@rollup/plugin-node-resolve\",\n\"replacementVersion\": \"6.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsspectre-cli-to-spectre-console-cli","title":"replacements:spectre-cli-to-spectre-console-cli","text":"<p>The <code>Spectre.Cli</code> package was renamed to <code>Spectre.Console.Cli</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"nuget\"\n],\n\"matchPackageNames\": [\n\"Spectre.Cli\"\n],\n\"replacementName\": \"Spectre.Console.Cli\",\n\"replacementVersion\": \"0.45.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsvso-task-lib-to-azure-pipelines-task-lib","title":"replacements:vso-task-lib-to-azure-pipelines-task-lib","text":"<p>The <code>vso-task-lib</code> package is now published as <code>azure-pipelines-task-lib</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"vso-task-lib\"\n],\n\"replacementName\": \"azure-pipelines-task-lib\",\n\"replacementVersion\": \"3.4.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsvsts-task-lib-to-azure-pipelines-task-lib","title":"replacements:vsts-task-lib-to-azure-pipelines-task-lib","text":"<p>The <code>vsts-task-lib</code> package is now published as <code>azure-pipelines-task-lib</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"vsts-task-lib\"\n],\n\"replacementName\": \"azure-pipelines-task-lib\",\n\"replacementVersion\": \"3.4.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsxmldom-to-scoped","title":"replacements:xmldom-to-scoped","text":"<p>The <code>xmldom</code> package is now published as <code>@xmldom/xmldom</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"xmldom\",\n\"xmldom-alpha\"\n],\n\"replacementName\": \"@xmldom/xmldom\",\n\"replacementVersion\": \"0.7.5\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmessageformat-package-to-messageformatpackage","title":"replacements:messageFormat-{{package}}-to-@messageformat/{{package}}","text":"<p>The <code>messageformat</code> monorepo package naming scheme changed from <code>messageFormat-{{package}}</code>-to-<code>@messageformat/{{package}}</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=2.0.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"messageformat-cli\"\n],\n\"replacementName\": \"@messageformat/cli\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=2.0.0 &lt;3.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"messageformat\"\n],\n\"replacementName\": \"@messageformat/core\",\n\"replacementVersion\": \"3.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"messageformat-convert\"\n],\n\"replacementName\": \"@messageformat/convert\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=0.4.0 &lt;1.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"react-message-context\"\n],\n\"replacementName\": \"@messageformat/react\",\n\"replacementVersion\": \"1.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"messageformat-parser\"\n],\n\"replacementName\": \"@messageformat/parser\",\n\"replacementVersion\": \"5.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-replacements/#replacementsmaterial-ui-to-mui","title":"replacements:material-ui-to-mui","text":"<p>The <code>material-ui</code> monorepo org was renamed from <code>@material-ui</code> to <code>@mui</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/codemod\"\n],\n\"replacementName\": \"@mui/codemod\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/core\"\n],\n\"replacementName\": \"@mui/material\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/icons\"\n],\n\"replacementName\": \"@mui/icons-material\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/lab\"\n],\n\"replacementName\": \"@mui/labs\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/private-theming\"\n],\n\"replacementName\": \"@mui/private-theming\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/styled-engine\"\n],\n\"replacementName\": \"@mui/styled-engine\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/styled-engine-sc\"\n],\n\"replacementName\": \"@mui/styled-engine-sc\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/styles\"\n],\n\"replacementName\": \"@mui/styles\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/system\"\n],\n\"replacementName\": \"@mui/system\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/types\"\n],\n\"replacementName\": \"@mui/types\",\n\"replacementVersion\": \"5.0.0\"\n},\n{\n\"matchCurrentVersion\": \"&gt;=4.0.0 &lt;5.0.0\",\n\"matchDatasources\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@material-ui/unstyled\"\n],\n\"replacementName\": \"@mui/core\",\n\"replacementVersion\": \"5.0.0\"\n}\n]\n}\n</code></pre>"},{"location":"presets-schedule/","title":"Schedule Presets","text":""},{"location":"presets-schedule/#scheduleautomergedaily","title":"schedule:automergeDaily","text":"<p>Schedule automerge daily.</p> <pre><code>{\n\"automergeSchedule\": [\n\"before 2am\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeearlymondays","title":"schedule:automergeEarlyMondays","text":"<p>Weekly automerge schedule on early Monday mornings.</p> <pre><code>{\n\"automergeSchedule\": [\n\"before 3am on Monday\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergemonthly","title":"schedule:automergeMonthly","text":"<p>Schedule automerge monthly.</p> <pre><code>{\n\"automergeSchedule\": [\n\"before 3am on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergenonofficehours","title":"schedule:automergeNonOfficeHours","text":"<p>Schedule automerge for typical non-office hours (night time and weekends).</p> <pre><code>{\n\"automergeSchedule\": [\n\"after 10pm every weekday\",\n\"before 5am every weekday\",\n\"every weekend\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergequarterly","title":"schedule:automergeQuarterly","text":"<p>Schedule automerge quarterly.</p> <pre><code>{\n\"automergeSchedule\": [\n\"every 3 months on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekdays","title":"schedule:automergeWeekdays","text":"<p>Schedule automerge for weekdays.</p> <pre><code>{\n\"automergeSchedule\": [\n\"every weekday\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekends","title":"schedule:automergeWeekends","text":"<p>Schedule automerge for weekends.</p> <pre><code>{\n\"automergeSchedule\": [\n\"every weekend\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeweekly","title":"schedule:automergeWeekly","text":"<p>Schedule automerge weekly.</p> <pre><code>{\n\"extends\": [\n\"schedule:automergeEarlyMondays\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleautomergeyearly","title":"schedule:automergeYearly","text":"<p>Schedule automerge once a year (not recommended).</p> <pre><code>{\n\"automergeSchedule\": [\n\"every 12 months on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduledaily","title":"schedule:daily","text":"<p>Schedule daily.</p> <pre><code>{\n\"schedule\": [\n\"before 2am\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleearlymondays","title":"schedule:earlyMondays","text":"<p>Weekly schedule on early Monday mornings.</p> <pre><code>{\n\"schedule\": [\n\"before 3am on Monday\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulemonthly","title":"schedule:monthly","text":"<p>Schedule monthly.</p> <pre><code>{\n\"schedule\": [\n\"before 3am on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulenonofficehours","title":"schedule:nonOfficeHours","text":"<p>Schedule for typical non-office hours (night time and weekends).</p> <pre><code>{\n\"schedule\": [\n\"after 10pm every weekday\",\n\"before 5am every weekday\",\n\"every weekend\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#schedulequarterly","title":"schedule:quarterly","text":"<p>Schedule quarterly.</p> <pre><code>{\n\"schedule\": [\n\"every 3 months on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekdays","title":"schedule:weekdays","text":"<p>Schedule for weekdays.</p> <pre><code>{\n\"schedule\": [\n\"every weekday\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekends","title":"schedule:weekends","text":"<p>Schedule for weekends.</p> <pre><code>{\n\"schedule\": [\n\"every weekend\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleweekly","title":"schedule:weekly","text":"<p>Schedule weekly.</p> <pre><code>{\n\"extends\": [\n\"schedule:earlyMondays\"\n]\n}\n</code></pre>"},{"location":"presets-schedule/#scheduleyearly","title":"schedule:yearly","text":"<p>Schedule once a year (not recommended).</p> <pre><code>{\n\"schedule\": [\n\"every 12 months on the first day of the month\"\n]\n}\n</code></pre>"},{"location":"presets-workarounds/","title":"Workaround Presets","text":""},{"location":"presets-workarounds/#workaroundsall","title":"workarounds:all","text":"<p>Apply crowd-sourced workarounds for known problems with packages.</p> <pre><code>{\n\"extends\": [\n\"workarounds:mavenCommonsAncientVersion\",\n\"workarounds:ignoreSpringCloudNumeric\",\n\"workarounds:ignoreWeb3jCoreWithOldReleaseTimestamp\",\n\"workarounds:ignoreHttp4sDigestMilestones\",\n\"workarounds:typesNodeVersioning\",\n\"workarounds:reduceRepologyServerLoad\",\n\"workarounds:doNotUpgradeFromAlpineStableToEdge\",\n\"workarounds:supportRedHatImageVersion\",\n\"workarounds:javaLTSVersions\",\n\"workarounds:disableMavenParentRoot\",\n\"workarounds:containerbase\"\n],\n\"ignoreDeps\": []\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundscontainerbase","title":"workarounds:containerbase","text":"<p>Add some containerbase overrides</p> <pre><code>{\n\"packageRules\": [\n{\n\"description\": \"Use node versioning for `(containerbase|renovate)/node` images\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackagePatterns\": [\n\"^(?:(?:docker|ghcr)\\\\.io/)?(?:containerbase|renovate)/node$\"\n],\n\"versioning\": \"node\"\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdisablemavenparentroot","title":"workarounds:disableMavenParentRoot","text":"<p>Avoid version fetching for Maven packages detected as project root.</p> <pre><code>{\n\"packageRules\": [\n{\n\"enabled\": false,\n\"matchDepTypes\": [\n\"parent-root\"\n],\n\"matchManagers\": [\n\"maven\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsdonotupgradefromalpinestabletoedge","title":"workarounds:doNotUpgradeFromAlpineStableToEdge","text":"<p>Do not upgrade from Alpine stable to edge.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"&lt;20000000\",\n\"matchCurrentVersion\": \"!/^\\\\d{8}$/\",\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackageNames\": [\n\"alpine\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignorehttp4sdigestmilestones","title":"workarounds:ignoreHttp4sDigestMilestones","text":"<p>Ignore <code>http4s</code> digest-based <code>1.x</code> milestones.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"!/^1\\\\.0-\\\\d+-[a-fA-F0-9]{7}$/\",\n\"matchManagers\": [\n\"sbt\"\n],\n\"matchPackagePrefixes\": [\n\"org.http4s:\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignorespringcloudnumeric","title":"workarounds:ignoreSpringCloudNumeric","text":"<p>Ignore spring cloud <code>1.x</code> releases.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"/^[A-Z]/\",\n\"matchDatasources\": [\n\"maven\"\n],\n\"matchPackageNames\": [\n\"org.springframework.cloud:spring-cloud-starter-parent\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsignoreweb3jcorewitholdreleasetimestamp","title":"workarounds:ignoreWeb3jCoreWithOldReleaseTimestamp","text":"<p>Ignore <code>web3j</code> <code>5.0.0</code> release.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"!/^5\\\\.0\\\\.0/\",\n\"matchDatasources\": [\n\"maven\"\n],\n\"matchPackageNames\": [\n\"org.web3j:core\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsjavaltsversions","title":"workarounds:javaLTSVersions","text":"<p>Limit Java runtime versions to LTS releases.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"/^(?:8|11|17)(?:\\\\.|-|$)/\",\n\"description\": \"Limit Java runtime versions to LTS releases. To receive all major releases add `workarounds:javaLTSVersions` to the `ignorePresets` array.\",\n\"matchDatasources\": [\n\"docker\",\n\"java-version\"\n],\n\"matchPackageNames\": [\n\"eclipse-temurin\",\n\"amazoncorretto\",\n\"adoptopenjdk\",\n\"openjdk\",\n\"java\",\n\"java-jre\",\n\"sapmachine\"\n],\n\"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)?(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?([\\\\._+](?&lt;build&gt;\\\\d+))?(-(?&lt;compatibility&gt;.*))?$\"\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsmavencommonsancientversion","title":"workarounds:mavenCommonsAncientVersion","text":"<p>Fix some problems with very old Maven commons versions.</p> <pre><code>{\n\"packageRules\": [\n{\n\"allowedVersions\": \"!/^200\\\\d{5}(\\\\.\\\\d+)?/\",\n\"matchDatasources\": [\n\"maven\",\n\"sbt-package\"\n],\n\"matchPackagePrefixes\": [\n\"commons-\"\n]\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundsreducerepologyserverload","title":"workarounds:reduceRepologyServerLoad","text":"<p>Limit concurrent requests to reduce load on Repology servers until we can fix this properly, see issue <code>#10133</code>.</p> <pre><code>{\n\"hostRules\": [\n{\n\"concurrentRequestLimit\": 1,\n\"matchHost\": \"repology.org\"\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundssupportredhatimageversion","title":"workarounds:supportRedHatImageVersion","text":"<p>Use specific versioning for Red Hat-maintained container images.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\n\"docker\"\n],\n\"matchPackageNames\": [\n\"registry.access.redhat.com/rhel\",\n\"registry.access.redhat.com/rhel-atomic\",\n\"registry.access.redhat.com/rhel-init\",\n\"registry.access.redhat.com/rhel-minimal\"\n],\n\"matchPackagePrefixes\": [\n\"registry.access.redhat.com/rhceph/\",\n\"registry.access.redhat.com/rhgs3/\",\n\"registry.access.redhat.com/rhel7\",\n\"registry.access.redhat.com/rhel8/\",\n\"registry.access.redhat.com/rhel9/\",\n\"registry.access.redhat.com/rhscl/\",\n\"registry.access.redhat.com/ubi7\",\n\"registry.access.redhat.com/ubi8\",\n\"registry.access.redhat.com/ubi9\",\n\"redhat/\"\n],\n\"versioning\": \"redhat\"\n}\n]\n}\n</code></pre>"},{"location":"presets-workarounds/#workaroundstypesnodeversioning","title":"workarounds:typesNodeVersioning","text":"<p>Use node versioning for <code>@types/node</code>.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\n\"npm\"\n],\n\"matchPackageNames\": [\n\"@types/node\"\n],\n\"versioning\": \"node\"\n}\n]\n}\n</code></pre>"},{"location":"python/","title":"Python package manager support","text":"<p>Renovate supports several Python package managers, including <code>pip</code>, <code>pipenv</code>, <code>poetry</code>, etc. See all supported managers.</p>"},{"location":"python/#versioning-support","title":"Versioning support","text":"<p>We've written a JavaScript version of the PEP440 specification so we can use it in Renovate bot. You can find this project in our <code>renovatebot/pep440</code> repository.</p> <p>Our PEP440 implementation supports pinned versions and ranges. Legacy versions with the <code>===</code> prefix are ignored.</p>"},{"location":"python/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches through each repository for package files</li> <li>Existing dependencies are extracted from the package files</li> <li>Renovate searches for the latest version on PyPI to decide if there are upgrades</li> <li>If the source package includes a GitHub URL as its source, and has a \"changelog\" file or uses GitHub releases, a Release Note will be embedded in the generated PR</li> </ol>"},{"location":"python/#alternative-file-names","title":"Alternative file names","text":"<p>For the <code>pip_requirements</code> manager, the default file matching regex for <code>requirements.txt</code> follows common file name conventions. But Renovate may not find all your files.</p> <p>You can tell Renovate where to find your file(s) by setting your own <code>fileMatch</code> regex:</p> <pre><code>{\n\"pip_requirements\": {\n\"fileMatch\": [\"my/specifically-named.file\", \"\\\\.requirements$\"]\n}\n}\n</code></pre>"},{"location":"python/#alternate-registries","title":"Alternate registries","text":"<p>By default Renovate checks for upgrades on the <code>pypi.org</code> registry.</p> <p>If you want, you can set alternative index URLs. There are three ways to do this:</p> <ul> <li>index-url in <code>requirements.txt</code></li> <li>sources in <code>Pipfile</code></li> <li>set URL in Renovate configuration</li> </ul>"},{"location":"python/#index-url-in-requirementstxt","title":"index-url in <code>requirements.txt</code>","text":"<p>You can set the index URL in the first line of the <code>requirements.txt</code>, for example:</p> <pre><code>--index-url http://example.com/private-pypi/\nsome-package==0.3.1\nsome-other-package==1.0.0\n</code></pre>"},{"location":"python/#sources-in-pipfile","title":"Sources in <code>Pipfile</code>","text":"<p>Renovate finds and uses any custom sources in your <code>Pipfile</code>.</p>"},{"location":"python/#sources-in-pyprojecttoml","title":"Sources in <code>pyproject.toml</code>","text":"<p>Renovate detects any custom-configured sources in <code>pyproject.toml</code> and uses them.</p>"},{"location":"python/#specify-url-in-configuration","title":"Specify URL in configuration","text":"<p>Create a <code>python</code> object and put a <code>registryUrls</code> array in it. Fill the array with alternate index URL(s).</p> <pre><code>{\n\"python\": {\n\"registryUrls\": [\"http://example.com/private-pypi/\"]\n}\n}\n</code></pre> <p>Tip</p> <p>If a <code>requirements.txt</code> file has an index-url then Renovate follows that link, instead of following any link set in the <code>registryUrls</code> array. To override the URL found in <code>requirements.txt</code>, you must create a custom <code>packageRules</code> setting. This is because <code>packageRules</code> are applied after package file extraction.</p>"},{"location":"python/#disabling-python-support","title":"Disabling Python support","text":"<p>To disable all managers with <code>language</code> set to <code>python</code> in Renovate, do this:</p> <pre><code>{\n\"python\": {\n\"enabled\": false\n}\n}\n</code></pre> <p>Alternatively, you can use <code>enabledManagers</code> to tell Renovate what package managers it can use. For example, if you only want to use Renovate's <code>npm</code> package manager:</p> <pre><code>{\n\"enabledManagers\": [\"npm\"]\n}\n</code></pre>"},{"location":"release-notes-for-major-versions/","title":"Release notes for major versions of Renovate","text":"<p>It can be hard to keep track of the changes between major versions of Renovate. To help you, we've listed the breaking changes, plus the developer commentary for the latest major releases.</p> <p>The most recent versions are always at the top of the page. This is because recent versions may revert changes made in an older version. You also don't have to scroll to the bottom of the page to find the latest release notes.</p>"},{"location":"release-notes-for-major-versions/#version-35","title":"Version 35","text":""},{"location":"release-notes-for-major-versions/#breaking-changes","title":"Breaking changes","text":"<ul> <li>require NodeJS v18.12+ (#20838)</li> <li>config: Forked repos will now be processed automatically if <code>autodiscover=false</code>. <code>includeForks</code> is removed and replaced by new option <code>forkProcessing</code></li> <li>Internal checks such as <code>renovate/stability-days</code> will no longer count as passing/green, meaning that actions such as <code>automerge</code> won't occur if the only checks are Renovate internal ones. Set <code>internalChecksAsSuccess=true</code> to restore existing behavior</li> <li>versioning: default versioning is now <code>semver-coerced</code>, instead of <code>semver</code></li> <li>datasource/github-releases: Regex Manager configurations relying on the github-release data-source with digests will have different digest semantics. The digest will now always correspond to the underlying Git SHA of the release/version. The old behavior can be preserved by switching to the github-release-attachments datasource</li> <li>versioning: bump short ranges to version (#20494)</li> <li>config: <code>containerbase/</code> account used for sidecar containers instead of <code>renovate/</code></li> <li>go: Renovate will now use go's default <code>GOPROXY</code> settings. To avoid using the public proxy, configure <code>GOPROXY=direct</code></li> <li>datasource/npm: Package cache will include entries for up to 24 hours after the last lookup. Set <code>cacheHardTtlMinutes=0</code> to revert to existing behavior</li> <li>config: Renovate now defaults to applying hourly and concurrent PR limits. To revert to unlimited, configure them back to <code>0</code></li> <li>config: Renovate will now default to updating locked dependency versions. To revert to previous behavior, configure <code>rangeStrategy=replace</code></li> <li>config: PyPI releases will no longer be filtered by default based on <code>constraints.python</code> compatibility. To retain existing functionality, set <code>constraintsFiltering=strict</code></li> </ul>"},{"location":"release-notes-for-major-versions/#commentary","title":"Commentary","text":"<p>Most of these changes will be invisible to the majority of users. They may be \"breaking\" (change of behavior) but good changes of defaults to make.</p> <p>The biggest change is defaulting <code>rangeStrategy=auto</code> to use <code>update-lockfile</code> instead of <code>replace</code>, which impacts anyone using the recommended <code>config:base</code>. This will mean that you start seeing some \"lockfile-only\" PRs for in-range updates, such as updating <code>package-lock.json</code> when a range exists in <code>package.json</code>.</p>"},{"location":"release-notes-for-major-versions/#link-to-release-notes","title":"Link to release notes","text":"<p>Release notes for <code>v35</code> on GitHub.</p>"},{"location":"release-notes-for-major-versions/#version-34","title":"Version 34","text":""},{"location":"release-notes-for-major-versions/#breaking-changes_1","title":"Breaking changes","text":"<ul> <li>Revert <code>branchNameStrict</code> to <code>false</code></li> </ul>"},{"location":"release-notes-for-major-versions/#commentary_1","title":"Commentary","text":"<p>Here comes v34 hot on the heels of v33. We decided to issue another breaking change to revert one of the breaking changes in v33.</p> <p>If you are upgrading from v32 to v34 then it means that the setting for <code>branchNameStrict</code> remains as <code>false</code> and you don't need to worry about that.</p> <p>If you already upgraded from v32 to v33 then you have a decision to make first:</p> <ul> <li>set <code>branchNameStrict</code> to <code>true</code> (like in v33),</li> <li>or let it set back to <code>false</code> (like in v32).</li> </ul> <p>Strict branch naming meant that all special characters other than letters, numbers and hyphens were converted to hyphens and then deduplicated, e.g. a branch which in v32 was like <code>renovate/abc.def-2.x</code> would become <code>renovate/abc-def-2-x</code> in v33. If you prefer to revert back to the old way then that will happen automatically in v34. If you prefer to keep the way in v33 because you already had a bunch of PRs closed and reopened due to branch names, and don't want to do that again, then add <code>branchNameStrict: false</code> to your bot config or your shared config before updating to v34.</p> <p>Apologies to anyone negatively affected by this v33 change.</p>"},{"location":"release-notes-for-major-versions/#link-to-release-notes_1","title":"Link to release notes","text":"<p>Release notes for <code>v34</code> on GitHub.</p>"},{"location":"release-notes-for-major-versions/#version-33","title":"Version 33","text":""},{"location":"release-notes-for-major-versions/#breaking-changes_2","title":"Breaking changes","text":"<ul> <li>Node 16 is the required runtime for Renovate</li> <li>[NOTE: This was reverted in <code>v34</code>] config: <code>branchNameStrict</code> default value is now <code>true</code></li> <li>config: <code>internalChecksFilter</code> default value is now <code>\"strict\"</code></li> <li>config: <code>ignoreScripts</code> default value is now <code>true</code>. If <code>allowScripts=true</code> in global config, <code>ignoreScripts</code> must be set to <code>false</code> in repo config if you want all repos to run scripts</li> <li>config: <code>autodiscover</code> filters can no longer include commas</li> <li>config: boolean variables must be <code>true</code> or <code>false</code> when configured in environment variables, and errors will be thrown for invalid values. Previously invalided values were ignored and treated as <code>false</code></li> <li>datasource/go: <code>git-tags</code> datasource will be used as the fallback instead of <code>github-tags</code> if a go package's host type is unknown</li> <li>jsonnet-bundler: <code>depName</code> now uses the \"absolute import\" format (e.g. <code>bar</code>-&gt; <code>github.com/foo/bar/baz-wow</code>)</li> <li>azure-pipelines: azure-pipelines manager is now disabled by default</li> <li>github: No longer necessary to configure forkMode. Forking mode is now experimental</li> <li>Users of <code>containerbase</code> images (such as official Renovate images) will now have dynamic package manager installs enabled by default</li> <li>Dependencies are no longer automatically pinned if <code>rangeStrategy=auto</code>, pinning must be opted into using <code>rangeStrategy=pin</code></li> </ul>"},{"location":"release-notes-for-major-versions/#commentary_2","title":"Commentary","text":"<p>This release contains some changes of default values/behavior:</p> <ul> <li><code>internalChecksFilter</code> will now default to <code>strict</code>, meaning that updates will be withheld by default when internal status checks are pending. This should reduce the number of \"non-actionable\" Pull Requests you get</li> <li><code>azure-pipelines</code> manager is disabled by default, because its primary datasource can unfortunately suggest updates which aren't yet installable. Users should opt into this manager once they know the risks</li> <li><code>binarySource=install</code> will now be used instead of <code>global</code> whenever Renovate is run within a \"containerbase\" image. This means dynamic installation of most package managers and languages</li> <li>Dependencies will no longer be pinned by default if <code>rangeStrategy=auto</code>. While we recommend pinning dependencies, we decided users should opt into this more explicitly</li> </ul> <p>And two major features!</p> <ul> <li>AWS CodeCommit platform support</li> <li>OpenTelemetry support</li> </ul> <p>Both the above are considered \"experimental\". Please test them out and let us know your feedback - both positive or negative - so that we can progress them to fully available.</p>"},{"location":"release-notes-for-major-versions/#link-to-release-notes_2","title":"Link to release notes","text":"<p>Release notes for <code>v33</code> on GitHub.</p>"},{"location":"ruby/","title":"Automated dependency updates for Ruby Bundler dependencies","text":"<p>Renovate supports upgrading dependencies in Bundler's Gemfiles and their accompanying <code>Gemfile.lock</code> files.</p>"},{"location":"ruby/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any Gemfiles</li> <li>Existing dependencies are extracted from the Gemfiles</li> <li>Renovate resolves the dependency on Rubygems.org (or elsewhere if configured), and checks for newer versions</li> <li>A PR is created which updates the <code>Gemfile</code> and <code>Gemfile.lock</code> in a single commit</li> </ol>"},{"location":"ruby/#warnings","title":"Warnings","text":"<p>When using <code>\"rangeStrategy\": \"update-lockfile\"</code>, all gems listed in the <code>Gemfile</code> will be updated, even if they do not have a version specified.</p> <p>When using other <code>rangeStrategy</code> options, Renovate doesn't update dependencies without a version constraint. Example: <code>gem 'some-gem', '~&gt; 1.2.3'</code> will update <code>some-gem</code> if a new version matching the constraint is available, but <code>gem 'some-gem'</code> won't. If you always want to have the latest available version, consider specifying <code>gem 'some-gem', '&gt; 0'</code>.</p>"},{"location":"ruby/#enabling","title":"Enabling","text":"<p>You can install the Renovate App on GitHub. Or you can check out Renovate OSS to self-host Renovate.</p>"},{"location":"rust/","title":"Automated Dependency Updates for Rust crates","text":"<p>Renovate supports upgrading dependencies in <code>Cargo.toml</code> files and their accompanying <code>Cargo.lock</code> checksums.</p>"},{"location":"rust/#how-it-works","title":"How it works","text":"<ol> <li>Renovate searches in each repository for any <code>Cargo.toml</code> files</li> <li>Renovate extracts existing dependencies from <code>[dependencies]</code>, <code>[dev-dependencies]</code>, <code>[build-dependencies]</code> and <code>[workspace.dependencies]</code></li> <li>Renovate looks up Cargo configuration to find index URLs for private registries</li> <li>Renovate resolves the dependency's version using the crates.io API or by cloning the index URL</li> <li>If Renovate finds an update, Renovate will use <code>cargo update</code> to update both <code>Cargo.toml</code> and <code>Cargo.lock</code></li> </ol>"},{"location":"rust/#enabling-rust-modules-updating","title":"Enabling Rust Modules Updating","text":"<p>Renovate updates Rust crates by default.</p>"},{"location":"rust/#cargo-configuration-and-private-registry-discovery","title":"Cargo configuration and private registry discovery","text":"<p>Renovate can find private registry URLs in these Cargo configuration files:</p> <ul> <li><code>.cargo/config.toml</code></li> <li><code>.cargo/config</code> (legacy)</li> </ul> <p>Renovate can also find private registry URLs via a <code>CARGO_REGISTRIES_&lt;name&gt;_INDEX</code> environment variable. Read the Rust environment variables docs to learn more.</p>"},{"location":"rust/#private-crate-registries-and-private-git-dependencies","title":"Private crate registries and private Git dependencies","text":"<p>If any dependencies are hosted in private Git repositories, Git Authentication for cargo must be set up.</p> <p>If any dependencies are hosted on private crate registries (i.e., not on <code>crates.io</code>), then credentials should be set up in such a way that the Git command-line is able to clone the registry index. Third-party crate registries usually provide instructions to achieve this.</p> <p>Both of these are currently only possible when running Renovate self-hosted.</p>"},{"location":"security-and-permissions/","title":"Security and Permissions","text":"<p>This page talks about our security stance, and explains what permissions are needed for the different ways you can run Renovate.</p>"},{"location":"security-and-permissions/#security-stance","title":"Security Stance","text":"<p>Renovate is open source software, and comes with no guarantees or warranties of any kind. That said, we will try to fix security problems in a reasonable timeframe if possible.</p>"},{"location":"security-and-permissions/#certifications","title":"Certifications","text":"<p>Renovate the open source project is not certified.</p> <p>The company which maintains Renovate and provides the hosted Renovate App for GitHub is called Mend. Mend is ISO 27001 and SOC2 certified.</p>"},{"location":"security-and-permissions/#security-disclosure","title":"Security / Disclosure","text":"<p>If you find any bug with Renovate that may be a security problem, then e-mail us at: renovate-disclosure@mend.io. This way we can evaluate the bug and hopefully fix it before it gets abused. Please give us enough time to investigate the bug before you report it anywhere else.</p> <p>Please do not create GitHub issues for security-related doubts or problems.</p>"},{"location":"security-and-permissions/#permissions","title":"Permissions","text":"<p>We apply the Principle of Least Privilege (PoLP) but do need substantial privileges in order for our apps to work.</p>"},{"location":"security-and-permissions/#global-permissions","title":"Global Permissions","text":"<p>These permissions are always needed to run the respective app.</p> Permission Renovate hosted app Forking Renovate Why Dependabot alerts <code>read</code> <code>read</code> Create vulnerability fix PRs Administration <code>read</code> <code>read</code> Read branch protections and to be able to assign teams to PRs Metadata <code>read</code> <code>read</code> Mandatory for all apps Checks <code>read</code> and <code>write</code> not applicable Read and write status checks Code <code>read</code> and <code>write</code> <code>read</code> Read for repository content and write for creating branches Commit statuses <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Read and write commit statuses for Renovate PRs Issues <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Create dependency dashboard or Config Warning issues Pull Requests <code>read</code> and <code>write</code> <code>read</code> and <code>write</code> Create update PRs Workflows <code>read</code> and <code>write</code> not applicable Explicit permission needed in order to update workflows"},{"location":"security-and-permissions/#user-permissions","title":"User permissions","text":"<p>Renovate can also request users's permission to the following resources. These permissions will be requested and authorized on an individual-user basis.</p> Permission Renovate hosted app Forking Renovate Why email <code>read</code> not applicable Per-user consent requested if logging into App dashboard"},{"location":"self-hosted-configuration/","title":"Self-Hosted configuration options","text":"<p>You can only use these configuration options when you're self-hosting Renovate.</p> <p>Please also see Self-Hosted Experimental Options.</p> <p>Note</p> <p>Config options with <code>type=string</code> are always non-mergeable, so <code>mergeable=false</code>.</p>"},{"location":"self-hosted-configuration/#allowcustomcrateregistries","title":"allowCustomCrateRegistries","text":"<p>Set this to <code>true</code> to allow custom crate registries.</p> Name Value type boolean default <code>false</code> cli <code>--allow-custom-crate-registries</code> env <code>RENOVATE_ALLOW_CUSTOM_CRATE_REGISTRIES</code>"},{"location":"self-hosted-configuration/#allowplugins","title":"allowPlugins","text":"<p>Set this to <code>true</code> if repositories are allowed to run install plugins.</p> Name Value type boolean default <code>false</code> cli <code>--allow-plugins</code> env <code>RENOVATE_ALLOW_PLUGINS</code>"},{"location":"self-hosted-configuration/#allowpostupgradecommandtemplating","title":"allowPostUpgradeCommandTemplating","text":"<p>Set this to <code>true</code> to allow templating for post-upgrade commands.</p> Name Value type boolean default <code>false</code> cli <code>--allow-post-upgrade-command-templating</code> env <code>RENOVATE_ALLOW_POST_UPGRADE_COMMAND_TEMPLATING</code> <p>Set to <code>true</code> to allow templating of dependency level post-upgrade commands.</p> <p>Let's look at an example of configuring packages with existing Angular migrations.</p> <p>Add two properties to <code>config.js</code>: <code>allowPostUpgradeCommandTemplating</code> and <code>allowedPostUpgradeCommands</code>:</p> <pre><code>module.exports = {\nallowPostUpgradeCommandTemplating: true,\nallowedPostUpgradeCommands: ['^npm ci --ignore-scripts$', '^npx ng update'],\n};\n</code></pre> <p>In the <code>renovate.json</code> file, define the commands and files to be included in the final commit.</p> <p>The command to install dependencies (<code>npm ci --ignore-scripts</code>) is needed because, by default, the installation of dependencies is skipped (see the <code>skipInstalls</code> global option).</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"@angular/core\"],\n\"postUpgradeTasks\": {\n\"commands\": [\n\"npm ci --ignore-scripts\",\n\"npx ng update {{{depName}}} --from={{{currentVersion}}} --to={{{newVersion}}} --migrate-only --allow-dirty --force\"\n],\n\"fileFilters\": [\"**/**\"]\n}\n}\n]\n}\n</code></pre> <p>With this configuration, the executable command for <code>@angular/core</code> looks like this:</p> <pre><code>npm ci --ignore-scripts\nnpx ng update @angular/core --from=10.0.0 --to=11.0.0 --migrate-only --allow-dirty --force\n</code></pre>"},{"location":"self-hosted-configuration/#allowscripts","title":"allowScripts","text":"<p>Set this to <code>true</code> if repositories are allowed to run install scripts.</p> Name Value type boolean default <code>false</code> cli <code>--allow-scripts</code> env <code>RENOVATE_ALLOW_SCRIPTS</code>"},{"location":"self-hosted-configuration/#allowedpostupgradecommands","title":"allowedPostUpgradeCommands","text":"<p>A list of regular expressions that decide which post-upgrade tasks are allowed.</p> Name Value type array subType string cli <code>--allowed-post-upgrade-commands</code> env <code>RENOVATE_ALLOWED_POST_UPGRADE_COMMANDS</code> <p>A list of regular expressions that decide which commands in <code>postUpgradeTasks</code> are allowed to run. If this list is empty then no tasks will be executed.</p> <p>For example:</p> <pre><code>{\n\"allowedPostUpgradeCommands\": [\"^tslint --fix$\", \"^tslint --[a-z]+$\"]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#autodiscover","title":"autodiscover","text":"<p>Autodiscover all repositories.</p> Name Value type boolean default <code>false</code> cli <code>--autodiscover</code> env <code>RENOVATE_AUTODISCOVER</code> <p>When you enable <code>autodiscover</code>, by default, Renovate runs on every repository that the bot account can access. You can limit which repositories Renovate can access by using the <code>autodiscoverFilter</code> config option.</p>"},{"location":"self-hosted-configuration/#autodiscoverfilter","title":"autodiscoverFilter","text":"<p>Filter the list of autodiscovered repositories.</p> Name Value type array subType string cli <code>--autodiscover-filter</code> env <code>RENOVATE_AUTODISCOVER_FILTER</code> <p>You can use this option to filter the list of repositories that the Renovate bot account can access through <code>autodiscover</code>. It takes a minimatch glob-style or regex pattern.</p> <p>If you set multiple filters, then the matches of each filter are added to the overall result.</p> <p>If you use an environment variable or the CLI to set the value for <code>autodiscoverFilter</code>, then commas <code>,</code> within filters are not supported. Commas will be used as delimiter for a new filter.</p> <pre><code># DO NOT use commas inside the filter if your are using env or cli variables to configure it.\nRENOVATE_AUTODISCOVER_FILTER=\"/myapp/{readme.md,src/**}\"\n\n# in this example you can use regex instead\nRENOVATE_AUTODISCOVER_FILTER=\"/myapp/(readme\\.md|src/.*)/\"\n</code></pre> <p>Minimatch:</p> <pre><code>{\n\"autodiscoverFilter\": [\"project/*\"]\n}\n</code></pre> <p>Regex:</p> <p>All text inside the start and end <code>/</code> will be treated as a regular expression.</p> <pre><code>{\n\"autodiscoverFilter\": [\"/project/.*/\"]\n}\n</code></pre> <p>You can negate the regex by putting an <code>!</code> in front. Only use a single negation and don't mix with other filters because all filters are combined with <code>or</code>. If using negations, all repositories except those who match the regex are added to the result:</p> <pre><code>{\n\"autodiscoverFilter\": [\"!/project/.*/\"]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#basedir","title":"baseDir","text":"<p>The base directory for Renovate to store local files, including repository files and cache. If left empty, Renovate will create its own temporary directory to use.</p> Name Value type string cli <code>--base-dir</code> env <code>RENOVATE_BASE_DIR</code> default <code>null</code> <p>By default Renovate uses a temporary directory like <code>/tmp/renovate</code> to store its data. You can override this default with the <code>baseDir</code> option.</p> <p>For example:</p> <pre><code>{\n\"baseDir\": \"/my-own-different-temporary-folder\"\n}\n</code></pre>"},{"location":"self-hosted-configuration/#bbusedevelopmentbranch","title":"bbUseDevelopmentBranch","text":"<p>Use the repository's development branch as the repository's default branch.</p> Name Value type boolean default <code>false</code> supportedPlatforms bitbucket cli <code>--bb-use-development-branch</code> env <code>RENOVATE_BB_USE_DEVELOPMENT_BRANCH</code> <p>By default, Renovate will use a repository's \"main branch\" (typically called <code>main</code> or <code>master</code>) as the \"default branch\".</p> <p>Configuring this to <code>true</code> means that Renovate will detect and use the Bitbucket development branch as defined by the repository's branching model.</p> <p>If the \"development branch\" is configured but the branch itself does not exist (e.g. it was deleted), Renovate will fall back to using the repository's \"main branch\". This fall back behavior matches that of the Bitbucket Cloud web interface.</p>"},{"location":"self-hosted-configuration/#binarysource","title":"binarySource","text":"<p>Controls how third-party tools like npm or Gradle are called: directly, via Docker sidecar containers, or via dynamic install.</p> Name Value type string allowedValues global, docker, install, hermit default <code>\"install\"</code> cli <code>--binary-source</code> env <code>RENOVATE_BINARY_SOURCE</code> <p>Renovate often needs to use third-party binaries in its PRs, like <code>npm</code> to update <code>package-lock.json</code> or <code>go</code> to update <code>go.sum</code>. By default, Renovate uses a child process to run such tools, so they must be:</p> <ul> <li>installed before running Renovate</li> <li>available in the path</li> </ul> <p>But you can tell Renovate to use \"sidecar\" containers for third-party tools by setting <code>binarySource=docker</code>. For this to work, <code>docker</code> needs to be installed and the Docker socket available to Renovate. Now Renovate uses <code>docker run</code> to create containers like Node.js or Python to run tools in as-needed.</p> <p>Additionally, when Renovate is run inside a container built using <code>containerbase</code>, such as the official Renovate images on Docker Hub, then <code>binarySource=install</code> can be used. This mode means that Renovate will dynamically install the version of tools available, if supported.</p> <p>Supported tools for dynamic install are:</p> <ul> <li><code>bundler</code></li> <li><code>cargo</code></li> <li><code>composer</code></li> <li><code>dotnet</code></li> <li><code>flux</code></li> <li><code>golang</code></li> <li><code>gradle-wrapper</code></li> <li><code>helm</code></li> <li><code>jb</code></li> <li><code>jsonnet-bundler</code></li> <li><code>lerna</code></li> <li><code>mix</code></li> <li><code>node</code></li> <li><code>npm</code></li> <li><code>pip_requirements</code></li> <li><code>pip-compile</code></li> <li><code>pipenv</code></li> <li><code>pnpm</code></li> <li><code>poetry</code></li> <li><code>python</code></li> <li><code>rust</code></li> <li><code>yarn</code></li> </ul> <p>If all projects are managed by Hermit, you can tell Renovate to use the tooling versions specified in each project via Hermit by setting <code>binarySource=hermit</code>.</p> <p>Tools not on this list fall back to <code>binarySource=global</code>.</p>"},{"location":"self-hosted-configuration/#cachedir","title":"cacheDir","text":"<p>The directory where Renovate stores its cache. If left empty, Renovate creates a subdirectory within the <code>baseDir</code>.</p> Name Value type string cli <code>--cache-dir</code> env <code>RENOVATE_CACHE_DIR</code> default <code>null</code> <p>By default Renovate stores cache data in a temporary directory like <code>/tmp/renovate/cache</code>. Use the <code>cacheDir</code> option to override this default.</p> <p>The <code>baseDir</code> and <code>cacheDir</code> option may point to different directories. You can use one directory for the repo data, and another for the cache data.</p> <p>For example:</p> <pre><code>{\n\"baseDir\": \"/my-own-different-temporary-folder\",\n\"cacheDir\": \"/my-own-different-cache-folder\"\n}\n</code></pre>"},{"location":"self-hosted-configuration/#cachehardttlminutes","title":"cacheHardTtlMinutes","text":"<p>Maximum duration in minutes to keep datasource cache entries.</p> Name Value type integer default 1440 cli <code>--cache-hard-ttl-minutes</code> env <code>RENOVATE_CACHE_HARD_TTL_MINUTES</code> <p>This experimental feature is used to implement the concept of a \"soft\" cache expiry for datasources, starting with <code>npm</code>. It should be set to a non-zero value, recommended to be at least 60 (i.e. one hour).</p> <p>When this value is set, the <code>npm</code> datasource will use the <code>cacheHardTtlMinutes</code> value for cache expiry, instead of its default expiry of 15 minutes, which becomes the \"soft\" expiry value. Results which are soft expired are reused in the following manner:</p> <ul> <li>The <code>etag</code> from the cached results will be reused, and may result in a 304 response, meaning cached results are revalidated</li> <li>If an error occurs when querying the <code>npmjs</code> registry, then soft expired results will be reused if they are present</li> </ul>"},{"location":"self-hosted-configuration/#containerbasedir","title":"containerbaseDir","text":"<p>The directory where Renovate stores its containerbase cache. If left empty, Renovate creates a subdirectory within the <code>cacheDir</code>.</p> Name Value type string cli <code>--containerbase-dir</code> env <code>RENOVATE_CONTAINERBASE_DIR</code> default <code>null</code> <p>This directory is used to cache downloads when <code>binarySource=docker</code> or <code>binarySource=install</code>.</p> <p>Use this option if you need such downloads to be stored outside of Renovate's regular cache directory (<code>cacheDir</code>).</p>"},{"location":"self-hosted-configuration/#customenvvariables","title":"customEnvVariables","text":"<p>Custom environment variables for child processes and sidecar Docker containers.</p> Name Value type object cli <code>--custom-env-variables</code> env <code>RENOVATE_CUSTOM_ENV_VARIABLES</code> <p>This configuration will be applied after all other environment variables so you can use it to override defaults.</p>"},{"location":"self-hosted-configuration/#detectglobalmanagerconfig","title":"detectGlobalManagerConfig","text":"<p>If <code>true</code>, Renovate tries to detect global manager configuration from the file system.</p> Name Value type boolean default <code>false</code> cli <code>--detect-global-manager-config</code> env <code>RENOVATE_DETECT_GLOBAL_MANAGER_CONFIG</code> <p>The purpose of this config option is to allow you (as a bot admin) to configure manager-specific files such as a global <code>.npmrc</code> file, instead of configuring it in Renovate config.</p> <p>This config option is disabled by default because it may prove surprising or undesirable for some users who don't expect Renovate to go into their home directory and import registry or credential information.</p> <p>Currently this config option is supported for the <code>npm</code> manager only - specifically the <code>~/.npmrc</code> file. If found, it will be imported into <code>config.npmrc</code> with <code>config.npmrcMerge</code> set to <code>true</code>.</p>"},{"location":"self-hosted-configuration/#detecthostrulesfromenv","title":"detectHostRulesFromEnv","text":"<p>If <code>true</code>, Renovate tries to detect host rules from environment variables.</p> Name Value type boolean default <code>false</code> cli <code>--detect-host-rules-from-env</code> env <code>RENOVATE_DETECT_HOST_RULES_FROM_ENV</code> <p>The format of the environment variables must follow:</p> <ul> <li>Datasource name (e.g. <code>NPM</code>, <code>PYPI</code>)</li> <li>Underscore (<code>_</code>)</li> <li><code>matchHost</code></li> <li>Underscore (<code>_</code>)</li> <li>Field name (<code>TOKEN</code>, <code>USERNAME</code>, or <code>PASSWORD</code>)</li> </ul> <p>Hyphens (<code>-</code>) in datasource or host name must be replaced with double underscores (<code>__</code>). Periods (<code>.</code>) in host names must be replaced with a single underscore (<code>_</code>).</p> <p>Note</p> <p>You can't use these prefixes with the <code>detectHostRulesFromEnv</code> config option: <code>npm_config_</code>, <code>npm_lifecycle_</code>, <code>npm_package_</code>.</p>"},{"location":"self-hosted-configuration/#npmjs-registry-token-example","title":"npmjs registry token example","text":"<p><code>NPM_REGISTRY_NPMJS_ORG_TOKEN=abc123</code>:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"npm\",\n\"matchHost\": \"registry.npmjs.org\",\n\"token\": \"abc123\"\n}\n]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#gitlab-tags-usernamepassword-example","title":"GitLab Tags username/password example","text":"<p><code>GITLAB__TAGS_CODE__HOST_COMPANY_COM_USERNAME=bot GITLAB__TAGS_CODE__HOST_COMPANY_COM_PASSWORD=botpass123</code>:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"gitlab-tags\",\n\"matchHost\": \"code-host.company.com\",\n\"username\": \"bot\",\n\"password\": \"botpass123\"\n}\n]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#datasource-and-credentials-only","title":"Datasource and credentials only","text":"<p>You can skip the host part, and use just the datasource and credentials.</p> <p><code>DOCKER_USERNAME=bot DOCKER_PASSWORD=botpass123</code>:</p> <pre><code>{\n\"hostRules\": [\n{\n\"hostType\": \"docker\",\n\"username\": \"bot\",\n\"password\": \"botpass123\"\n}\n]\n}\n</code></pre>"},{"location":"self-hosted-configuration/#dockerchildprefix","title":"dockerChildPrefix","text":"<p>Change this value to add a prefix to the Renovate Docker sidecar container names and labels.</p> Name Value type string default <code>\"renovate_\"</code> cli <code>--docker-child-prefix</code> env <code>RENOVATE_DOCKER_CHILD_PREFIX</code> <p>Adds a custom prefix to the default Renovate sidecar Docker containers name and label.</p> <p>For example, if you set <code>dockerChildPrefix=myprefix_</code> then the final container created from the <code>containerbase/sidecar</code> is:</p> <ul> <li>called <code>myprefix_sidecar</code> instead of <code>renovate_sidecar</code></li> <li>labeled <code>myprefix_child</code> instead of <code>renovate_child</code></li> </ul> <p>Note</p> <p>Dangling containers are only removed when Renovate runs again with the same prefix.</p>"},{"location":"self-hosted-configuration/#dockerimageprefix","title":"dockerImagePrefix","text":"<p>Change this value to override the default Renovate Docker sidecar image name prefix.</p> Name Value type string default <code>\"docker.io/containerbase\"</code> cli <code>--docker-image-prefix</code> env <code>RENOVATE_DOCKER_IMAGE_PREFIX</code> <p>By default Renovate pulls the sidecar Docker containers from <code>docker.io/containerbase</code>. You can use the <code>dockerImagePrefix</code> option to override this default.</p> <p>Say you want to pull your images from <code>ghcr.io/containerbase</code> to bypass Docker Hub limits. You would put this in your configuration file:</p> <pre><code>{\n\"dockerImagePrefix\": \"ghcr.io/containerbase\"\n}\n</code></pre> <p>Now when Renovate pulls a new <code>sidecar</code> image, the final image is <code>ghcr.io/containerbase/sidecar</code> instead of <code>docker.io/containerbase/sidecar</code>.</p>"},{"location":"self-hosted-configuration/#dockeruser","title":"dockerUser","text":"<p>Set the <code>UID</code> and <code>GID</code> for Docker-based binaries if you use <code>binarySource=docker</code>.</p> Name Value type string cli <code>--docker-user</code> env <code>RENOVATE_DOCKER_USER</code> default <code>null</code> <p>Override default user and group used by Docker-based binaries. The user-id (UID) and group-id (GID) must match the user that executes Renovate.</p> <p>Read the Docker run reference for more information on user and group syntax. Set this to <code>1001:1002</code> to use UID 1001 and GID 1002. For example:</p> <pre><code>{\n\"dockerUser\": \"1001:1002\"\n}\n</code></pre> <p>If you use <code>binarySource=docker|install</code> read the section below.</p> <p>If you need to change the Docker user please make sure to use the root (<code>0</code>) group, otherwise you'll get in trouble with missing file and directory permissions. Like this:</p> <pre><code>&gt; export RENOVATE_DOCKER_USER=\"$(id -u):0\" # 500:0 (username:root)\n</code></pre>"},{"location":"self-hosted-configuration/#dryrun","title":"dryRun","text":"<p>If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs.</p> Name Value type string allowedValues extract, lookup, full cli <code>--dry-run</code> env <code>RENOVATE_DRY_RUN</code> <p>Use <code>dryRun</code> to preview the behavior of Renovate in logs, without making any changes to the repository files.</p> <p>You can choose from the following behaviors for the <code>dryRun</code> config option:</p> <ul> <li><code>null</code>: Default behavior - Performs a regular Renovate run including creating/updating/deleting branches and PRs</li> <li><code>\"extract\"</code>: Performs a very quick package file scan to identify the extracted dependencies</li> <li><code>\"lookup\"</code>: Performs a package file scan to identify the extracted dependencies and updates available</li> <li><code>\"full\"</code>: Performs a dry run by logging messages instead of creating/updating/deleting branches and PRs</li> </ul> <p>Information provided mainly in debug log level.</p>"},{"location":"self-hosted-configuration/#endpoint","title":"endpoint","text":"<p>Custom endpoint to use.</p> Name Value type string cli <code>--endpoint</code> env <code>RENOVATE_ENDPOINT</code>"},{"location":"self-hosted-configuration/#executiontimeout","title":"executionTimeout","text":"<p>Default execution timeout in minutes for child processes Renovate creates.</p> Name Value type integer default 15 cli <code>--execution-timeout</code> env <code>RENOVATE_EXECUTION_TIMEOUT</code> <p>Default execution timeout in minutes for child processes Renovate creates. If this option is not set, Renovate will fallback to 15 minutes.</p>"},{"location":"self-hosted-configuration/#exposeallenv","title":"exposeAllEnv","text":"<p>Set this to <code>true</code> to allow passing of all environment variables to package managers.</p> Name Value type boolean default <code>false</code> cli <code>--expose-all-env</code> env <code>RENOVATE_EXPOSE_ALL_ENV</code> <p>To keep you safe, Renovate only passes a limited set of environment variables to package managers. If you must expose all environment variables to package managers, you can set this option to <code>true</code>.</p> <p>Warning</p> <p>Always consider the security implications of using <code>exposeAllEnv</code>! Secrets and other confidential information stored in environment variables could be leaked by a malicious script, that enumerates all environment variables.</p> <p>Set <code>exposeAllEnv</code> to <code>true</code> only if you have reviewed, and trust, the repositories which Renovate bot runs against. Alternatively, you can use the <code>customEnvVariables</code> config option to handpick a set of variables you need to expose.</p> <p>Setting this to <code>true</code> also allows for variable substitution in <code>.npmrc</code> files.</p>"},{"location":"self-hosted-configuration/#force","title":"force","text":"<p>Any configuration set in this object will force override existing settings.</p> Name Value type object env <code>RENOVATE_FORCE</code> <p>This object is used as a \"force override\" when you need to make sure certain configuration overrides whatever is configured in the repository. For example, forcing a null (no) schedule to make sure Renovate raises PRs on a run even if the repository itself or its preset defines a schedule that's currently inactive.</p> <p>In practice, it is implemented by converting the <code>force</code> configuration into a <code>packageRule</code> that matches all packages.</p>"},{"location":"self-hosted-configuration/#forcecli","title":"forceCli","text":"<p>Decides if CLI configuration options are moved to the <code>force</code> config section.</p> Name Value type boolean default <code>true</code> cli <code>--force-cli</code> env <code>RENOVATE_FORCE_CLI</code> <p>This is set to <code>true</code> by default, meaning that any settings (such as <code>schedule</code>) take maximum priority even against custom settings existing inside individual repositories. It will also override any settings in <code>packageRules</code>.</p>"},{"location":"self-hosted-configuration/#forktoken","title":"forkToken","text":"<p>Set a personal access token here to enable \"fork mode\".</p> Name Value type string supportedPlatforms github cli <code>--fork-token</code> env <code>RENOVATE_FORK_TOKEN</code> default <code>null</code> <p>You probably don't need this option - it is an experimental setting developed for the Forking Renovate hosted GitHub App.</p> <p>If this value is configured then Renovate:</p> <ul> <li>forks the target repository into the account that owns the PAT</li> <li>keep this fork's default branch up-to-date with the target</li> </ul> <p>Renovate will then create branches on the fork and opens Pull Requests on the parent repository.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#gitnoverify","title":"gitNoVerify","text":"<p>Which Git commands will be run with the <code>--no-verify</code> option.</p> Name Value type array subType string allowedValues commit, push default <pre><code>[\"commit\", \"push\"]\n</code></pre> cli <code>--git-no-verify</code> env <code>RENOVATE_GIT_NO_VERIFY</code> <p>Controls when Renovate passes the <code>--no-verify</code> flag to <code>git</code>. The flag can be passed to <code>git commit</code> and/or <code>git push</code>. Read the documentation for git commit --no-verify and git push --no-verify to learn exactly what each flag does. To learn more about Git hooks, read the Pro Git 2 book, section on Git Hooks.</p>"},{"location":"self-hosted-configuration/#gitprivatekey","title":"gitPrivateKey","text":"<p>PGP key to use for signing Git commits.</p> Name Value type string env <code>RENOVATE_GIT_PRIVATE_KEY</code> default <code>null</code> <p>This should be an armored private key, so the type you get from running <code>gpg --export-secret-keys --armor 92066A17F0D1707B4E96863955FEF5171C45FAE5 &gt; private.key</code>. Replace the newlines with <code>\\n</code> before adding the resulting single-line value to your bot's config.</p> <p>Note</p> <p>The private key can't be protected with a passphrase if running in a headless environment. Renovate will not be able to handle entering the passphrase.</p> <p>It will be loaded lazily. Before the first commit in a repository, Renovate will:</p> <ol> <li>Run <code>gpg import</code> (if you haven't before)</li> <li>Run <code>git config user.signingkey</code> and <code>git config commit.gpgsign true</code></li> </ol> <p>The <code>git</code> commands are run locally in the cloned repo instead of globally. This reduces the chance of unintended consequences with global Git configs on shared systems.</p>"},{"location":"self-hosted-configuration/#gittimeout","title":"gitTimeout","text":"<p>Configure the timeout with a number of milliseconds to wait for a Git task.</p> Name Value type integer default 0 cli <code>--git-timeout</code> env <code>RENOVATE_GIT_TIMEOUT</code> <p>To handle the case where the underlying Git processes appear to hang, configure the timeout with the number of milliseconds to wait after last received content on either <code>stdOut</code> or <code>stdErr</code> streams before sending a <code>SIGINT</code> kill message.</p>"},{"location":"self-hosted-configuration/#giturl","title":"gitUrl","text":"<p>Overrides the default resolution for Git remote, e.g. to switch GitLab from HTTPS to SSH-based.</p> Name Value type string supportedPlatforms gitlab, bitbucket-server allowedValues default, ssh, endpoint default <code>\"default\"</code> cli <code>--git-url</code> env <code>RENOVATE_GIT_URL</code> <p>Override the default resolution for Git remote, e.g. to switch GitLab from HTTPS to SSH-based. Currently works for Bitbucket Server and GitLab only.</p> <p>Possible values:</p> <ul> <li><code>default</code>: use HTTPS URLs provided by the platform for Git</li> <li><code>ssh</code>: use SSH URLs provided by the platform for Git</li> <li><code>endpoint</code>: ignore URLs provided by the platform and use the configured endpoint directly</li> </ul>"},{"location":"self-hosted-configuration/#githubtokenwarn","title":"githubTokenWarn","text":"<p>Display warnings about GitHub token not being set.</p> Name Value type boolean default <code>true</code> cli <code>--github-token-warn</code> env <code>RENOVATE_GITHUB_TOKEN_WARN</code> <p>By default, Renovate logs and displays a warning when the <code>GITHUB_COM_TOKEN</code> is not set. By setting <code>githubTokenWarn</code> to <code>false</code>, Renovate suppresses these warnings on Pull Requests, etc. Disabling the warning is helpful for self-hosted environments that can't access the <code>github.com</code> domain, because the warning is useless in these environments.</p>"},{"location":"self-hosted-configuration/#globalextends","title":"globalExtends","text":"<p>Configuration presets to use or extend for a self-hosted config.</p> Name Value type array subType string cli <code>--global-extends</code> env <code>RENOVATE_GLOBAL_EXTENDS</code> <p>Unlike the <code>extends</code> field, which is passed through unresolved to be part of repository config, any presets in <code>globalExtends</code> are resolved immediately as part of global config. Use the <code>globalExtends</code> field if your preset has any global-only configuration options, such as the list of repositories to run against.</p> <p>Use the <code>extends</code> field instead of this if, for example, you need the ability for a repository config (e.g. <code>renovate.json</code>) to be able to use <code>ignorePresets</code> for any preset defined in global config.</p> <p>Warning</p> <p><code>globalExtends</code> presets can't be private. When Renovate resolves <code>globalExtends</code> it does not fully process the configuration. This means that Renovate does not have the authentication it needs to fetch private things.</p>"},{"location":"self-hosted-configuration/#logcontext","title":"logContext","text":"<p>Add a global or per-repo log context to each log entry.</p> Name Value type string cli <code>--log-context</code> env <code>RENOVATE_LOG_CONTEXT</code> <p><code>logContext</code> is included with each log entry only if <code>logFormat=\"json\"</code> - it is not included in the pretty log output. If left as default (null), a random short ID will be selected.</p>"},{"location":"self-hosted-configuration/#logfile","title":"logFile","text":"<p>Log file path.</p> Name Value type string cli <code>--log-file</code> env <code>RENOVATE_LOG_FILE</code> default <code>null</code>"},{"location":"self-hosted-configuration/#logfilelevel","title":"logFileLevel","text":"<p>Set the log file log level.</p> Name Value type string default <code>\"debug\"</code> cli <code>--log-file-level</code> env <code>RENOVATE_LOG_FILE_LEVEL</code>"},{"location":"self-hosted-configuration/#migratepresets","title":"migratePresets","text":"<p>Define presets here which have been removed or renamed and should be migrated automatically.</p> Name Value type object additionalProperties [object Object] cli <code>--migrate-presets</code> env <code>RENOVATE_MIGRATE_PRESETS</code> <p>Use this if you have repositories that extend from a particular preset, which has now been renamed or removed. This is handy if you have a large number of repositories that all extend from a particular preset which you want to rename, without the hassle of manually updating every repository individually. Use an empty string to indicate that the preset should be ignored rather than replaced.</p> <p>Example:</p> <pre><code>modules.exports = {\nmigratePresets: {\n'@company': 'local&gt;org/renovate-config',\n},\n};\n</code></pre> <p>In the above example any reference to the <code>@company</code> preset will be replaced with <code>local&gt;org/renovate-config</code>.</p> <p>Tip</p> <p>Combine <code>migratePresets</code> with <code>configMigration</code> if you'd like your config migrated by PR.</p>"},{"location":"self-hosted-configuration/#onboarding","title":"onboarding","text":"<p>Require a Configuration PR first.</p> Name Value type boolean cli <code>--onboarding</code> env <code>RENOVATE_ONBOARDING</code> default <code>true</code> <p>Only set this to <code>false</code> if all three statements are true:</p> <ul> <li>You've configured Renovate entirely on the bot side (e.g. empty <code>renovate.json</code> in repositories)</li> <li>You want to run Renovate on every repository the bot has access to</li> <li>You want to skip all onboarding PRs</li> </ul>"},{"location":"self-hosted-configuration/#onboardingbranch","title":"onboardingBranch","text":"<p>Change this value to override the default onboarding branch name.</p> Name Value type string default <code>\"renovate/configure\"</code> env <code>RENOVATE_ONBOARDING_BRANCH</code> <p>Note</p> <p>This setting is independent of <code>branchPrefix</code>.</p> <p>For example, if you configure <code>branchPrefix</code> to be <code>renovate-</code> then you'd still have the onboarding PR created with branch <code>renovate/configure</code> until you configure <code>onboardingBranch=renovate-configure</code> or similar. If you have an existing Renovate installation and you change <code>onboardingBranch</code> then it's possible that you'll get onboarding PRs for repositories that had previously closed the onboarding PR unmerged.</p>"},{"location":"self-hosted-configuration/#onboardingcommitmessage","title":"onboardingCommitMessage","text":"<p>Change this value to override the default onboarding commit message.</p> Name Value type string env <code>RENOVATE_ONBOARDING_COMMIT_MESSAGE</code> <p>If <code>commitMessagePrefix</code> or <code>semanticCommits</code> values are set then they will be prepended to the commit message using the same logic that is used for adding them to non-onboarding commit messages.</p>"},{"location":"self-hosted-configuration/#onboardingconfig","title":"onboardingConfig","text":"<p>Configuration to use for onboarding PRs.</p> Name Value type object default <pre><code>{\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\"}\n</code></pre> mergeable true cli <code>--onboarding-config</code> env <code>RENOVATE_ONBOARDING_CONFIG</code>"},{"location":"self-hosted-configuration/#onboardingconfigfilename","title":"onboardingConfigFileName","text":"<p>Change this value to override the default onboarding config file name.</p> Name Value type string default <code>\"renovate.json\"</code> env <code>RENOVATE_ONBOARDING_CONFIG_FILE_NAME</code> <p>If set to one of the valid config file names, the onboarding PR will create a configuration file with the provided name instead of <code>renovate.json</code>. Falls back to <code>renovate.json</code> if the name provided is not valid.</p>"},{"location":"self-hosted-configuration/#onboardingnodeps","title":"onboardingNoDeps","text":"<p>Onboard the repository even if no dependencies are found.</p> Name Value type boolean default <code>false</code> cli <code>--onboarding-no-deps</code> env <code>RENOVATE_ONBOARDING_NO_DEPS</code> <p>Set this to <code>true</code> if you want Renovate to create an onboarding PR even if no dependencies are found. Otherwise, Renovate skips onboarding a repository if it finds no dependencies in it.</p>"},{"location":"self-hosted-configuration/#onboardingprtitle","title":"onboardingPrTitle","text":"<p>Change this value to override the default onboarding PR title.</p> Name Value type string default <code>\"Configure Renovate\"</code> env <code>RENOVATE_ONBOARDING_PR_TITLE</code> <p>Similarly to <code>onboardingBranch</code>, if you have an existing Renovate installation and you change <code>onboardingPrTitle</code> then it's possible that you'll get onboarding PRs for repositories that had previously closed the onboarding PR unmerged.</p>"},{"location":"self-hosted-configuration/#onboardingrebasecheckbox","title":"onboardingRebaseCheckbox","text":"<p>Set to enable rebase/retry markdown checkbox for onboarding PRs.</p> Name Value type boolean default <code>false</code> supportedPlatforms gitea, github, gitlab cli <code>--onboarding-rebase-checkbox</code> env <code>RENOVATE_ONBOARDING_REBASE_CHECKBOX</code> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.To track this feature visit the following GitHub issue #17633.</p>"},{"location":"self-hosted-configuration/#optimizefordisabled","title":"optimizeForDisabled","text":"<p>Set to <code>true</code> to perform a check for disabled config prior to cloning.</p> Name Value type boolean default <code>false</code> cli <code>--optimize-for-disabled</code> env <code>RENOVATE_OPTIMIZE_FOR_DISABLED</code> <p>When this option is <code>true</code>, Renovate will do the following during repository initialization:</p> <ul> <li>Attempt to fetch the default config file (<code>renovate.json</code>)</li> <li>Check if the file contains <code>\"enabled\": false</code></li> </ul> <p>If the file exists and the config is disabled, Renovate will skip the repo without cloning it. Otherwise, it will continue as normal.</p> <p>This option is only useful where the ratio of disabled repos is quite high. It costs one extra API call per repo but has the benefit of skipping cloning of those which are disabled.</p>"},{"location":"self-hosted-configuration/#password","title":"password","text":"<p>Password for authentication.</p> Name Value type string supportedPlatforms azure, bitbucket, bitbucket-server cli <code>--password</code> env <code>RENOVATE_PASSWORD</code> default <code>null</code>"},{"location":"self-hosted-configuration/#persistrepodata","title":"persistRepoData","text":"<p>If set to <code>true</code>: keep repository data between runs instead of deleting the data.</p> Name Value type boolean default <code>false</code> cli <code>--persist-repo-data</code> env <code>RENOVATE_PERSIST_REPO_DATA</code> <p>Set this to <code>true</code> if you want Renovate to persist repo data between runs. The intention is that this allows Renovate to do a faster <code>git fetch</code> between runs rather than <code>git clone</code>. It also may mean that ignored directories like <code>node_modules</code> can be preserved and save time on operations like <code>npm install</code>.</p>"},{"location":"self-hosted-configuration/#platform","title":"platform","text":"<p>Platform type of repository.</p> Name Value type string allowedValues azure, bitbucket, bitbucket-server, codecommit, gitea, github, gitlab default <code>\"github\"</code> cli <code>--platform</code> env <code>RENOVATE_PLATFORM</code>"},{"location":"self-hosted-configuration/#prcommitsperrunlimit","title":"prCommitsPerRunLimit","text":"<p>Set the maximum number of commits per Renovate run. By default there is no limit.</p> Name Value type integer default 0 cli <code>--pr-commits-per-run-limit</code> env <code>RENOVATE_PR_COMMITS_PER_RUN_LIMIT</code> <p>Parameter to reduce CI load. CI jobs are usually triggered by these events: pull-request creation, pull-request update, automerge events. Set as an integer. Default is no limit.</p>"},{"location":"self-hosted-configuration/#privatekey","title":"privateKey","text":"<p>Server-side private key.</p> Name Value type string replaceLineReturns true cli <code>--private-key</code> env <code>RENOVATE_PRIVATE_KEY</code> default <code>null</code> <p>This private key is used to decrypt config files.</p> <p>The corresponding public key can be used to create encrypted values for config files. If you want a simple UI to encrypt values you can put the public key in a HTML page similar to https://app.renovatebot.com/encrypt.</p> <p>To create the key pair with GPG use the following commands:</p> <ul> <li><code>gpg --full-generate-key</code> and follow the prompts to generate a key. Name and email are not important to Renovate, and do not configure a passphrase. Use a 4096bit key.</li> </ul> key generation log <pre><code>\u276f gpg --full-generate-key\ngpg (GnuPG) 2.2.24; Copyright (C) 2020 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n  (14) Existing key from card\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Renovate Bot\nEmail address: renovate@whitesourcesoftware.com\nComment:\nYou selected this USER-ID:\n    \"Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n\ngpg: key 0649CC3899F22A66 marked as ultimately trusted\ngpg: revocation certificate stored as '/Users/rhys/.gnupg/openpgp-revocs.d/794B820F34B34A8DF32AADB20649CC3899F22A66.rev'\npublic and secret key created and signed.\n\npub   rsa4096 2021-09-10 [SC]\n      794B820F34B34A8DF32AADB20649CEXAMPLEONLY\nuid                      Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\nsub   rsa4096 2021-09-10 [E]\n</code></pre> <ul> <li>Copy the key ID from the output (<code>794B820F34B34A8DF32AADB20649CEXAMPLEONLY</code> in the above example) or run <code>gpg --list-secret-keys</code> if you forgot to take a copy</li> <li>Run <code>gpg --armor --export-secret-keys YOUR_NEW_KEY_ID &gt; renovate-private-key.asc</code> to generate an armored (text-based) private key file</li> <li>Run <code>gpg --armor --export YOUR_NEW_KEY_ID &gt; renovate-public-key.asc</code> to generate an armored (text-based) public key file</li> </ul> <p>The private key should then be added to your Renovate Bot global config (either using <code>privateKeyPath</code> or exporting it to the <code>RENOVATE_PRIVATE_KEY</code> environment variable). The public key can be used to replace the existing key in https://app.renovatebot.com/encrypt for your own use.</p> <p>Any encrypted secrets using GPG must have a mandatory organization/group scope, and optionally can be scoped for a single repository only. The reason for this is to avoid \"replay\" attacks where someone could learn your encrypted secret and then reuse it in their own Renovate repositories. Instead, with scoped secrets it means that Renovate ensures that the organization and optionally repository values encrypted with the secret match against the running repository.</p> <p>Note</p> <p>Simple public key encryption was previously used to encrypt secrets, but this approach has been deprecated and is no longer documented.</p>"},{"location":"self-hosted-configuration/#privatekeyold","title":"privateKeyOld","text":"<p>Secondary or old private key to try.</p> Name Value type string replaceLineReturns true cli <code>--private-key-old</code> env <code>RENOVATE_PRIVATE_KEY_OLD</code> default <code>null</code> <p>Use this field if you need to perform a \"key rotation\" and support more than one keypair at a time. Decryption with this key will be tried after <code>privateKey</code>.</p> <p>If you are migrating from the legacy public key encryption approach to use GPG, then move your legacy private key from <code>privateKey</code> to <code>privateKeyOld</code> and then put your new GPG private key in <code>privateKey</code>. Doing so will mean that Renovate will first try to decrypt using the GPG key but fall back to the legacy key and try that next.</p> <p>You can remove the <code>privateKeyOld</code> config option once all the old encrypted values have been migrated, or if you no longer want to support the old key and let the processing of repositories fail.</p>"},{"location":"self-hosted-configuration/#privatekeypath","title":"privateKeyPath","text":"<p>Path to the Server-side private key.</p> Name Value type string cli <code>--private-key-path</code> env <code>RENOVATE_PRIVATE_KEY_PATH</code> default <code>null</code> <p>Used as an alternative to <code>privateKey</code>, if you want the key to be read from disk instead.</p>"},{"location":"self-hosted-configuration/#privatekeypathold","title":"privateKeyPathOld","text":"<p>Path to the Server-side old private key.</p> Name Value type string cli <code>--private-key-path-old</code> env <code>RENOVATE_PRIVATE_KEY_PATH_OLD</code> default <code>null</code> <p>Used as an alternative to <code>privateKeyOld</code>, if you want the key to be read from disk instead.</p>"},{"location":"self-hosted-configuration/#productlinks","title":"productLinks","text":"<p>Links which are used in PRs, issues and comments.</p> Name Value type object mergeable true default <pre><code>{\n\"documentation\": \"https://docs.renovatebot.com/\",\n\"help\": \"https://github.com/renovatebot/renovate/discussions\",\n\"homepage\": \"https://github.com/renovatebot/renovate\"\n}\n</code></pre> additionalProperties [object Object] cli <code>--product-links</code> env <code>RENOVATE_PRODUCT_LINKS</code> <p>Override this object if you want to change the URLs that Renovate links to, e.g. if you have an internal forum for asking for help.</p>"},{"location":"self-hosted-configuration/#redisurl","title":"redisUrl","text":"<p>If set, this Redis URL will be used for caching instead of the file system.</p> Name Value type string cli <code>--redis-url</code> env <code>RENOVATE_REDIS_URL</code> default <code>null</code> <p>If this value is set then Renovate will use Redis for its global cache instead of the local file system. The global cache is used to store lookup results (e.g. dependency versions and release notes) between repositories and runs. Example URL structure: <code>redis://[[username]:[password]]@localhost:6379/0</code>.</p>"},{"location":"self-hosted-configuration/#repositories","title":"repositories","text":"<p>List of Repositories.</p> Name Value type array subType string env <code>RENOVATE_REPOSITORIES</code> <p>Elements in the <code>repositories</code> array can be an object if you wish to define additional settings:</p> <pre><code>{\nrepositories: [{ repository: 'g/r1', bumpVersion: true }, 'g/r2'];\n}\n</code></pre>"},{"location":"self-hosted-configuration/#repositorycache","title":"repositoryCache","text":"<p>This option decides if Renovate uses a JSON cache to speed up extractions.</p> Name Value type string allowedValues disabled, enabled, reset default <code>\"disabled\"</code> cli <code>--repository-cache</code> env <code>RENOVATE_REPOSITORY_CACHE</code> <p>Set this to <code>\"enabled\"</code> to have Renovate maintain a JSON file cache per-repository to speed up extractions. Set to <code>\"reset\"</code> if you ever need to bypass the cache and have it overwritten. JSON files will be stored inside the <code>cacheDir</code> beside the existing file-based package cache.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#repositorycachetype","title":"repositoryCacheType","text":"<p>Set the type of renovate repository cache if <code>repositoryCache</code> is enabled.</p> Name Value type string default <code>\"local\"</code> cli <code>--repository-cache-type</code> env <code>RENOVATE_REPOSITORY_CACHE_TYPE</code> <p>Set this to an S3 URI to enable S3 backed repository cache.</p> <pre><code>{\nrepositoryCacheType: 's3://bucket-name';\n}\n</code></pre> <p>Note</p> <p>IAM is supported when running renovate within an EC2 instance in an ECS cluster. In this case, no additional environment variables are required. Otherwise, the following environment variables should be set for the S3 client to work.</p> <pre><code>    AWS_ACCESS_KEY_ID\n    AWS_SECRET_ACCESS_KEY\n    AWS_SESSION_TOKEN\n    AWS_REGION\n</code></pre> <p>Tip</p> <p>If you're storing the repository cache on Amazon S3 then you may set a folder hierarchy as part of <code>repositoryCacheType</code>. For example, <code>repositoryCacheType: 's3://bucket-name/dir1/.../dirN/'</code>.</p> <p>Note</p> <p>S3 repository is used as a repository cache (e.g. extracted dependencies) and not a lookup cache (e.g. available versions of dependencies). To keep the later remotely, define Redis URL.</p> <p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time.</p>"},{"location":"self-hosted-configuration/#requireconfig","title":"requireConfig","text":"<p>Controls Renovate's behavior regarding repository config files such as <code>renovate.json</code>.</p> Name Value type string default <code>\"required\"</code> allowedValues required, optional, ignored cli <code>--require-config</code> env <code>RENOVATE_REQUIRE_CONFIG</code> <p>By default, Renovate needs a Renovate config file in each repository where it runs before it will propose any dependency updates.</p> <p>You can choose any of these settings:</p> <ul> <li><code>\"required\"</code> (default): a repository config file must be present</li> <li><code>\"optional\"</code>: if a config file exists, Renovate will use it when it runs</li> <li><code>\"ignored\"</code>: config files in the repo will be ignored, and have no effect</li> </ul> <p>This feature is closely related to the <code>onboarding</code> config option. The combinations of <code>requireConfig</code> and <code>onboarding</code> are:</p> <code>onboarding=true</code> <code>onboarding=false</code> <code>requireConfig=required</code> An onboarding PR will be created if no config file exists. If the onboarding PR is closed and there's no config file, then the repository is skipped. Repository is skipped unless a config file is added manually. <code>requireConfig=optional</code> An onboarding PR will be created if no config file exists. If the onboarding PR is closed and there's no config file, the repository will be processed. Repository is processed regardless of config file presence. <code>requireConfig=ignored</code> No onboarding PR will be created and repo will be processed while ignoring any config file present. Repository is processed, any config file is ignored."},{"location":"self-hosted-configuration/#secrets","title":"secrets","text":"<p>Object which holds secret name/value pairs.</p> Name Value type object mergeable true additionalProperties [object Object] cli <code>--secrets</code> env <code>RENOVATE_SECRETS</code> <p>Secrets may be configured by a bot admin in <code>config.js</code>, which will then make them available for templating within repository configs. For example, to configure a <code>GOOGLE_TOKEN</code> to be accessible by all repositories:</p> <pre><code>module.exports = {\nsecrets: {\nGOOGLE_TOKEN: 'abc123',\n},\n};\n</code></pre> <p>They can also be configured per repository, e.g.</p> <pre><code>module.exports = {\nrepositories: [\n{\nrepository: 'abc/def',\nsecrets: {\nGOOGLE_TOKEN: 'abc123',\n},\n},\n],\n};\n</code></pre> <p>It could then be used in a repository config or preset like so:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"google.com\",\n\"token\": \"{{ secrets.GOOGLE_TOKEN }}\"\n}\n]\n}\n</code></pre> <p>Secret names must start with an upper or lower case character and can have only characters, digits, or underscores.</p>"},{"location":"self-hosted-configuration/#skipinstalls","title":"skipInstalls","text":"<p>Skip installing modules/dependencies if lock file updating is possible without a full install.</p> Name Value type boolean cli <code>--skip-installs</code> env <code>RENOVATE_SKIP_INSTALLS</code> default <code>null</code> <p>By default, Renovate will use the most efficient approach to updating package files and lock files, which in most cases skips the need to perform a full module install by the bot. If this is set to false, then a full install of modules will be done. This is currently applicable to <code>npm</code> and <code>lerna</code>/<code>npm</code> only, and only used in cases where bugs in <code>npm</code> result in incorrect lock files being updated.</p>"},{"location":"self-hosted-configuration/#token","title":"token","text":"<p>Repository Auth Token.</p> Name Value type string cli <code>--token</code> env <code>RENOVATE_TOKEN</code> default <code>null</code>"},{"location":"self-hosted-configuration/#unicodeemoji","title":"unicodeEmoji","text":"<p>Enable or disable Unicode emoji.</p> Name Value type boolean default <code>true</code> cli <code>--unicode-emoji</code> env <code>RENOVATE_UNICODE_EMOJI</code> <p>If enabled emoji shortcodes are replaced with their Unicode equivalents. For example: <code>:warning:</code> will be replaced with <code>\u26a0\ufe0f</code>.</p>"},{"location":"self-hosted-configuration/#username","title":"username","text":"<p>Username for authentication.</p> Name Value type string supportedPlatforms azure, bitbucket, bitbucket-server cli <code>--username</code> env <code>RENOVATE_USERNAME</code> default <code>null</code> <p>You may need to set a <code>username</code> if you:</p> <ul> <li>use the Bitbucket platform, or</li> <li>use the GitHub App with CLI (required)</li> </ul> <p>If you're using a Personal Access Token (PAT) to authenticate then you should not set a <code>username</code>.</p>"},{"location":"self-hosted-configuration/#writediscoveredrepos","title":"writeDiscoveredRepos","text":"<p>Writes discovered repositories to a JSON file and then exit.</p> Name Value type string cli <code>--write-discovered-repos</code> default <code>null</code> <p>By default, Renovate processes each repository that it finds. You can use this optional parameter so Renovate writes the discovered repositories to a JSON file and exits.</p> <p>Known use cases consist, among other things, of horizontal scaling setups. See Scaling Renovate Bot on self-hosted GitLab.</p> <p>Usage: <code>renovate --write-discovered-repos=/tmp/renovate-repos.json</code></p> <pre><code>[\"myOrg/myRepo\", \"myOrg/anotherRepo\"]\n</code></pre>"},{"location":"self-hosted-experimental/","title":"Self-hosted experimental environment variables","text":"<p>The following environment variables are \"experimental\" because they:</p> <ul> <li>are not commonly needed</li> <li>are typically an effort to work around some other service's or platform's problem</li> <li>can be removed at any time</li> <li>are variables for Renovate's internal use to validate they work as intended</li> </ul> <p>Experimental variables which are commonly used and for which there is no external solution in sight can be converted to an official configuration option by the Renovate bot developers.</p> <p>Use these experimental variables at your own risk. We do not follow Semantic Versioning for any experimental variables. These variables may be removed or have their behavior changed in any version. We will try to keep breakage to a minimum, but make no guarantees that an experimental variable will keep working.</p>"},{"location":"self-hosted-experimental/#renovate_cache_npm_minutes","title":"<code>RENOVATE_CACHE_NPM_MINUTES</code>","text":"<p>If set to any integer, Renovate will use this integer instead of the default npm cache time (15 minutes) for the npm datasource.</p>"},{"location":"self-hosted-experimental/#renovate_experimental_no_maven_pom_check","title":"<code>RENOVATE_EXPERIMENTAL_NO_MAVEN_POM_CHECK</code>","text":"<p>If set to any value, Renovate will skip its default artifacts filter check in the Maven datasource. Skipping the check will speed things up, but may result in versions being returned which don't properly exist on the server.</p>"},{"location":"self-hosted-experimental/#renovate_paginate_all","title":"<code>RENOVATE_PAGINATE_ALL</code>","text":"<p>If set to any value, Renovate will always paginate requests to GitHub fully, instead of stopping after 10 pages.</p>"},{"location":"self-hosted-experimental/#renovate_reuse_package_lock","title":"<code>RENOVATE_REUSE_PACKAGE_LOCK</code>","text":"<p>If set to \"false\" (string), Renovate will remove any existing <code>package-lock.json</code> before trying to update it.</p>"},{"location":"self-hosted-experimental/#renovate_user_agent","title":"<code>RENOVATE_USER_AGENT</code>","text":"<p>If set to any string, Renovate will use this as the <code>user-agent</code> it sends with HTTP requests.</p>"},{"location":"self-hosted-experimental/#renovate_x_hard_exit","title":"<code>RENOVATE_X_HARD_EXIT</code>","text":"<p>If set to any value, Renovate will use a \"hard\" <code>process.exit()</code> once all work is done, even if a sub-process is otherwise delaying Node.js from exiting. See issue 8660 for background on why this was created.</p>"},{"location":"self-hosted-experimental/#renovate_x_ignore_node_warn","title":"<code>RENOVATE_X_IGNORE_NODE_WARN</code>","text":"<p>Suppress the default warning when a deprecated version of Node.js is used to run Renovate.</p>"},{"location":"self-hosted-experimental/#renovate_x_ignore_re2","title":"<code>RENOVATE_X_IGNORE_RE2</code>","text":"<p>Skip initializing <code>RE2</code> for regular expressions and instead use Node-native <code>RegExp</code> instead.</p>"},{"location":"self-hosted-experimental/#renovate_x_platform_version","title":"<code>RENOVATE_X_PLATFORM_VERSION</code>","text":"<p>If set, Renovate will use this string as GitLab server version instead of checking via the GitLab API. This can be useful when you use the GitLab <code>CI_JOB_TOKEN</code> to authenticate Renovate.</p> <p>Read platform details to learn why we need the server version on GitLab.</p>"},{"location":"self-hosted-experimental/#renovate_x_s3_endpoint","title":"<code>RENOVATE_X_S3_ENDPOINT</code>","text":"<p>If set, Renovate will use this string as the <code>endpoint</code> when instantiating the AWS S3 client.</p>"},{"location":"self-hosted-experimental/#renovate_x_s3_path_style","title":"<code>RENOVATE_X_S3_PATH_STYLE</code>","text":"<p>If set, Renovate will enable <code>forcePathStyle</code> when instantiating the AWS S3 client.</p> <p>Whether to force path style URLs for S3 objects (e.g., <code>https://s3.amazonaws.com//</code> instead of <code>https://.s3.amazonaws.com/</code>)</p> <p>Source: AWS S3 documentation - Interface BucketEndpointInputConfig</p>"},{"location":"self-hosted-experimental/#renovate_x_exec_gpid_handle","title":"<code>RENOVATE_X_EXEC_GPID_HANDLE</code>","text":"<p>If set, Renovate will terminate the whole process group of a terminated child process spawned by Renovate.</p>"},{"location":"self-hosted-experimental/#renovate_x_match_package_names_more","title":"<code>RENOVATE_X_MATCH_PACKAGE_NAMES_MORE</code>","text":"<p>If set, you'll get the following behavior.</p> <p>When using <code>matchPackageNames</code> and <code>matchPackagePatterns</code> matchers:</p> <ol> <li>Renovate first tries to match against <code>depName</code></li> <li>If <code>depName</code> doesn't match then Renovate tries to match against <code>packageName</code></li> </ol>"},{"location":"self-hosted-experimental/#renovate_x_merge_confidence_api_base_url","title":"<code>RENOVATE_X_MERGE_CONFIDENCE_API_BASE_URL</code>","text":"<p>If set, Renovate will query this API for Merge Confidence data. This feature is in private beta.</p>"},{"location":"self-hosted-experimental/#renovate_x_autodiscover_repo_sort","title":"<code>RENOVATE_X_AUTODISCOVER_REPO_SORT</code>","text":"<p>Note</p> <p>For the Forgejo and Gitea platform only.</p> <p>The sort method for autodiscover server side repository search.</p> <p>Allowed values:</p> <ul> <li><code>alpha</code></li> <li><code>created</code></li> <li><code>updated</code></li> <li><code>size</code></li> <li><code>id</code></li> </ul> <p>Default value: <code>alpha</code>.</p>"},{"location":"self-hosted-experimental/#renovate_x_autodiscover_repo_order","title":"<code>RENOVATE_X_AUTODISCOVER_REPO_ORDER</code>","text":"<p>Note</p> <p>For the Forgejo and Gitea platform only.</p> <p>The order method for autodiscover server side repository search.</p> <p>Allowed values:</p> <ul> <li><code>asc</code></li> <li><code>desc</code></li> </ul> <p>Default value: <code>asc</code>.</p>"},{"location":"self-hosted-experimental/#renovate_x_rebase_pagination_links","title":"<code>RENOVATE_X_REBASE_PAGINATION_LINKS</code>","text":"<p>If set, Renovate will rewrite GitHub Enterprise Server's pagination responses to use the <code>endpoint</code> URL from the Renovate config.</p> <p>Note</p> <p>For the GitHub Enterprise Server platform only.</p>"},{"location":"self-hosted-experimental/#otel_exporter_otlp_endpoint","title":"<code>OTEL_EXPORTER_OTLP_ENDPOINT</code>","text":"<p>If set, Renovate will export OpenTelemetry data to the supplied endpoint. For more information see the OpenTelemetry docs.</p>"},{"location":"semantic-commits/","title":"Semantic Commit messages","text":"<p>Renovate looks at the last 10 commit messages in the base branch to decide if the repository uses semantic commits. If there are semantic commits, Renovate uses the conventional-commits-detector to decide what convention the commit messages follow.</p> <p>Renovate only finds Angular-style conventional commits, it ignores other commit conventions.</p> <p>When Renovate finds Angular-style commits, Renovate creates commit messages and PR titles like this:</p> <ul> <li>chore(deps): update eslint to v7.30.0</li> </ul> <p>By default, Renovate uses the <code>chore</code> prefix.</p> <p>If you extend from <code>config:base</code> then Renovate:</p> <ul> <li>still defaults to the <code>chore</code> prefix</li> <li>uses the <code>fix</code> prefix for npm production dependencies</li> <li>uses the <code>chore</code> prefix for npm development dependencies (<code>devDependencies</code>)</li> </ul>"},{"location":"semantic-commits/#manually-enabling-or-disabling-semantic-commits","title":"Manually enabling or disabling semantic commits","text":"<p>You can override the default settings, and disable or enable semantic commits.</p> <p>If you want Renovate to use semantic commits: add <code>\":semanticCommits\"</code> to your <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\":semanticCommits\"]\n}\n</code></pre> <p>If you want Renovate to stop using semantic commits: add <code>\":semanticCommitsDisabled\"</code> to your <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\":semanticCommitsDisabled\"]\n}\n</code></pre>"},{"location":"semantic-commits/#changing-the-semantic-commit-type","title":"Changing the Semantic Commit type","text":"<p>You can change the Semantic Commit type that Renovate uses. For example:</p> <ul> <li>If you want Renovate to use the \"chore\" type for every PR, add <code>\":semanticCommitTypeAll(chore)\"</code> to your <code>extends</code> array:</li> </ul> <pre><code>{\n\"extends\": [\":semanticCommitTypeAll(chore)\"]\n}\n</code></pre> <p>PR titles and commit messages start with <code>chore(deps):</code>.</p> <ul> <li>If you want Renovate to use the \"ci\" type for every PR, add <code>\":semanticCommitTypeAll(ci)\"</code> to your <code>extends</code> array:</li> </ul> <pre><code>{\n\"extends\": [\":semanticCommitTypeAll(ci)\"]\n}\n</code></pre> <p>PR titles and commit messages start with <code>ci(deps):</code>.</p>"},{"location":"semantic-commits/#changing-the-semantic-commit-scope","title":"Changing the Semantic Commit scope","text":"<p>You can set your own word for the scope if you don't like the default \"deps\" scope. For example, to set the scope to \"package\", add the preset <code>\":semanticCommitScope(package)\"</code> to your <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\":semanticCommitScope(package)\"]\n}\n</code></pre> <p>To remove the semantic commit scope, so Renovate uses <code>chore:</code> instead of <code>chore(deps):</code>, add the <code>\":semanticCommitScopeDisabled\"</code> preset to your <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\":semanticCommitScopeDisabled\"]\n}\n</code></pre>"},{"location":"templates/","title":"Template fields","text":"<p>In order to provide flexible configuration, Renovate supports using \"templates\" for certain fields like <code>addLabels</code>, <code>branchName</code>, <code>extractVersionTemplate</code>, <code>labels</code>.</p> <p>Renovate's templates use handlebars under the hood. You can recognize templates when you see strings like <code>{{depName}}</code> in configuration fields.</p> <p>Below you can find lists of fields/values that you can use in templates. Some are configuration options passed through, while others are generated as part of Renovate's run.</p> <p><code>logJSON</code> and <code>releases</code> are only allowed in <code>commitBody</code> template.</p>"},{"location":"templates/#exposed-config-options","title":"Exposed config options","text":"<p>The following configuration options are passed through for templating: additionalBranchPrefix, addLabels, branchName, branchPrefix, branchTopic, commitBody, commitMessage, commitMessageAction, commitMessageExtra, commitMessagePrefix, commitMessageSuffix, commitMessageTopic, gitAuthor, group, groupName, groupSlug, labels, prBodyColumns, prBodyDefinitions, prBodyNotes, prTitle, semanticCommitScope, semanticCommitType, separateMajorMinor, separateMinorPatch.</p>"},{"location":"templates/#other-available-fields","title":"Other available fields","text":"<p>The following runtime values are passed through for templating: </p> <ul> <li><code>baseBranch</code>: The baseBranch for this branch/PR</li> <li><code>body</code>: The body of the release notes</li> <li><code>currentValue</code>: The extracted current value of the dependency being updated</li> <li><code>currentVersion</code>: The version that would be currently installed. For example, if currentValue is ^3.0.0 then currentVersion might be 3.1.0.</li> <li><code>currentDigest</code>: The extracted current digest of the dependency being updated</li> <li><code>currentDigestShort</code>: The extracted current short digest of the dependency being updated</li> <li><code>datasource</code>: The datasource used to look up the upgrade</li> <li><code>depName</code>: The name of the dependency being updated</li> <li><code>depNameLinked</code>: The dependency name already linked to its home page using markdown</li> <li><code>depNameSanitized</code>: The depName field sanitized for use in branches after removing spaces and special characters</li> <li><code>depType</code>: The dependency type (if extracted - manager-dependent)</li> <li><code>displayFrom</code>: The current value, formatted for display</li> <li><code>displayPending</code>: Latest pending update, if internalChecksFilter is in use</li> <li><code>displayTo</code>: The to value, formatted for display</li> <li><code>hasReleaseNotes</code>: true if the upgrade has release notes</li> <li><code>indentation</code>: The indentation of the dependency being updated</li> <li><code>isLockfileUpdate</code>: true if the branch is a lock file update</li> <li><code>isMajor</code>: true if the upgrade is major</li> <li><code>isPatch</code>: true if the upgrade is a patch upgrade</li> <li><code>isPin</code>: true if the upgrade is pinning dependencies</li> <li><code>isPinDigest</code>: true if the upgrade is pinning digests</li> <li><code>isRollback</code>: true if the upgrade is a rollback PR</li> <li><code>isReplacement</code>: true if the upgrade is a replacement</li> <li><code>isRange</code>: true if the new value is a range</li> <li><code>isSingleVersion</code>: true if the upgrade is to a single version rather than a range</li> <li><code>logJSON</code>: ChangeLogResult object for the upgrade</li> <li><code>manager</code>: The (package) manager which detected the dependency</li> <li><code>newDigest</code>: The new digest value</li> <li><code>newDigestShort</code>: A shorted version of newDigest, for use when the full digest is too long to be conveniently displayed</li> <li><code>newMajor</code>: The major version of the new version. e.g. \"3\" if the new version if \"3.1.0\"</li> <li><code>newMinor</code>: The minor version of the new version. e.g. \"1\" if the new version if \"3.1.0\"</li> <li><code>newName</code>: The name of the new dependency that replaces the current deprecated dependency</li> <li><code>newValue</code>: The new value in the upgrade. Can be a range or version e.g. \"^3.0.0\" or \"3.1.0\"</li> <li><code>newVersion</code>: The new version in the upgrade, e.g. \"3.1.0\"</li> <li><code>packageFile</code>: The filename that the dependency was found in</li> <li><code>packageFileDir</code>: The directory with full path where the packageFile was found</li> <li><code>packageName</code>: The full name that was used to look up the dependency</li> <li><code>parentDir</code>: The name of the directory that the dependency was found in, without full path</li> <li><code>platform</code>: VCS platform in use, e.g. \"github\", \"gitlab\", etc.</li> <li><code>prettyDepType</code>: Massaged depType</li> <li><code>prettyNewMajor</code>: The new major value with v prepended to it.</li> <li><code>prettyNewVersion</code>: The new version value with v prepended to it.</li> <li><code>project</code>: ChangeLogProject object</li> <li><code>recreateClosed</code>: If true, this PR will be recreated if closed</li> <li><code>references</code>: A list of references for the upgrade</li> <li><code>releases</code>: An array of releases for an upgrade</li> <li><code>releaseNotes</code>: A ChangeLogNotes object for the release</li> <li><code>repository</code>: The current repository</li> <li><code>semanticPrefix</code>: The fully generated semantic prefix for commit messages</li> <li><code>sourceRepo</code>: The repository in the sourceUrl, if present</li> <li><code>sourceRepoName</code>: The repository name in the sourceUrl, if present</li> <li><code>sourceRepoOrg</code>: The repository organization in the sourceUrl, if present</li> <li><code>sourceRepoSlug</code>: The slugified pathname of the sourceUrl, if present</li> <li><code>sourceUrl</code>: The source URL for the package</li> <li><code>updateType</code>: One of digest, pin, rollback, patch, minor, major, replacement, pinDigest</li> <li><code>upgrades</code>: An array of upgrade objects in the branch</li> <li><code>url</code>: The url of the release notes</li> <li><code>version</code>: The version number of the changelog</li> <li><code>versioning</code>: The versioning scheme in use</li> <li><code>versions</code>: An array of ChangeLogRelease objects in the upgrade</li> </ul>"},{"location":"templates/#additional-handlebars-helpers","title":"Additional Handlebars helpers","text":""},{"location":"templates/#stringtoprettyjson","title":"stringToPrettyJSON","text":"<p>If you want to print pretty JSON with Handlebars you can use the built-in function <code>stringToPrettyJSON</code> like this:</p> <p><code>{{{stringToPrettyJSON myvar}}}</code></p> <p>In the example above <code>myvar</code> is a variable/field, that has valid JSON.</p>"},{"location":"templates/#encodeuricomponent","title":"encodeURIComponent","text":"<p>If you want to convert a string to a valid URI, use the built-in function <code>encodeURIComponent</code> like this:</p> <p><code>{{{encodeURIComponent baseDir}}}</code></p> <p>In the example above <code>baseDir</code> is the string you want to transform into a valid URI.</p> <p>Read the MDN Web Docs, encodeURIComponent() to learn more.</p>"},{"location":"templates/#decodeuricomponent","title":"decodeURIComponent","text":"<p>If you want to decode a percent-encoded string, use the built-in function <code>decodeURIComponent</code> like this:</p> <p><code>{{{decodeURIComponent depName}}}</code></p> <p>In the example above <code>depName</code> is the string you want to decode.</p> <p>Read the MDN Web Docs, decodeURIComponent() to learn more.</p>"},{"location":"templates/#replace","title":"replace","text":"<p>The <code>replace</code> helper replaces all found strings with the replacement string. If you want to replace some characters in a string, use the built-in function <code>replace</code> like this:</p> <p><code>{{{replace 'github.com' 'ghc' depName}}}</code></p> <p>In the example above all matches of <code>github.com</code> will be replaced by <code>ghc</code> in <code>depName</code>.</p> <p>Read the MDN Web Docs, String.prototype.replace() to learn more.</p>"},{"location":"templates/#lowercase","title":"lowercase","text":"<p>The <code>lowercase</code> helper converts a given string to lower case.</p> <p><code>{{{ lowercase depName }}}</code></p>"},{"location":"templates/#containsstring","title":"containsString","text":"<p>Returns <code>true</code> if a given string is a substring.</p> <p><code>{{#if (containsString depName 'python')}}Python{{else}}Other{{/if}}</code></p>"},{"location":"templates/#equals","title":"equals","text":"<p>Returns <code>true</code> if two values equals (checks strict equality, i.e. <code>===</code>).</p> <p><code>{{#if (equals datasource 'git-refs')}}git-refs{{else}}Other{{/if}}</code></p>"},{"location":"templates/#and","title":"and","text":"<p>Returns <code>true</code> only if all expressions are <code>true</code>.</p> <p><code>{{#if (and isMajor hasReleaseNotes)}}Backwards Incompatible release! Check out the Release notes.{{/if}}</code></p> <p>In the example above, it will only show a text if <code>isMajor=true</code> and <code>hasReleaseNotes=true</code>.</p>"},{"location":"templates/#or","title":"or","text":"<p>Returns <code>true</code> if at least one expression is <code>true</code>.</p> <p><code>{{#if (or isPatch isSingleVersion}}Small update, safer to merge and release.{{else}}Check out the changelog for all versions before merging!{{/if}}</code></p>"},{"location":"templates/#environment-variables","title":"Environment variables","text":"<p>By default, you can only access a handful of basic environment variables like <code>HOME</code> or <code>PATH</code>. This is for security reasons.</p> <p><code>HOME is {{env.HOME}}</code></p> <p>If you're self-hosting Renovate, you can expose additional variables with the <code>customEnvVariables</code> config option.</p> <p>You can also use the <code>exposeAllEnv</code> config option to allow all environment variables in templates, but make sure to consider the security implications of giving the scripts unrestricted access to all variables.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Renovate","text":"<p>Learn how to troubleshoot problems with Renovate, where to find the logging output, and how to get help if needed.</p>"},{"location":"troubleshooting/#getting-the-logs","title":"Getting the logs","text":"<p>Renovate's debug-level logs are usually enough to help troubleshoot most problems. Where you can find the logs depends on how you're running Renovate.</p>"},{"location":"troubleshooting/#github-hosted-app","title":"GitHub Hosted app","text":"<p>Each pull request from Renovate has a link to the Mend Renovate Dashboard in the PR body text.</p> <p>The text you're looking for is:</p> <p>This PR has been generated by Mend Renovate. View repository job log here.</p> <p>Select the blue text \"here\" to go to the Mend Renovate App Dashboard. Sign in with your GitHub or GitLab account. Once you're logged in, you can see the logs for the Renovate jobs on your repository. You should have access to any repository which you have write access to and which has Renovate installed.</p> <p>Renovate only makes logs for the last 3 days available.</p> <p>After selecting a recent job, you can select the debug level that you care about. For a full overview, select the <code>DEBUG</code> log level.</p>"},{"location":"troubleshooting/#self-hosted","title":"Self-hosted","text":"<p>The easiest way to gather logs from Renovate for any platform is to use the default logging to <code>stdout</code>/console. By default, Renovate will log in a human-readable format at <code>INFO</code> level.</p> <p>For troubleshooting it's recommended to increase logging to <code>DEBUG</code> level by adding <code>LOG_LEVEL=debug</code> to your environment variables before invoking Renovate.</p> <p>If your Renovate logs are being processed by a log service before you access them, you may find it better to have Renovate output logs in JSON format instead so that they can be reliably parsed and filtered. This can be achieved by adding <code>LOG_FORMAT=json</code> to your environment variables before invoking Renovate.</p>"},{"location":"troubleshooting/#log-debug-levels","title":"Log debug levels","text":"<p>There are different severity levels for the log output. From least severe to most severe:</p> <ul> <li><code>DEBUG</code></li> <li><code>INFO</code></li> <li><code>WARN</code></li> <li><code>ERROR</code></li> <li><code>FATAL</code></li> </ul> <p>To check for problems, look for <code>WARN</code> or <code>ERROR</code> logs (level 40 or 50 if in JSON format). To troubleshoot further, you usually need to look at <code>DEBUG</code> logs.</p>"},{"location":"troubleshooting/#resolving-problems-using-logs","title":"Resolving problems using logs","text":"<p>We recommend you follow this process:</p> <ol> <li>Try to narrow in on the problem area e.g. by looking for relevant branches or <code>WARN</code> or <code>ERROR</code> messages</li> <li>Find all relevant <code>DEBUG</code> or <code>INFO</code> messages from before and after the problem occurred</li> <li>Copy/paste the relevant parts of the logs into your discussion post or bug report</li> </ol> <p>If you cannot fix the problem yourself after reading the logs, and reading - or searching through - our documentation, search the <code>renovatebot/renovate</code> discussion forum to see if somebody has asked a similar or related question.</p> <p>If none of these steps have helped you, then create a new discussion post to get help from the Renovate maintainers.</p> <p>Please locate the relevant parts of the logs as described earlier before asking for help or posting a bug report. Do not expect the Renovate maintainers to read through the full logs when trying to help you, as that takes a lot of time on our part. If later it turns out that the full logs are necessary, you will be asked for them then.</p>"},{"location":"updating-rebasing/","title":"Updating and rebasing branches","text":"<p>There are many situations in which Renovate must update/rebase a branch.</p> <p>Here is a list of the most common cases where Renovate must update/rebase the branch:</p> <ul> <li>When a pull request has conflicts due to changes on the base branch</li> <li>When you have enabled \"Require branches to be up to date before merging\" on GitHub</li> <li>When you have manually told Renovate to rebase when behind the base branch with <code>\"rebaseWhen\": \"behind-base-branch\"</code></li> <li>When a newer version of the dependency is released</li> <li>When you request a manual rebase from the Renovate bot</li> <li>When you use <code>\"automerge\": true</code> and <code>\"rebaseWhen\": \"auto\"</code> on a branch / pr</li> </ul> <p>Renovate uses its own version of \"rebasing\", which is not the same as doing a <code>git rebase</code> with Git. Instead, Renovate reapplies all updates into a new commit based off of the head of the base branch.</p>"},{"location":"updating-rebasing/#no-rebasing-if-you-have-made-edits","title":"No rebasing if you have made edits","text":"<p>First of all, here is the one time when Renovate won't update branches. If you edit a Renovate branch directly (e.g. to make a code fix to allow tests to pass again) then Renovate stops all updates of that branch. It is up to you to either finish the job and merge the PR, or rename it and close it so that Renovate can take back over again.</p>"},{"location":"updating-rebasing/#rebasing-conflicted-prs","title":"Rebasing conflicted PRs","text":"<p>If new commits to the base branch - such as merging another Renovate PR - result in an open Renovate PR having merge conflicts, then Renovate will recreate (\"rebase\") any conflicted PRs. This applies both to commits to dependency files such as <code>package.json</code> as well as lock files such as <code>yarn.lock</code>. You should not ever need to resolve such conflicts manually. You can disable this functionality by configuring <code>\"rebaseWhen\": \"never\"</code> (not recommended).</p>"},{"location":"updating-rebasing/#rebasing-out-of-date-branches","title":"Rebasing out-of-date branches","text":"<p>There are multiple cases where Renovate will rebase its branches off the base branch every time they are out of date:</p> <ol> <li>If you configure <code>\"rebaseWhen\": \"behind-base-branch\"</code></li> <li>If you use the default configuration <code>\"rebaseWhen\": \"auto\"</code> and the repository has a requirement that branches must be up-to-date before merging (e.g. \"Require branches to be up to date before merging\" on GitHub, or fast-forward-only settings on Bitbucket Server or GitLab)</li> <li>If you use the default configuration <code>\"rebaseWhen\" : \"auto\"</code> and configure <code>\"automerge\" : true</code></li> </ol> <p>In that case Renovate PRs will be rebased off the repository's base branch whenever they are behind the base branch, even if the PRs are not conflicted.</p>"},{"location":"updating-rebasing/#newer-dependency-versions","title":"Newer dependency versions","text":"<p>If an existing PR is open to upgrade dependency \"foo\" to v1.1.0 and then v1.1.1 is released, then Renovate will regenerate the branch again. This way:</p> <ul> <li>Each Renovate branch will always have 1 and only 1 commit</li> <li>The newest version will be based off the latest base branch commit at the time</li> </ul>"},{"location":"updating-rebasing/#manual-rebasing","title":"Manual rebasing","text":"<p>You can request that Renovate rebase a PR by selecting the rebase/retry checkbox on GitHub or GitLab. Or you can add a \"rebase\" label to the PR. The label name is configurable via the <code>rebaseLabel</code> option.</p> <p>If you apply a rebase label then Renovate will regenerate its commit for the branch, even if the branch has been modified. The rebase label is useful in situations like:</p> <ul> <li>If a branch is behind the base branch but you don't have <code>rebaseWhen=behind-base-branch</code> enabled</li> <li>If a branch has been edited and you want to discard the edits and have Renovate create it again</li> <li>If a branch was created with an error (e.g. lockfile generation) and you want Renovate to try again</li> </ul>"},{"location":"examples/opentelemetry/","title":"OpenTelemetry","text":"<p>Requirements:</p> <ul> <li>docker-compose</li> </ul>"},{"location":"examples/opentelemetry/#prepare-setup","title":"Prepare setup","text":"<p>Create a <code>docker-compose.yaml</code> and <code>otel-collector-config.yml</code> file as seen below in a folder.</p> <p><code>docker-compose.yaml</code>:</p> <pre><code>version: '3'\nservices:\n# Jaeger\njaeger:\nimage: jaegertracing/all-in-one:1\nports:\n- '16686:16686'\n- '14250'\n\notel-collector:\nimage: otel/opentelemetry-collector-contrib:0.52.0\ncommand: ['--config=/etc/otel-collector-config.yml']\nvolumes:\n- ./otel-collector-config.yml:/etc/otel-collector-config.yml\nports:\n- '1888:1888' # pprof extension\n- '13133:13133' # health_check extension\n- '55679:55679' # zpages extension\n- '4318:4318' # OTLP HTTP\n- '4317:4317' # OTLP GRPC\n- '9123:9123' # Prometheus exporter\ndepends_on:\n- jaeger\n</code></pre> <p><code>otel-collector-config.yml</code>:</p> <pre><code>receivers:\notlp:\nprotocols:\ngrpc:\nhttp:\n\nexporters:\njaeger:\nendpoint: jaeger:14250\ntls:\ninsecure: true\nlogging:\nprometheus:\nendpoint: '0.0.0.0:9123'\n\nprocessors:\nbatch:\nspanmetrics:\nmetrics_exporter: prometheus\nlatency_histogram_buckets: [10ms, 100ms, 250ms, 1s, 30s, 1m, 5m]\ndimensions:\n- name: http.method\n- name: http.status_code\n- name: http.host\ndimensions_cache_size: 1000\naggregation_temporality: 'AGGREGATION_TEMPORALITY_CUMULATIVE'\n\nextensions:\nhealth_check:\npprof:\nzpages:\n\nservice:\nextensions: [pprof, zpages, health_check]\npipelines:\ntraces:\nreceivers: [otlp]\nexporters: [jaeger, logging]\nprocessors: [spanmetrics, batch]\n\nmetrics:\nreceivers: [otlp]\nexporters: [prometheus]\n</code></pre> <p>Start setup using this command inside the folder containing the files created in the earlier steps:</p> <pre><code>docker-compose up\n</code></pre> <p>This command will start an OpenTelemetry Collector and an instance of Jaeger.</p> <p>Jaeger will be now reachable under http://localhost:16686.</p>"},{"location":"examples/opentelemetry/#run-renovate-with-opentelemetry","title":"Run Renovate with OpenTelemetry","text":"<p>To start Renovate with OpenTelemetry enabled run following command, after pointing to your <code>config.js</code> config file:</p> <pre><code>docker run \\\n  --rm \\\n  -e OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\n  -v \"/path/to/your/config.js:/usr/src/app/config.js\" \\\n  renovate/renovate:latest\n</code></pre> <p>You should now see <code>trace_id</code> and <code>span_id</code> fields in the logs.</p> <pre><code> INFO: Repository finished (repository=org/example)\n       \"durationMs\": 5574,\n       \"trace_id\": \"f9a4c33852333fc2a0fbdc163100c987\",\n       \"span_id\": \"4ac1323eeaee\n</code></pre>"},{"location":"examples/opentelemetry/#traces","title":"Traces","text":"<p>Open now Jaeger under http://localhost:16686.</p> <p>You should now be able to pick <code>renovate</code> under in the field <code>service</code> field.</p> <p></p> <p>Select <code>Find Traces</code> to search for all Renovate traces and then select one of the found traces to open the trace view.</p> <p></p> <p>You should be able to see now the full trace view which shows each HTTP request and internal spans.</p> <p></p>"},{"location":"examples/opentelemetry/#metrics","title":"Metrics","text":"<p>Additional to the received traces some metrics are calculated. This is achieved using the spanmetricsprocessor. The previous implemented setup will produce following metrics, which are exposed under http://localhost:9123/metrics:</p> <pre><code># HELP calls_total\n# TYPE calls_total counter\n\n### Example of internal spans\ncalls_total{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 3\ncalls_total{operation=\"run\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 1\n### Example of http calls from Renovate to external services\ncalls_total{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\"} 9\n\n...\n\n# HELP latency\n# TYPE latency histogram\n### Example of internal spans\nlatency_bucket{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\",le=\"0.1\"} 0\n...\nlatency_bucket{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\",le=\"9.223372036854775e+12\"} 3\nlatency_bucket{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\",le=\"+Inf\"} 3\nlatency_sum{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 30947.4689\nlatency_count{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 3\n\n...\n\n### Example of http calls from Renovate to external services\nlatency_bucket{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\",le=\"0.1\"} 0\n...\nlatency_bucket{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\",le=\"250\"} 3\nlatency_bucket{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\",le=\"9.223372036854775e+12\"} 9\nlatency_bucket{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\",le=\"+Inf\"} 9\nlatency_sum{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\"} 2306.1385999999998\nlatency_count{http_host=\"api.github.com:443\",http_method=\"POST\",http_status_code=\"200\",operation=\"HTTPS POST\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\"} 9\n</code></pre> <p>The spanmetricsprocessor creates two sets of metrics.</p>"},{"location":"examples/opentelemetry/#calls-metric","title":"Calls metric","text":"<p>At first there are the <code>calls_total</code> metrics which display how often specific trace spans have been observed.</p> <p>For example: <code>calls_total{operation=\"renovate repository\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 3</code> signals that 3 repositories have been renovated. <code>calls_total{operation=\"run\",service_name=\"renovate\",span_kind=\"SPAN_KIND_INTERNAL\",status_code=\"STATUS_CODE_UNSET\"} 1</code> represents how often Renovate has been run.</p> <p>If we combine this using the PrometheusQueryLanguage ( PromQL ), we can calculate the average count of repositories each Renovate run handles.</p> <pre><code>calls_total{operation=\"renovate repository\",service_name=\"renovate\"} / calls_total{operation=\"run\",service_name=\"renovate\"}\n</code></pre> <p>This metrics is also for spans generated by http calls:</p> <pre><code>calls_total{http_host=\"registry.terraform.io:443\",http_method=\"GET\",http_status_code=\"200\",operation=\"HTTPS GET\",service_name=\"renovate\",span_kind=\"SPAN_KIND_CLIENT\",status_code=\"STATUS_CODE_UNSET\"} 5\n</code></pre>"},{"location":"examples/opentelemetry/#latency-buckets","title":"Latency buckets","text":"<p>The second class of metrics exposed are the latency focused latency buckets which allow to create heatmaps. A request is added to a backed if the latency is bigger than the bucket value (<code>le</code>). <code>request_duration =&gt; le</code></p> <p>As an example if we receive a request which need <code>1.533s</code> to complete get following metrics:</p> <pre><code>latency_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\nlatency_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\nlatency_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"10\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"100\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"250\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 1\nlatency_sum{http_host=\"api.github.com:443\"} 1.533\nlatency_count{http_host=\"api.github.com:443\"} 1\n</code></pre> <p>Now we have another request which this time takes 10s to complete:</p> <pre><code>latency_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\nlatency_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\nlatency_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\nlatency_bucket{http_host=\"api.github.com:443\",le=\"10\"} 2\nlatency_bucket{http_host=\"api.github.com:443\",le=\"100\"} 2\nlatency_bucket{http_host=\"api.github.com:443\",le=\"250\"} 2\nlatency_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 2\nlatency_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 2\nlatency_sum{http_host=\"api.github.com:443\"} 11.533\nlatency_count{http_host=\"api.github.com:443\"} 2\n</code></pre> <p>More about the functionality can be found on the Prometheus page for metric types.</p>"},{"location":"examples/self-hosting/","title":"Self-Hosting Examples","text":""},{"location":"examples/self-hosting/#installing-renovate-oss-cli","title":"Installing Renovate OSS CLI","text":""},{"location":"examples/self-hosting/#npmjs","title":"npmjs","text":"<pre><code>npm install -g renovate\n</code></pre> <p>Renovate does not embed <code>npm</code>, <code>pnpm</code> and <code>yarn</code> as its own dependencies. If you want to use these package managers to update your lockfiles, you must ensure that the correct versions are installed globally.</p> <pre><code>npm install -g yarn pnpm\n</code></pre> <p>The same goes for any other third-party binary tool like <code>gradle</code> or <code>poetry</code> - you need to make sure it is installed and the correct version before running Renovate.</p>"},{"location":"examples/self-hosting/#docker","title":"Docker","text":"<p>Renovate is available for Docker via an automated build at <code>renovate/renovate</code> on Docker Hub. It builds <code>latest</code> based on the <code>main</code> branch and all SemVer tags are published too. For example, all the following are valid tags:</p> <pre><code>docker run --rm renovate/renovate\ndocker run --rm renovate/renovate:35\ndocker run --rm renovate/renovate:35.14\ndocker run --rm renovate/renovate:35.14.4\n</code></pre> <p>Warning</p> <p>Do not use the example tags listed above, as they will be out-of-date. Go to the <code>renovate/renovate</code> tags on DockerHub to grab the latest tagged release from Renovate.</p> <p>If you want to configure Renovate using a <code>config.js</code> file then map it to <code>/usr/src/app/config.js</code> using Docker volumes. For example:</p> <pre><code>docker run --rm -v \"/path/to/your/config.js:/usr/src/app/config.js\" renovate/renovate\n</code></pre>"},{"location":"examples/self-hosting/#kubernetes","title":"Kubernetes","text":"<p>Renovate's official Docker image is compatible with Kubernetes. The following is an example manifest of running Renovate against a GitHub Enterprise server. First the Kubernetes manifest:</p> <pre><code>apiVersion: batch/v1\nkind: CronJob\nmetadata:\nname: renovate\nspec:\nschedule: '@hourly'\nconcurrencyPolicy: Forbid\njobTemplate:\nspec:\ntemplate:\nspec:\ncontainers:\n- name: renovate\n# Update this to the latest available and then enable Renovate on\n# the manifest\nimage: renovate/renovate:35.14.4\nargs:\n- user/repo\n# Environment Variables\nenv:\n- name: LOG_LEVEL\nvalue: debug\nenvFrom:\n- secretRef:\nname: renovate-env\nrestartPolicy: Never\n</code></pre> <p>And also this accompanying <code>secret.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: renovate-env\ntype: Opaque\nstringData:\nGITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n# You can set RENOVATE_AUTODISCOVER to true to run Renovate on all repos you have push access to\nRENOVATE_AUTODISCOVER: 'false'\nRENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\nRENOVATE_GIT_AUTHOR: 'Renovate Bot &lt;bot@renovateapp.com&gt;'\nRENOVATE_PLATFORM: 'github'\nRENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n</code></pre> <p>A <code>config.js</code> file can be added to the manifest using a <code>ConfigMap</code> as shown in the following example (using a \"dry run\" in github.com):</p> <pre><code>---\napiVersion: v1\nkind: ConfigMap\nmetadata:\nname: renovate-config\ndata:\nconfig.json: |-\n{\n\"repositories\": [\"orgname/repo\",\"username/repo\"],\n\"dryRun\" : \"true\"\n}\n\n---\napiVersion: batch/v1\nkind: CronJob\nmetadata:\nname: renovate-bot\nspec:\nschedule: '@hourly'\nconcurrencyPolicy: Forbid\njobTemplate:\nspec:\ntemplate:\nspec:\ncontainers:\n- image: renovate/renovate:35.14.4\nname: renovate-bot\nenv: # For illustration purposes, please use secrets.\n- name: RENOVATE_PLATFORM\nvalue: 'github'\n- name: RENOVATE_TOKEN\nvalue: 'some-token'\n- name: RENOVATE_AUTODISCOVER\nvalue: 'false'\n- name: RENOVATE_BASE_DIR\nvalue: '/tmp/renovate/'\n- name: RENOVATE_CONFIG_FILE\nvalue: '/opt/renovate/config.json'\n- name: LOG_LEVEL\nvalue: debug\nvolumeMounts:\n- name: config-volume\nmountPath: /opt/renovate/\n- name: work-volume\nmountPath: /tmp/renovate/\nrestartPolicy: Never\nvolumes:\n- name: config-volume\nconfigMap:\nname: renovate-config\n- name: work-volume\nemptyDir: {}\n</code></pre>"},{"location":"examples/self-hosting/#circleci","title":"CircleCI","text":"<p>If you are using CircleCI, you can use the third-party daniel-shuy/renovate orb to run a self-hosted instance of Renovate on CircleCI.</p> <p>By default, the orb looks for the self-hosted configuration file in the project root, but you can specify another path to the configuration file with the <code>config_file_path</code> parameter.</p> <p>Secrets should be configured using environment variables (e.g. <code>RENOVATE_TOKEN</code>, <code>GITHUB_COM_TOKEN</code>).</p> <p>Configure environment variables in CircleCI Project Settings. To share environment variables across projects, use CircleCI Contexts.</p> <p>The following example runs Renovate hourly, and looks for the self-hosted configuration file at <code>renovate-config.js</code>:</p> <pre><code>version: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  renovate:\n    jobs:\n      - renovate/self-hosted:\n          config_file_path: renovate-config.js\n    nightly:\n      triggers:\n        - schedule:\n            cron: 0 * * * *\n            filters:\n              branches:\n                only:\n                  - main\n</code></pre>"},{"location":"examples/self-hosting/#renovate-config-file-validation-when-using-circleci","title":"Renovate config file validation when using CircleCI","text":"<p>How to validate your config as part of your workflow:</p> <pre><code>version: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  lint:\n    jobs:\n      - renovate/validate-config\n</code></pre>"},{"location":"examples/self-hosting/#gitlab-cicd-pipeline","title":"GitLab CI/CD pipeline","text":"<p>For GitLab pipelines we recommend you use the <code>renovate-runner</code> project on GitLab. We prepared some pipeline templates so its easy to run Renovate on pipeline schedules. You can also find the configuration steps there.</p> <p>For self-hosted GitLab clone/import the <code>renovate-runner</code> project on GitLab project to your instance.</p>"},{"location":"examples/self-hosting/#filedirectory-usage","title":"File/directory usage","text":"<p>By default, Renovate stores all files in the <code>renovate/</code> subdirectory of the operating system's temporary directory, e.g. <code>/tmp/renovate/</code>.</p> <p>Repository data is copied or cloned into unique subdirectories under <code>repos/</code>, e.g. <code>/tmp/renovate/repos/github/owner1/repo-a/</code>.</p> <p>Renovate's cache, and the caches(s) for npm, Yarn, Composer, and so on, are stored in <code>/tmp/renovate/cache</code>.</p>"},{"location":"examples/self-hosting/#overriding-the-default-directory","title":"Overriding the default directory","text":"<p>If you don't want to use the default <code>tmp/renovate</code> directory you can:</p> <ul> <li>Set a value for <code>baseDir</code> in <code>config.js</code></li> <li>Use an environment variable <code>RENOVATE_BASE_DIR</code></li> <li>Use the CLI to pass a base directory: <code>--base-dir=</code></li> </ul>"},{"location":"examples/self-hosting/#overriding-the-default-cache-directory","title":"Overriding the default cache directory","text":"<p>If you want to override the cache directory then set your own value for <code>cacheDir</code>.</p>"},{"location":"examples/self-hosting/#usage","title":"Usage","text":"<p>The following example uses the Renovate CLI tool, which you can install by running <code>npm i -g renovate</code>.</p> <p>If running your own Renovate bot then you will need a user account that Renovate will run as. We recommend you create and use a dedicated account for the bot, e.g. name it <code>renovate-bot</code> if on your own instance. Create and save a PAT for this account.</p> <p>Create a Renovate config file, for example:</p> <pre><code>module.exports = {\nendpoint: 'https://self-hosted.gitlab/api/v4/',\ntoken: '**gitlab_token**',\nplatform: 'gitlab',\nonboardingConfig: {\nextends: ['config:base'],\n},\nrepositories: ['username/repo', 'orgname/repo'],\n};\n</code></pre> <p>Here change the <code>logFile</code> and <code>repositories</code> to something appropriate. Also replace <code>gitlab-token</code> value with the one created during the previous step.</p> <p>If you're running against GitHub Enterprise Server, then change the <code>gitlab</code> values in the example to the equivalent GitHub ones.</p> <p>You can save this file as anything you want and then use the <code>RENOVATE_CONFIG_FILE</code> environment variable to tell Renovate where to find it.</p> <p>Most people use cron to schedule when Renovate runs, usually on an hourly schedule. Here's an example Bash script that you can point <code>cron</code> to:</p> <pre><code>#!/bin/bash\n\nexport PATH=\"/home/user/.yarn/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH\"\nexport RENOVATE_CONFIG_FILE=\"/home/user/renovate-config.js\"\nexport RENOVATE_TOKEN=\"**some-token**\" # GitHub, GitLab, Azure DevOps\nexport GITHUB_COM_TOKEN=\"**github-token**\" # Delete this if using github.com\n\n# Renovate\nrenovate\n</code></pre> <p>Save the script file, and run the script manually. Only add the script to cron after you checked it works.</p> <p>Note</p> <p>The GitHub.com token as an environment variable is needed to fetch Release Notes that are usually hosted on github.com. You don't need to add it if you are already running the bot against github.com, but you do need to add it if you're using GitHub Enterprise Server, GitLab, Azure DevOps, or Bitbucket.</p>"},{"location":"examples/self-hosting/#kubernetes-for-gitlab-using-git-over-ssh","title":"Kubernetes for GitLab, using Git over SSH","text":"<p>This section describes how to use a Git binary with SSH for GitLab, to avoid API shortcomings.</p> <p>You need to first create a SSH key, then add the public part to GitLab (see this guide).</p> <p>Then, you need to create the secret to add the SSH key, and the following config to your container:</p> <pre><code>host gitlab.com\n  HostName gitlab.com\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  User git\n</code></pre> <p>To easily create the secret, you can do the following (see docs).</p> <pre><code>kubectl create secret generic ssh-key-secret --from-file=config=/path/to/config --from-file=id_rsa=/path/to/.ssh/id_rsa --from-file=id_rsa.pub=/path/to/.ssh/id_rsa.pub\n</code></pre> <p>It creates something like this:</p> <pre><code>apiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: &lt;base64String&gt;\n  id_rsa.pub: &lt;base64String&gt;\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: &lt;namespace&gt;\n</code></pre> <p>Then you just need to add Git author, and mount volumes. The final configuration should look something like this:</p> <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: &lt;namespace, for example renovate&gt;\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: renovate-env\n  namespace: &lt;namespace&gt;\ntype: Opaque\nstringData:\n  GITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n  RENOVATE_AUTODISCOVER: 'false'\n  RENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\n  RENOVATE_GIT_AUTHOR: 'Renovate Bot &lt;bot@renovateapp.com&gt;'\n  RENOVATE_PLATFORM: 'github'\n  RENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n---\napiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: &lt;base64String&gt;\n  id_rsa.pub: &lt;base64String&gt;\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: &lt;namespace&gt;\n---\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: renovate\n  namespace: &lt;namespace&gt;\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          volumes:\n            - name: ssh-key-volume\n              secret:\n                secretName: ssh-key-secret\n          containers:\n            - name: renovate\n              # Update this to the latest available and then enable Renovate on the manifest\n              image: renovate/renovate:35.14.4\n              volumeMounts:\n                - name: ssh-key-volume\n                  readOnly: true\n                  mountPath: '/home/ubuntu/.ssh'\n              args:\n                - &lt;repository&gt;\n              # Environment Variables\n              envFrom:\n                - secretRef:\n                    name: renovate-env\n          restartPolicy: Never\n</code></pre>"},{"location":"examples/self-hosting/#logging","title":"Logging","text":"<p>If you're ingesting/parsing logs into another system then we recommend you set <code>LOG_LEVEL=debug</code> and <code>LOG_FORMAT=json</code> in your environment variables. Debug logging is usually needed for any debugging, while JSON format will mean that the output is parseable.</p>"},{"location":"examples/self-hosting/#about-the-log-level-numbers","title":"About the log level numbers","text":"<p>When you use <code>LOG_LEVEL=debug</code> and <code>LOG_FORMAT=json</code>, Renovate uses numbers in the <code>level</code> field.</p> <p>The logging level output is controlled by the Bunyan logging library.</p> Level Meaning 10 trace 20 debug 30 info 40 warn 50 error 60 fatal"},{"location":"examples/self-hosting/#self-signed-tlsssl-certificates","title":"Self-signed TLS/SSL certificates","text":"<p>Renovate and invoked helper programs (like Git, or npm) use a secure TLS connection (e.g. HTTPS) to connect to remote source code and dependency hosts. If the remote hosts use any self-signed certificates or certificate authorities then Renovate needs to be told to trust these additional certificates.</p>"},{"location":"examples/self-hosting/#renovate-nodejs-app","title":"Renovate Node.js app","text":"<p>For the main Renovate Node.js application set the environment variable <code>NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/self-signed-certificate.crt</code>. The Renovate application now trusts the <code>self-signed-certificate.crt</code> file. This means Renovate can safely connect to systems using that certificate or certificates signed by this certificate authority.</p>"},{"location":"examples/self-hosting/#helper-programs-like-git-or-npm","title":"Helper programs like Git or npm","text":"<p>Helper programs like Git and npm use the system trust store. For those programs to trust a self-signed certificate you must add it to the systems trust store. On Ubuntu/Debian and many Linux-based systems, this can be done by copying the self-signed certificate (e.g. <code>self-signed-certificate.crt</code>) to <code>/usr/local/share/ca-certificates/</code> and running <code>update-ca-certificates</code> to update the system trust store afterwards.</p>"},{"location":"examples/self-hosting/#renovate-docker-image","title":"Renovate Docker image","text":"<p>If you're using the official Renovate Docker image then we recommend you add the self-signed certificate and build your own modified Docker image. For example, the following <code>Dockerfile</code> is set up to use a self-signed certificate:</p> <pre><code>FROM renovate/renovate\n\n# Changes to the certificate authority require root permissions\nUSER root\n\n# Copy and install the self signed certificate\nCOPY self-signed-certificate.crt /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\n# Change back to the Ubuntu user\nUSER 1000\n\n# Node comes with an own certificate authority store and thus needs to trust the self-signed certificate explicitly\nENV NODE_EXTRA_CA_CERTS=/usr/local/share/ca-certificates/self-signed-certificate.crt\n</code></pre>"},{"location":"getting-started/installing-onboarding/","title":"Installing and onboarding Renovate into repositories","text":""},{"location":"getting-started/installing-onboarding/#repository-installation","title":"Repository installation","text":"<p>Renovate administrators can configure Renovate to either \"autodiscover\" installed repositories, or configure a fixed list of repository names to operate on.</p> <p>If the administrator has configured a fixed list of repositories then the only way to \"install\" Renovate on an additional repository is for it to be manually added for the next run or restart.</p> <p>Otherwise, the process for adding new repositories to a Renovate installation can vary:</p> <ul> <li>Most commonly, you run Renovate as a dedicated \"bot user\" with global config option <code>autodiscover</code> set to <code>true</code>, meaning that it will run on every repository which it's been granted access to</li> <li>If using a GitHub App (including Mend Renovate on <code>github.com</code>) then you can install the app into a user or organization account and select either \"All repositories\", or \"Select repositories\" and pick them manually</li> </ul>"},{"location":"getting-started/installing-onboarding/#hosted-githubcom-app","title":"Hosted GitHub.com App","text":"<p>Installing/enabling Mend's Renovate GitHub App is simple.</p> <p>First, navigate to https://github.com/apps/renovate and select the Install button:</p> <p></p> <p>The only choice you need to make is whether to run Renovate on all repositories or on selected repositories:</p> <p></p> <p>Renovate will ignore any repositories that don't have known package files, as well as any forks, so you can enable Renovate for all your repositories with no problems. That said, most people run Renovate on selected repositories. Unfortunately GitHub doesn't offer a \"select all except X, Y, Z\" option, so you must select each repository where you want Renovate to run.</p> <p>Once you're done selecting repositories for Renovate to run on, select the green Install button at the bottom of the page and Renovate will be enabled for those repositories and start the onboarding process.</p> <p>Note</p> <p>If you are using the Mend Renovate App then it has a custom behavior for forked repositories. If you choose \"All repositories\" when installing then forked repositories will be skipped by default, while if you choose \"Select repositories\" then they will be processed by Renovate even if they're a fork.</p>"},{"location":"getting-started/installing-onboarding/#hosted-gitlabcom-app","title":"Hosted GitLab.com App","text":"<p>Unfortunately Mend's hosted GitLab app needed to be taken offline indefinitely until a viable security model for bots on GitLab.com is available. For more details on GitLab security for bots, please see the GitLab Bot Security doc.</p>"},{"location":"getting-started/installing-onboarding/#self-hosting-on-windows","title":"Self-hosting on Windows","text":"<p>We recommend you set <code>core.autocrlf = input</code> in your Git config. You can do this by running this Git command:</p> <pre><code>git config --global core.autocrlf input\n</code></pre> <p>This prevents the carriage return <code>\\r\\n</code> which may confuse Renovate bot. You can also set the line endings in your repository by adding <code>* text=auto eol=lf</code> to your <code>.gitattributes</code> file.</p>"},{"location":"getting-started/installing-onboarding/#repository-onboarding","title":"Repository onboarding","text":"<p>Once you have enabled Renovate on a repository, you will get a \"Configure Renovate\" Pull Request looking something like this:</p> <p></p>"},{"location":"getting-started/installing-onboarding/#no-risk-onboarding","title":"No risk onboarding","text":"<p>Conveniently, Renovate will not make any changes to your repository or raise any further Pull Requests until after you merge the onboarding Pull Request. If there is anything about the Pull Request that you don't like or understand, take your time to read the documentation or ask questions on the discussions forum on GitHub and merge the PR only once you're satisfied with the result.</p> <p>You can edit your Renovate configuration within the <code>renovate/configure</code> branch and Renovate will keep updating the description in the PR to match, so you can work on the config until you're satisfied with the results.</p>"},{"location":"getting-started/installing-onboarding/#check-for-warnings","title":"Check for warnings","text":"<p>If you have any Warnings or Errors listed, see if you need or want to make any changes to fix them. Warnings and errors should be fixed on the base branch (e.g. <code>main</code>) so that Renovate can recreate its Configure Renovate PR on its next cycle.</p>"},{"location":"getting-started/installing-onboarding/#configuration-location","title":"Configuration location","text":"<p>The \"Configure Renovate\" PR will include a <code>renovate.json</code> file in the root directory, with suggested default settings. If you don't want a <code>renovate.json</code> file in your repository you can use one of the following files instead:</p> <ul> <li><code>renovate.json5</code></li> <li><code>.github/renovate.json</code></li> <li><code>.github/renovate.json5</code></li> <li><code>.gitlab/renovate.json</code></li> <li><code>.gitlab/renovate.json5</code></li> <li><code>.renovaterc</code></li> <li><code>.renovaterc.json</code></li> <li><code>.renovaterc.json5</code></li> <li><code>package.json</code> (deprecated)</li> </ul>"},{"location":"getting-started/installing-onboarding/#packagejson","title":"package.json","text":"<p>Warning</p> <p>This approach has been deprecated and will be removed in a future release.</p> <p>You can add the same settings to a <code>\"renovate\"</code> section in your <code>package.json</code> file instead. The <code>package.json</code> file must be located at the root of your repository. This is handy if you are already using a <code>package.json</code> file anyway, e.g. when you're working on a JavaScript project. The configuration in your <code>package.json</code> will apply to the whole project (this includes other, nested <code>package.json</code> files).</p>"},{"location":"getting-started/installing-onboarding/#customized-defaults","title":"Customized defaults","text":"<p>Renovate provides a <code>renovate.json</code> file, with default settings that will work for most cases. Sometimes Renovate detects that an override to these defaults is needed, and will add this override automatically, such as:</p> <ul> <li>Automatically enabling Angular-style semantic commits if your repository uses them</li> <li>Determining whether to use dependency range pinning depending on the detected project type (app vs library)</li> </ul>"},{"location":"getting-started/installing-onboarding/#common-overrides","title":"Common overrides","text":"<p>Please check the docs on this website for an exhaustive Configuration Reference. To help you get started, here are some of the most commonly changed (overridden) configuration settings:</p> <ul> <li>rangeStrategy: By default (with zero config) it's <code>\"replace\"</code> but the <code>\"config:base\"</code> preset overrides it to <code>\"auto\"</code>. Some prefer <code>\"bump\"</code>.</li> <li>labels: Labels to assign to Pull Requests</li> <li>assignees: GitHub user(s) to assign the Pull Requests to</li> </ul> <p>Renovate will update your PR description each time it finds changes.</p>"},{"location":"getting-started/installing-onboarding/#merge","title":"Merge","text":"<p>Once you're done checking and configuring in your Configure Renovate PR, it's time to merge it to enable the real Pull Requests to begin.</p>"},{"location":"getting-started/installing-onboarding/#repository-re-configuration","title":"Repository re-configuration","text":"<p>There will be times when you need to change your Renovate config. There are two recommended approaches:</p> <ul> <li>Reconfigure via PR</li> <li>Nuke the config and re-onboard</li> </ul>"},{"location":"getting-started/installing-onboarding/#reconfigure-via-pr","title":"Reconfigure via PR","text":"<p>If you want to make config edits directly, follow these steps:</p> <ol> <li>Create a new Git branch to work on</li> <li>Install or update the <code>renovate</code> package globally (<code>npm i -g renovate</code> or <code>yarn global add renovate</code>) to get the <code>renovate-config-validator</code> program</li> <li>Edit your Renovate configuration file</li> <li>Validate your config by running <code>renovate-config-validator</code></li> <li>If the improved config passes the validation, merge the branch into your mainline branch</li> </ol> <p>The validator program checks files passed as CLI arguments. If no argument is given, all default locations (if files exist) and the <code>RENOVATE_CONFIG_FILE</code> environment variable are checked.</p> <p>You can configure a pre-commit hook to validate your configuration automatically. Please check out the <code>renovatebot/pre-commit-hooks</code> repository for more information.</p>"},{"location":"getting-started/installing-onboarding/#nuke-config-and-re-onboard","title":"Nuke config and re-onboard","text":"<p>Perhaps you really liked the interactive onboarding PR and want to use it again. You can follow the steps below to nuke the config and get a new PR. Any existing Renovate PRs will be closed after you've completed these steps.</p> <ol> <li>Find your original <code>Configure Renovate</code> PR</li> <li>Rename the original PR to something else, e.g. <code>Configure Renovate - old</code></li> <li>Remove the current Renovate configuration file (e.g. <code>renovate.json</code>) from your mainline branch</li> </ol> <p>Following these steps will trick Renovate into thinking that your repository was never onboarded, and will trigger a new \"Configure Renovate\" PR. If you're using the hosted Mend Renovate App and you don't get a new onboarding PR within a few hours, then please create a Discussions post to request staff trigger it manually.</p>"},{"location":"getting-started/private-packages/","title":"Private package support","text":"<p>It's a very common requirement to be able to support private module/dependency lookups. This page describes Renovate's approach to authentication.</p> <p>First, a quick note on terminology:</p> <ul> <li>The terms <code>module</code>, <code>package</code> and <code>dependency</code> can mostly be used interchangeably below</li> <li>The terms <code>credentials</code>, <code>secrets</code> and <code>authentication</code> are also used interchangeably</li> </ul>"},{"location":"getting-started/private-packages/#when-does-renovate-need-credentials","title":"When does Renovate need credentials?","text":"<p>By default, the only credentials Renovate has are those for the \"platform\", i.e. GitHub, GitLab, etc. If the token used has sufficient permissions, this will enable Renovate to lookup dependencies located in alternative repositories on the same host or any hosted on any embedded package registry on the same host.</p> <p>It's also quite common to need to look up packages on other protected hosts, including npmjs, Docker Hub, or private registries like Nexus or Artifactory. Any time you need Renovate to access such registries with credentials then you will need to provision them as part of your config.</p> <p>There are four times in Renovate's behavior when it may need credentials:</p> <ul> <li>Resolving private config presets</li> <li>Looking up dependency versions</li> <li>Looking up release notes</li> <li>Passing to package managers when updating lock files or checksums</li> </ul> <p>Note</p> <p>If you self-host Renovate, and have a self-hosted registry which doesn't require authentication to access, then such modules/packages are not considered \"private\" to Renovate.</p>"},{"location":"getting-started/private-packages/#private-config-presets","title":"Private Config Presets","text":"<p>Renovate supports config presets, including those which are private.</p> <p>Although npm presets were the first type supported, they are now deprecated and it is recommend that all users migrate to git-hosted \"local\" presets instead. However if you do still use them, private modules should work if you configure <code>hostRules</code> (recommended) or <code>npmrc</code> including token credentials in your bot global config. It is strongly recommended not to use private modules on a private registry and a warning will be logged if that is found. Credentials stored on disk (e.g. in <code>~/.npmrc</code>) are no longer supported.</p> <p>The recommended way of using local presets is to configure then using \"local\" presets, e.g. <code>\"extends\": [\"local&gt;myorg/renovate-config\"]</code>, and ensure that the platform token has access to that repo.</p> <p>It's not recommended that you use a private repository to host your config while then extending it from a public repository. If your preset doesn't have secrets then you should make it public, while if it does have secrets then it's better to split your preset between a public one which all repos extend, and a private one with secrets which only other private repos extend.</p> <p>In summary, the recommended approach to private presets is:</p> <ul> <li>Host the presets on the same server/platform as other repositories</li> <li>Make sure you install Renovate into the preset repository so that it has credentials to access it from other private repos</li> <li>Use <code>local&gt;....</code> syntax to refer to private presets</li> </ul>"},{"location":"getting-started/private-packages/#dependency-version-lookups","title":"Dependency Version Lookups","text":"<p>Whenever Renovate detects that a project uses a particular dependency, it tries to look up that dependency to see if any new versions exist. If such a package is private, then Renovate must be configured with the relevant credentials. Renovate does not use any package managers for this step and performs all HTTP(S) lookups itself, including insertion of authentication headers.</p> <p>Configuring Renovate with credentials requires <code>hostRules</code>. Each host rule consists of a <code>hostType</code> value and/or a way to match against hosts using <code>matchHost</code>.</p> <p><code>hostType</code> is not particularly important at this step unless you have different credentials for the same host, but it is sometimes useful in later steps so is good to include if you can. It can be either a \"platform\" name (e.g. <code>github</code>, <code>azure</code>, etc) or a \"datasource\" name (e.g. <code>npm</code>, <code>maven</code>, <code>github-tags</code>, etc).</p> <p>If you want to apply credentials only for a nested path within a host then write <code>matchHost</code> as a base URL like <code>https://registry.company.com/nested/path/</code>. If the same credentials apply to all paths on a host and not on any subdomains of it then configure <code>matchHost</code> with a protocol like <code>https://registry.company.com</code>. Finally, to apply credentials to all hosts within the domain, use a <code>matchHost</code> value with no <code>https://</code> prefix, e.g. <code>company.com</code> or <code>registry.company.com</code>, both of which would apply to a host like <code>beta.registry.company.com</code>.</p> <p>In addition to the above options to match against a host, you need to add the credentials. Typically they are either <code>token</code>, or <code>username</code> + <code>password</code>. Other credential terms are not supported yet.</p> <p>Here is an example of some host rules:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"registry.npmjs.org\",\n\"token\": \"abc123\"\n},\n{\n\"matchHost\": \"https://registry.company.com/pypi-simple/\",\n\"username\": \"engineering\",\n\"password\": \"abc123\"\n}\n]\n}\n</code></pre> <p>Renovate applies theses <code>hostRules</code> to every HTTP(s) request which is sent, so they are largely independent of any platform or datasource logic. With <code>hostRules</code> in place, private package lookups should all work.</p>"},{"location":"getting-started/private-packages/#github-and-enterprise-repo-scoped-credentials","title":"GitHub (and Enterprise) repo scoped credentials","text":"<p>If you need to use different credentials for a specific GitHub repo, then you can configure <code>hostRules</code> like one of the following:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"https://api.github.com/repos/org/repo\",\n\"token\": \"abc123\"\n},\n{\n\"matchHost\": \"https://github.domain.com/api/v3/repos/org/repo\",\n\"token\": \"abc123\"\n}\n]\n}\n</code></pre> <p>Renovate will use those credentials for all requests to <code>org/repo</code>.</p>"},{"location":"getting-started/private-packages/#example-for-gomod","title":"Example for gomod","text":"<p>Here's an example for <code>gomod</code> with private github.com repos. Assume this config is used on the <code>github.com/some-other-org</code> repo:</p> <pre><code>{\n\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n\"dependencyDashboard\": true,\n\"hostRules\": [\n{\n\"matchHost\": \"https://gitlab.com\",\n\"token\": \"glpat-token_for_different_git_platform\",\n\"hostType\": \"gitlab\"\n},\n{\n\"matchHost\": \"https://github.com/some-org\",\n\"token\": \"ghp_token_for_different_org\",\n\"hostType\": \"go\"\n},\n{\n\"matchHost\": \"https://api.github.com/repos/some-org\",\n\"token\": \"ghp_token_for_different_org\",\n\"hostType\": \"github\"\n}\n],\n\"customEnvVariables\": {\n\"GOPRIVATE\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n\"GONOSUMDB\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n\"GONOPROXY\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\"\n},\n\"postUpdateOptions\": [\"gomodTidy\"]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#looking-up-release-notes","title":"Looking up Release Notes","text":"<p>When Renovate creates Pull Requests, its default behavior is to locate and embed release notes/changelogs of packages. These release notes are fetched from the source repository of packages and not from the registries themselves, so if they are private then they will require different credentials.</p> <p>When it comes to open source, most packages host their source on <code>github.com</code> in public repositories. GitHub greatly rate limits unauthenticated API requests, so you need to configure credentials for github.com or the bot will get rate limited quickly. It can be confusing for people who host their own source code privately to be asked to configure a <code>github.com</code> token but without it Release Notes for most open source packages will be blocked.</p> <p>Currently the preferred way to configure <code>github.com</code> credentials for self-hosted Renovate is:</p> <ul> <li>Create a read-only Personal Access Token (PAT) for a <code>github.com</code> account. This can be any GitHub account, it might be better to create an \"empty\" account just for this purpose.</li> <li>Add the PAT to Renovate using the environment variable <code>GITHUB_COM_TOKEN</code></li> </ul>"},{"location":"getting-started/private-packages/#package-manager-credentials-for-artifact-updating","title":"Package Manager Credentials for Artifact Updating","text":"<p>In Renovate terminology, \"artifacts\" includes lock files, checksum files, and vendored dependencies. One way of understanding artifacts is: \"everything else that needs to be updated when the dependency version changes\".</p> <p>Not all package managers supported by Renovate require artifact updating, because not all use lock or checksum files. But when such files need updating, Renovate does so by using the package managers themselves instead of trying to \"reverse engineer\" each package manager's file formats and behavior. Importantly, such package managers are run via shell commands and do not understand Renovate's <code>hostRules</code> objects, so Renovate needs to reformat the credentials into formats (such as environment variables or configuration files) which the package manager understands.</p> <p>Because of this need to convert <code>hostRules</code> credentials into a format which package managers understand, sometimes artifact updating can fail due to missing credentials. Sometimes this can be resolved by changing Renovate configuration, but other times it may be due to a feature gap. The following details the most common/popular manager artifacts updating and how credentials are passed:</p>"},{"location":"getting-started/private-packages/#bundler","title":"bundler","text":"<p><code>hostRules</code> with <code>hostType=rubygems</code> are converted into environment variables which Bundler supports.</p>"},{"location":"getting-started/private-packages/#composer","title":"composer","text":"<p>Any <code>hostRules</code> token for <code>github.com</code> or <code>gitlab.com</code> are found and written out to <code>COMPOSER_AUTH</code> in env for Composer to parse. Any <code>hostRules</code> with <code>hostType=packagist</code> are also included. For dependencies on <code>github.com</code> without a Packagist server: use a Personal Access Token for <code>hostRule</code> with <code>hostType=git-tags</code>, do not use an application token. Avoid adding a <code>hostRule</code> with <code>hostType=github</code> because:</p> <ul> <li>it overrides the default Renovate application token for everything else</li> <li>it causes unwanted side effects</li> </ul> <p>The repository in <code>composer.json</code> should have the <code>vcs</code> type with a <code>https</code> URL. For example:</p> <pre><code>{\n\"repositories\": [\n{\n\"type\": \"vcs\",\n\"url\": \"https://github.com/organization/private-repository\"\n}\n]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#gomod","title":"gomod","text":"<p>If a <code>github.com</code> token is found in <code>hostRules</code>, then it is written out to local GIT_CONFIG_ variables prior to running <code>go</code> commands. The environment variables used are: <code>GIT_CONFIG_KEY_0=url.https://${token}@github.com/.insteadOf GIT_CONFIG_VALUE_0=https://github.com/ GIT_CONFIG_COUNT=1</code>.</p>"},{"location":"getting-started/private-packages/#helm","title":"helm","text":"<p>Maybe you're running your own ChartMuseum server to host your private Helm Charts. This is how you connect to a private Helm repository:</p> <pre><code>module.exports = {\nhostRules: [\n{\nmatchHost: 'your.host.io',\nhostType: 'helm',\nusername: '&lt;your-username&gt;',\npassword: process.env.SELF_HOSTED_HELM_CHARTS_PASSWORD,\n},\n],\n};\n</code></pre> <p>If you need to configure per-repository credentials then you can also configure the above within a repository's Renovate config (e.g. <code>renovate.json</code>).</p>"},{"location":"getting-started/private-packages/#npm","title":"npm","text":"<p>The recommended approaches in order of preference are:</p> <ol> <li>Self-hosted hostRules: Configure a hostRules entry in the bot's <code>config.js</code> with the <code>hostType</code>, <code>matchHost</code> and <code>token</code> specified</li> <li>Renovate App with private modules from npmjs.org: Add an encrypted <code>npmToken</code> to your Renovate config</li> <li>Renovate App with a private registry: Add an plaintext <code>npmrc</code> plus an encrypted <code>npmToken</code> in config</li> </ol> <p>These approaches are described in full below.</p>"},{"location":"getting-started/private-packages/#add-hostrule-to-bots-config","title":"Add hostRule to bots config","text":"<p>Define <code>hostRules</code> like this:</p> <pre><code>module.exports = {\nhostRules: [\n{\nhostType: 'npm',\nmatchHost: 'registry.npmjs.org',\ntoken: process.env.NPMJS_TOKEN,\n},\n{\nhostType: 'npm',\nmatchHost:\n'https://pkgs.dev.azure.com/{organization}/{project}/_packaging/{feed}/npm/registry/',\nusername: 'VssSessionToken',\npassword: process.env.AZURE_NPM_TOKEN,\n},\n{\n// https://www.jfrog.com/confluence/display/JFROG/npm+Registry\n// Will be passed as `//artifactory.my-company.com/artifactory/api/npm/npm:_auth=&lt;TOKEN&gt;` to `.npmrc`\nhostType: 'npm',\nmatchHost: 'https://artifactory.my-company.com/artifactory/api/npm/npm/',\ntoken: process.env.ARTIFACTORY_NPM_TOKEN,\nauthType: 'Basic',\n},\n],\n};\n</code></pre> <p>Tip</p> <p>Remember to put a trailing slash at the end of your <code>matchHost</code> URL.</p>"},{"location":"getting-started/private-packages/#add-npmrc-string-to-renovate-config","title":"Add npmrc string to Renovate config","text":"<p>You can add an <code>.npmrc</code> authentication line to your Renovate config under the field <code>npmrc</code>. e.g. a <code>renovate.json</code> might look like this:</p> <pre><code>{\n\"npmrc\": \"//some.registry.com/:_authToken=abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n</code></pre> <p>If configured like this, Renovate will use this to authenticate with npm and will ignore any <code>.npmrc</code> files(s) it finds checked into the repository. If you wish for the values in your <code>config.npmrc</code> to be merged (prepended) with any values found in repos then also set <code>config.npmrcMerge=true</code>. This merge approach is similar to how <code>npm</code> itself behaves if <code>.npmrc</code> is found in both the user home directory as well as a project.</p>"},{"location":"getting-started/private-packages/#add-npmtoken-to-renovate-config","title":"Add npmToken to Renovate config","text":"<p>If you are using the main npmjs registry then you can configure just the <code>npmToken</code> instead:</p> <pre><code>{\n\"npmToken\": \"abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n</code></pre>"},{"location":"getting-started/private-packages/#add-an-encrypted-npm-token-to-renovate-config","title":"Add an encrypted npm token to Renovate config","text":"<p>If you don't want all users of the repository to see the plaintext token, you can encrypt it with Renovate's public key instead, so that only Renovate can decrypt it.</p> <p>Go to https://app.renovatebot.com/encrypt, paste in your npm token, select \"Encrypt\", then copy the encrypted result.</p> <p>Paste the encrypted result inside an <code>encrypted</code> object like this:</p> <pre><code>{\n\"encrypted\": {\n\"npmToken\": \"xxT19RIdhAh09lkhdrK39HzKNBn3etoLZAwHdeJ25cX+5y52a9kAC7flXmdw5JrkciN08aQuRNqDaKxp53IVptB5AYOnQPrt8MCT+x0zHgp4A1zv1QOV84I6uugdWpFSjPUkmLGMgULudEZJMlY/dAn/IVwf/IImqwazY8eHyJAA4vyUqKkL9SXzHjvS+OBonQ/9/AHYYKmDJwT8vLSRCKrXxJCdUfH7ZnikZbFqjnURJ9nGUHP44rlYJ7PFl05RZ+X5WuZG/A27S5LuBvguyQGcw8A2AZilHSDta9S/4eG6kb22jX87jXTrT6orUkxh2WHI/xvNUEout0gxwWMDkA==\"\n}\n}\n</code></pre> <p>If you have no <code>.npmrc</code> file then Renovate creates one for you, pointing to the default npmjs registry. If instead you use an alternative registry or need an <code>.npmrc</code> file for some other reason, you should configure it too and substitute the npm token with <code>${NPM_TOKEN}</code> for it to be replaced. e.g.</p> <pre><code>{\n\"encrypted\": {\n\"npmToken\": \"xxT19RIdhAh09lkhdrK39HzKNBn3etoLZAwHdeJ25cX+5y52a9kAC7flXmdw5JrkciN08aQuRNqDaKxp53IVptB5AYOnQPrt8MCT+x0zHgp4A1zv1QOV84I6uugdWpFSjPUkmLGMgULudEZJMlY/dAn/IVwf/IImqwazY8eHyJAA4vyUqKkL9SXzHjvS+OBonQ/9/AHYYKmDJwT8vLSRCKrXxJCdUfH7ZnikZbFqjnURJ9nGUHP44rlYJ7PFl05RZ+X5WuZG/A27S5LuBvguyQGcw8A2AZilHSDta9S/4eG6kb22jX87jXTrT6orUkxh2WHI/xvNUEout0gxwWMDkA==\"\n},\n\"npmrc\": \"registry=https://my.custom.registry/npm\\n//my.custom.registry/npm:_authToken=${NPM_TOKEN}\"\n}\n</code></pre> <p>Renovate will then use the following logic:</p> <ol> <li>If no <code>npmrc</code> string is present in config then one will be created with the <code>_authToken</code> pointing to the default npmjs registry</li> <li>If an <code>npmrc</code> string is present and has a <code>${NPM_TOKEN}</code> then that placeholder will be replaced with the decrypted token</li> <li>If an <code>npmrc</code> string is present but doesn't have a <code>${NPM_TOKEN}</code> then the file will have <code>_authToken=&lt;token&gt;</code> appended to it</li> </ol>"},{"location":"getting-started/private-packages/#encrypted-entire-npmrc-file-into-config","title":"Encrypted entire .npmrc file into config","text":"<p>Copy the entire <code>.npmrc</code>, replace newlines with <code>\\n</code> characters , and then try encrypting it at https://app.renovatebot.com/encrypt.</p> <p>You will then get an encrypted string that you can substitute into your <code>renovate.json</code> instead. The end-result looks like this:</p> <pre><code>{\n\"encrypted\": {\n\"npmrc\": \"WOTWu+jliBtXYz3CU2eI7dDyMIvSJKS2N5PEHZmLB3XKT3vLaaYTGCU6m92Q9FgdaM/q2wLYun2JrTP4GPaW8eGZ3iiG1cm7lgOR5xPnkCzz0DUmSf6Cc/6geeVeSFdJ0zqlEAhdNMyJ4pUW6iQxC3WJKgM/ADvFtme077Acvc0fhCXv0XvbNSbtUwHF/gD6OJ0r2qlIzUMGJk/eI254xo5SwWVctc1iZS9LW+L0/CKjqhWh4SbyglP3lKE5shg3q7mzWDZepa/nJmAnNmXdoVO2aPPeQCG3BKqCtCfvLUUU/0LvnJ2SbQ1obyzL7vhh2OF/VsATS5cxbHvoX/hxWQ==\"\n}\n}\n</code></pre>"},{"location":"getting-started/private-packages/#automatically-authenticate-for-npm-package-stored-in-private-github-npm-repository","title":"Automatically authenticate for npm package stored in private GitHub npm repository","text":"<pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"https://npm.pkg.github.com/\",\n\"hostType\": \"npm\",\n\"encrypted\": {\n\"token\": \"&lt;Encrypted PAT Token&gt;\"\n}\n}\n],\n\"npmrc\": \"@organizationName:registry=https://npm.pkg.github.com/\"\n}\n</code></pre>"},{"location":"getting-started/private-packages/#yarn-2","title":"Yarn 2+","text":"<p>Renovate doesn't support reading <code>npmRegistries</code> and <code>npmScopes</code> from <code>.yarnrc.yml</code>, so <code>hostRules</code> (or <code>npmToken</code>) and <code>npmrc</code> should be configured like above. Renovate updates <code>npmRegistries</code> in <code>.yarnrc.yml</code> with resolved <code>hostRules</code> before running Yarn. For Renovate to overwrite existing <code>npmRegistries</code> entry, the key should match the <code>matchHost</code> minus the protocol (<code>http:</code> or <code>https:</code>) plus the trailing slash.</p> <p>For example, the Renovate configuration:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"https://npm.pkg.github.com/\",\n\"hostType\": \"npm\",\n\"encrypted\": {\n\"token\": \"&lt;Encrypted PAT Token&gt;\"\n}\n}\n]\n}\n</code></pre> <p>will update <code>.yarnrc.yml</code> as following:</p> <pre><code>npmRegistries:\n//npm.pkg.github.com/:\nnpmAuthToken: &lt;Decrypted PAT Token&gt;\n//npm.pkg.github.com:\n# this will not be overwritten and may conflict\nhttps://npm.pkg.github.com/:\n# this will not be overwritten and may conflict\n</code></pre>"},{"location":"getting-started/private-packages/#maven","title":"maven","text":"<p>GitLab package registry can be authorized using <code>Authorization: Bearer &lt;token&gt;</code>. In GitLab Pipelines authorization can be achieved using following config:</p> <pre><code>hostRules: [\n{\nhostType: 'maven',\nmatchHost: 'https://gitlab.host.com/api/v4',\ntoken: process.env.CI_JOB_TOKEN,\n},\n];\n</code></pre>"},{"location":"getting-started/private-packages/#nuget","title":"nuget","text":"<p>For each known NuGet registry, Renovate searches for <code>hostRules</code> with <code>hostType=nuget</code> and matching host. For those found, a command like the following is run: <code>dotnet nuget add source ${registryInfo.feedUrl} --configfile ${nugetConfigFile} --username ${username} --password ${password} --store-password-in-clear-text</code>.</p> <pre><code>hostRules: [\n{\nmatchHost: 'https://pkgs.dev.azure.com/&lt;org&gt;/',\nhostType: 'nuget',\nusername: 'user', // doesn't matter for azure\npassword: '&lt;PAT&gt;',\n},\n];\n</code></pre>"},{"location":"getting-started/private-packages/#pip","title":"pip","text":"<p>If a <code>requirements.txt</code> file has an index-url then Renovate follows that link, instead of following any link set in the <code>registryUrls</code> array. To override the URL found in <code>requirements.txt</code>, you must create a custom <code>packageRules</code> setting. This is because <code>packageRules</code> are applied after package file extraction.</p> <p>For example:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"pip_requirements\"],\n\"registryUrls\": [\"https://docker.mycompany.domain\"]\n}\n]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#poetry","title":"poetry","text":"<p>For every Poetry source, a <code>hostRules</code> search is done and then any found credentials are added to env like <code>POETRY_HTTP_BASIC_X_USERNAME</code> and <code>POETRY_HTTP_BASIC_X_PASSWORD</code>, where <code>X</code> represents the normalized name of the source in <code>pyproject.toml</code>.</p> <pre><code>module.exports = {\nhostRules: [\n{\nmatchHost: 'pypi.example.com',\nhostType: 'pypi',\nusername: process.env.PYPI_USERNAME,\npassword: process.env.PYPI_PASSWORD,\n},\n],\n};\n</code></pre> <p>If you're self-hosting Renovate via the GitLab Runner and want to access packages from private GitLab registries, you can use the GitLab CI job token for authentication:</p> <pre><code>module.exports = {\nhostRules: [\n{\nmatchHost: 'gitlab.example.com',\nhostType: 'pypi',\nusername: 'gitlab-ci-token',\npassword: process.env.CI_JOB_TOKEN,\n},\n],\n};\n</code></pre>"},{"location":"getting-started/private-packages/#mend-renovate-hosted-app-encryption","title":"Mend Renovate Hosted App Encryption","text":"<p>The popular Renovate App on GitHub is hosted by Mend. If you are a user of this app, and have private modules, then the following is applicable.</p>"},{"location":"getting-started/private-packages/#private-presets-with-public-repositories","title":"Private presets with public repositories","text":"<p>If you have a preset in a private repo but reference (\"extend\") it from a public repository then it won't work. This is because public repositories are provided with a token scoped to only that particular repository, and not for all repositories within the organization. This is a security measure so that if a the token is accidentally leaked publicly, the damage is limited to the public repository it leaked to and not to every repository within the organization.</p> <p>The solution to this is that you should break your presets into public and private ones, and reference only the public ones from public repositories.</p>"},{"location":"getting-started/private-packages/#encrypting-secrets","title":"Encrypting secrets","text":"<p>It is strongly recommended that you avoid committing secrets to repositories, including private ones, and this includes secrets needed by Renovate to access private modules. The preferred approach to secrets is that the bot administrator configures them as <code>hostRules</code> which are then applied to all repositories which the bot accesses.</p> <p>If you need to provide credentials to the hosted Renovate App, please do this:</p> <ul> <li>Encrypt each secret string using https://app.renovatebot.com/encrypt. Note: this encrypts using the app's public key fully in the browser and does not send the original secret to any server. You can download this file and perform the encryption fully offline if you like.</li> <li>Wrap each secret field in an encrypted object and paste in the encrypted secret value instead. An example is shown below:</li> </ul> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"registry.npmjs.org\",\n\"encrypted\": {\n\"token\": \"3f832f2983yf89hsd98ahadsjfasdfjaslf............\"\n}\n},\n{\n\"matchHost\": \"https://custom.registry.company.com/pypi/\",\n\"username\": \"bot1\",\n\"encrypted\": {\n\"password\": \"p278djfdsi9832jnfdshufwji2r389fdskj.........\"\n}\n}\n]\n}\n</code></pre>"},{"location":"getting-started/private-packages/#access-to-github-actions-secrets","title":"Access to GitHub Actions Secrets","text":"<p>The Mend Renovate App does not run using GitHub Actions, but such secrets would be a bad fit for the app anyway for the following reasons:</p> <ul> <li>The app would be granted access to all the repository/org secrets, not just the ones you want</li> <li>If Renovate wants access to such secrets, it would need to ask for them from every user, not just the ones who want to use this approach (GitHub does not support the concept of optional permissions for Apps, so people do not have the option to decline)</li> </ul>"},{"location":"getting-started/private-packages/#adminbot-config-vs-userrepository-config-for-self-hosted-users","title":"Admin/Bot config vs User/Repository config for Self-hosted users","text":"<p>\"Admin/Bot config\" refers to the config which the Renovate Bot administrator provides at bot startup, e.g. using environment variables, CLI parameters, or the <code>config.js</code> configuration file. User/Repository config refers to the in-repository config file which defaults to <code>renovate.json</code> but has a large number of alternative filenames supported.</p> <p>If there is a need to supply custom rules for certain repository, it can still be done using the <code>config.js</code> file and the <code>repositories</code> array.</p> <p>If per-repository config must be done within the repository, it is still recommended against committing secrets directly (including e.g. <code>.npmrc</code> files with tokens) and instead encrypting them with a custom public key first. For instructions on this, see the above section on encrypting secrets for the Mend Renovate App but instead:</p> <ul> <li>Save a copy of the https://app.renovatebot.com/encrypt HTML file locally, or host it locally</li> <li>Generate a public/private key pair for the app using the instructions in privateKey</li> <li>Replace the existing public key in the HTML with the public key you generated in the step prior</li> <li>Use the resulting HTML encrypt page to encrypt secrets for your app before adding them to user/repository config</li> <li>Configure the app to run with <code>privateKey</code> set to the private key you generated above</li> </ul> <p>Note</p> <p>Encrypted values can't be used in the \"Admin/Bot config\".</p>"},{"location":"getting-started/private-packages/#hostrules-configuration-using-environment-variables","title":"hostRules configuration using environment variables","text":"<p>Self-hosted users can enable the option <code>detectHostRulesFromEnv</code> to configure the most common types of <code>hostRules</code> via environment variables.</p>"},{"location":"getting-started/running/","title":"Running Renovate","text":"<p>As a Renovate end user, there are two main categories of use:</p> <ul> <li>You self-host Renovate, e.g. by running the pre-built Docker image, or</li> <li>Someone else is hosting Renovate, and you install/configure it for the repositories you choose</li> </ul> <p>If someone else is hosting Renovate for you, or you are using the Mend Renovate App on GitHub, then you can skip ahead to the installing &amp; onboarding page.</p>"},{"location":"getting-started/running/#self-hosting-renovate","title":"Self-Hosting Renovate","text":"<p>Self-hosting Renovate means that you are the \"administrator\" of the bot, which entails:</p> <ul> <li>You provide infrastructure for it to run on,</li> <li>You provision its global config,</li> <li>You ensure it's running regularly,</li> <li>You ensure Renovate bot itself is updated</li> </ul> <p>Read our section on Self-hosting on Windows to prevent line endings from confusing Renovate bot.</p>"},{"location":"getting-started/running/#available-distributions","title":"Available distributions","text":""},{"location":"getting-started/running/#npm-package-cli","title":"npm package (CLI)","text":"<p>Renovate's Open Source CLI is built and distributed as the npm package <code>renovate</code>. You can run this directly in any Node.js environment - even via <code>npx</code> - and it will process all the repositories it is configured with, before exiting. When you install Renovate from npm it naturally does not come bundled with any third-party tools or languages such as Ruby, Python, Composer, Bundler, Poetry, etc. If you need Renovate to support any non-npm lock files like Bundler then you'll need to make sure all required third-party tools are pre-installed in the same environment alongside Renovate before you run it.</p> <p>The <code>renovate</code> npm package is compatible with all of Renovate's supported platforms.</p>"},{"location":"getting-started/running/#docker-image","title":"Docker image","text":"<p>The <code>renovate</code> npm package is also distributed via pre-built Node.js images on Docker Hub (<code>renovate/renovate</code>).</p> <p>The <code>slim</code> image contains only Node.js so works if either:</p> <ul> <li>You do not require any additional package managers, or</li> <li>You map the Docker socket into the container so that Renovate can dynamically invoke \"sidecar\" images when necessary</li> </ul> <p>The \"full\" image (which <code>latest</code> defaults to) has every package manager which Renovate supports already preinstalled. This approach works best for many, but does have the following downsides:</p> <ul> <li>It only has one version of each language/manager - usually the latest</li> <li>It's several gigabytes in size</li> </ul> <p>The <code>renovate/renovate</code> Docker images are compatible with all of Renovate's supported platforms.</p>"},{"location":"getting-started/running/#github-action","title":"GitHub Action","text":"<p>Renovate's npm tool is also provided as a pre-prepared GitHub Action on <code>renovatebot/github-action</code>. Details on how to use it can be found in the repository.</p>"},{"location":"getting-started/running/#gitlab-runner","title":"GitLab Runner","text":"<p>The Renovate team provide a \"Renovate Runner\" project to make it easier to run Renovate as a CI pipeline job. This supports both <code>gitlab.com</code> as well as self-hosted GitLab. Details for how it works can be found in the project.</p>"},{"location":"getting-started/running/#mend-renovate-on-premises","title":"Mend Renovate On-Premises","text":"<p>Mend Renovate On-Premises (WSOP) started out as a commercial product \"Renovate Pro\", but was renamed and made free to use when Renovate became a part of Mend (formerly WhiteSource) in 2019. It is built similarly to the \"full\" Renovate image described above, but with these differences:</p> <ul> <li>It is a stateful app and does not exit once it's processed all repositories</li> <li>It is installed as an App on GitHub, and behaves similarly on GitLab - for example responding to webhooks</li> <li>It includes a priority job queue which prioritizes events like merged PRs over scheduled jobs</li> <li>It is released every 1-2 months in a slower, more stable cadence than Renovate OSS, which releases on every commit</li> <li>It's licensed using an end-user license agreement (EULA) and not the Affero General Public License (AGPL)</li> </ul> <p>WSOP supports GitHub (both <code>github.com</code> and GitHub Enterprise Server) as well as GitLab self-hosted. Documentation can be found in its public GitHub repository <code>whitesource/renovate-on-prem</code>.</p>"},{"location":"getting-started/running/#mend-remediate","title":"Mend Remediate","text":"<p>Mend Remediate is an extension of WSOP available for Mend commercial customers, with full enterprise support. It is integrated with Mend's vulnerability detection capabilities and additionally supports the capability of \"horizontal\" scalability - the ability to configure many Renovate \"worker\" containers which share a common job queue in order to not conflict with each other.</p> <p>Mend Remediate supports GitHub Enterprise Server, GitLab self-hosted, and Bitbucket Server.</p>"},{"location":"getting-started/running/#forking-renovate-app","title":"Forking Renovate app","text":"<p>\"Forking Renovate\" is the sister app to the Mend Renovate App on GitHub.com. The difference is that Forking Renovate does not require <code>write</code> permissions to create branches within the repo, and instead submits PRs from its own fork. Because of how it works, it functions on public repositories only and additionally cannot support <code>automerge</code> capabilities.</p> <p>Install Forking Renovate from GitHub App.</p>"},{"location":"getting-started/running/#benefits","title":"Benefits","text":"<p>Forking Renovate needs only <code>read</code> level access to the code of any repository it runs on.</p>"},{"location":"getting-started/running/#drawbacks","title":"Drawbacks","text":"<p>If you use Forking Renovate, you'll miss out on these features of the regular Renovate app:</p> <ul> <li>Automerge is not supported</li> <li>The <code>baseBranches</code> config option is not supported</li> <li>The app dashboard (<code>app.renovatebot.com</code>) is currently not supported</li> </ul>"},{"location":"getting-started/running/#hosting-renovate","title":"Hosting Renovate","text":"<p>Once you have decided on a Renovate distribution, you need to decide where and how to run it.</p> <p>For the GitHub Action and GitLab Runner approaches, they will naturally run on their respective CI infrastructure. For the npm package approach or Docker images, you will need some form of VM or container infrastructure to run Renovate on.</p> <p>In all the above cases you will need to make sure that some form of cron-like capability exists to schedule when Renovate runs. In general we recommend to run Renovate hourly if possible.</p> <p>Mend Renovate On-Premises and Mend Remediate both run as long-lived containers so do not need any additional cron-like concept as it is built-in.</p>"},{"location":"getting-started/running/#global-config","title":"Global config","text":"<p>Renovate's server-side/admin config is referred to as its \"global\" config, and can be specified using either a config file, environment variables, or CLI parameters. By default Renovate checks if a file named <code>config.js</code> is present. Any other (<code>*.js</code>, <code>*.json</code>, <code>*.json5</code>, <code>*.yaml</code> or <code>*.yml</code>) file is supported, when you reference it with the <code>RENOVATE_CONFIG_FILE</code> environment variable (e.g. <code>RENOVATE_CONFIG_FILE=config.yaml</code>).</p> <p>Some config is global-only, meaning that either it is only applicable to the bot administrator or it can only be controlled by the administrator and not repository users. Those are documented in Self-hosted Configuration. Your bot's global config can include both global as well as non-global configuration options, while user/repo config can only include non-global options. It is recommended to keep as much of the non-global config as possible in repo config files in order to provide maximum transparency to end users.</p> <p>If you are configuring using environment variables, there are two possibilities:</p> <ul> <li>Upper-cased, camel-cased, <code>RENOVATE_</code>-prefixed single config options like <code>RENOVATE_TOKEN=abc123</code> or <code>RENOVATE_GIT_AUTHOR=a@b.com</code></li> <li>Set <code>RENOVATE_CONFIG</code> to a stringified version of the full JSON config, e.g. <code>RENOVATE_CONFIG='{\"token\":\"abc123\",\"gitAuthor\":\"a@b.com\"}'</code></li> </ul> <p>If you combine both of the above then any single config option in the environment variable will override what's in <code>RENOVATE_CONFIG</code>.</p> <p>Note</p> <p>It's also possible to change the default prefix from <code>RENOVATE_</code> using <code>ENV_PREFIX</code>. e.g. <code>ENV_PREFIX=RNV_ RNV_TOKEN=abc123 renovate</code>.</p>"},{"location":"getting-started/running/#using-configjs","title":"Using <code>config.js</code>","text":"<p>If you use a <code>config.js</code>, it will be expected to export a configuration via <code>module.exports</code>. The value can be either a plain JavaScript object like in this example where <code>config.js</code> exports a plain object:</p> <pre><code>module.exports = {\ntoken: 'abcdefg',\n};\n</code></pre> <p><code>config.js</code> may also export a <code>Promise</code> of such an object, or a function that will return either a plain JavaScript object or a <code>Promise</code> of such an object. This allows one to include the results of asynchronous operations in the exported value. An example of a <code>config.js</code> that exports an async function (which is a function that returns a <code>Promise</code>) can be seen in a comment for #10011: Allow autodiscover filtering for repo topic and more examples can be seen in <code>file.spec.ts</code>.</p>"},{"location":"getting-started/running/#authentication","title":"Authentication","text":"<p>Regardless of platform, you need to select a user account for <code>renovate</code> to assume the identity of, and generate a Personal Access Token. We recommend you use <code>@renovate-bot</code> as username if you're on a self-hosted server where you can set all usernames. We also recommend you configure <code>config.gitAuthor</code> with the same identity as your Renovate user, e.g. like <code>\"gitAuthor\": \"Renovate Bot &lt;renovate@whitesourcesoftware.com&gt;\"</code>.</p> <p>Warning</p> <p>We recommend you use a single, dedicated username for your Renovate bot. Never share the Renovate username with your other bots, as this can cause flip-flopping.</p>"},{"location":"getting-started/running/#docs","title":"Docs","text":"<p>Read the platform-specific docs to learn how to setup authentication on your platform:</p> <ul> <li>Azure DevOps</li> <li>Bitbucket Cloud</li> <li>Bitbucket Server</li> <li>Gitea and Forgejo</li> <li>github.com and GitHub Enterprise Server</li> <li>GitLab</li> </ul>"},{"location":"getting-started/running/#githubcom-token-for-release-notes","title":"GitHub.com token for release notes","text":"<p>If you are running on any platform except github.com, it's important to also configure the environment variable <code>GITHUB_COM_TOKEN</code> containing a Personal Access Token for github.com. This account can actually be any account on GitHub, and needs only read-only access. It's used when fetching release notes for repositories in order to increase the hourly API limit. It's also OK to configure the same as a host rule instead, if you prefer that.</p> <p>Note</p> <p>If you're using Renovate in a project where dependencies are loaded from github.com (such as Go modules hosted on GitHub) it is highly recommended to add a token. Otherwise you will exceed the rate limit from the github.com API, which will lead to Renovate closing and reopening PRs because it could not get reliable info on updated dependencies.</p>"},{"location":"getting-started/running/#self-hosting-examples","title":"Self-hosting examples","text":"<p>For more examples on running Renovate self-hosted, please read our Self-hosted examples page.</p>"},{"location":"getting-started/use-cases/","title":"Use Cases","text":"<p>This page describes common use cases for Renovate.</p>"},{"location":"getting-started/use-cases/#development-dependency-updates","title":"Development dependency updates","text":"<p>The original use case, and the most popular one, is for developers to automate dependency updating in their software projects.</p>"},{"location":"getting-started/use-cases/#updating-of-package-files","title":"Updating of package files","text":"<p>We use the term \"package file\" to describe files which reference dependencies. Package files are managed by a \"package manager\".</p> <p>Example package files include:</p> <ul> <li><code>package.json</code>, managed by npm or Yarn</li> <li><code>Gemfile</code>, managed by Bundler</li> <li><code>go.mod</code>, managed by <code>go</code> modules</li> </ul>"},{"location":"getting-started/use-cases/#how-renovate-updates-a-package-file","title":"How Renovate updates a package file","text":"<p>Renovate:</p> <ol> <li>Scans your repositories to find package files and their dependencies</li> <li>Checks if any newer versions exist</li> <li>Raises Pull Requests for available updates</li> </ol> <p>The Pull Requests patch the package files directly, and include Release Notes for the newer versions (if they are available).</p> <p>By default:</p> <ul> <li>You'll get separate Pull Requests for each dependency</li> <li>Major updates are kept separate from non-major updates</li> </ul>"},{"location":"getting-started/use-cases/#package-managers-with-lock-files","title":"Package managers with lock files","text":"<p>Many package managers support \"lock files\", which \"freeze\" the entire dependency tree including transitive dependencies. npm, Yarn, Bundler, Composer, Poetry, Pipenv, and Cargo all support or use lock files.</p> <p>If you use a lock file then changes to your package file must come with a compatible change to the lock file. Renovate can patch/update package files directly, but can't \"reverse engineer\" lock files. This is why Renovate lets the package manager do the lock file update. A simplified example:</p> <ol> <li>The repository has a <code>package.json</code> and <code>package-lock.json</code> with version <code>1.0.0</code> of a dependency</li> <li>Renovate sees that version <code>1.1.0</code> is available</li> <li>Renovate patches the <code>package.json</code> to change the dependency's version from <code>1.0.0</code> to <code>1.1.0</code></li> <li>Renovate runs <code>npm install</code> to let <code>npm</code> update the <code>package-lock.json</code></li> <li>Renovate commits the <code>package.json</code> and <code>package-lock.json</code></li> <li>Renovate creates the PR</li> </ol>"},{"location":"getting-started/use-cases/#custom-dependency-extraction","title":"Custom dependency extraction","text":"<p>Renovate supports 60+ types of package files. By default, Renovate finds most dependencies, but there are exceptions. This can be because:</p> <ul> <li>The package manager/file format is not supported, or</li> <li>The file format is not a standard or is proprietary</li> </ul> <p>If your dependencies are not found by default, you can use our \"regex\" manager to set your own custom patterns to extract dependencies. You configure the regex manager by telling it:</p> <ul> <li>Which file pattern(s) to match</li> <li>How to find the dependency name and version from within the file</li> <li>Which datasource (e.g. Docker registry, npm registry, etc) to use to look up new versions</li> </ul> <p>The end result is that Renovate can keep dependencies in custom file formats up-to-date as long as the dependency datasource is known to Renovate.</p>"},{"location":"getting-started/use-cases/#devops-tooling","title":"DevOps tooling","text":"<p>Renovate is increasingly used for purposes which are traditionally described as DevOps instead of Developer.</p>"},{"location":"getting-started/use-cases/#devops-infrastructure-as-code-updates","title":"DevOps / Infrastructure as Code updates","text":"<p>It's common for repositories to have DevOps-related files like CI/CD configs, or \"Infrastructure as Code\" (IaC) files. Examples of IaC files are Docker, Kubernetes or Terraform files. Renovate handles IaC files as \"package managers\" and \"package files\" and can find and update them.</p>"},{"location":"getting-started/use-cases/#docker-compatible-images","title":"Docker-compatible images","text":"<p>Docker-compatible images are a key building block of modern software. These images are commonly found in CI/CD pipeline configs or referenced in IaC files. Renovate finds these IaC files and then searches Docker registries to see if there are newer tags or digests.</p>"},{"location":"getting-started/use-cases/#tag-based-updating","title":"Tag-based updating","text":"<p>An example of tag-based updating are <code>node</code> images from Docker Hub. The <code>node</code> images use these tag formats:</p> <ul> <li><code>14.17.4</code></li> <li><code>14.17.4-alpine3.11</code></li> </ul> <p>Renovate understands both formats and raises updates like these:</p> <ul> <li>From <code>14.17.4</code> to <code>14.17.5</code></li> <li>From <code>14.17.4-alpine3.11</code> to <code>14.17.5-alpine3.11</code></li> </ul>"},{"location":"getting-started/use-cases/#docker-digests","title":"Docker digests","text":"<p>You can check and update versions like <code>14.17.4</code> yourself. But looking up image digests like <code>341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9</code> and updating them yourself doesn't scale. So let Renovate update your Docker digests.</p> <p>You can even configure Renovate to \"pin\" your Docker digests. When you're using tag+digest based images, you'll have immutable builds.</p>"},{"location":"getting-started/use-cases/#internal-package-updates","title":"Internal package updates","text":"<p>Your company typically has dozens of repositories, if not hundreds or thousands. These repositories often rely on other repositories and may have upstream or downstream internal dependencies. In such cases, it is best practice to:</p> <ul> <li>Update downstream links as soon as possible, and</li> <li>Keep internal version use as consistent as possible</li> </ul> <p>You can use Renovate to follow this best practice. Renovate finds and updates internal dependencies just like external or Open Source dependencies.</p>"},{"location":"getting-started/use-cases/#automerge-internal-dependencies","title":"Automerge internal dependencies","text":"<p>Renovate's automerge feature is really useful for internal dependencies where you can say \"if it passes tests let's merge it\".</p> <p>To learn more about \"automerge\" read the key concepts, automerge documentation.</p>"},{"location":"getting-started/use-cases/#example-of-automerging-internal-dependencies","title":"Example of automerging internal dependencies","text":"<p>We use these Renovate features to automerge an internal dependency:</p> <ul> <li>Git submodule support</li> <li><code>automerge</code> set to <code>true</code></li> <li><code>automergeType</code> set to <code>branch</code></li> </ul>"},{"location":"getting-started/use-cases/#background-information","title":"Background information","text":"<p>We split our work over two repositories:</p> <ol> <li>The <code>renovatebot/renovate</code> repository, which has the Renovate code, and most of the Markdown documentation files</li> <li>The <code>renovatebot/renovatebot.github.io</code> repository, which has a submodule link to the <code>renovatebot/renovate</code> repository</li> </ol>"},{"location":"getting-started/use-cases/#update-process","title":"Update process","text":"<ol> <li>We edit our documentation files on the main Renovate repository <code>renovatebot/renovate</code></li> <li>Renovate sees the change(s) to the <code>renovatebot/renovate</code> Git submodule, and creates an update branch on the documentation build repository</li> <li>If the tests pass Renovate automerges the update branch into the <code>main</code> branch.</li> <li>A GitHub Actions workflow runs on <code>main</code> to build the documentation site and push the build live on our GitHub Pages domain</li> </ol>"},{"location":"getting-started/use-cases/#benefits","title":"Benefits","text":"<p>The way we've set things up means we avoid:</p> <ul> <li>reviewing PRs</li> <li>manually merging PRs</li> </ul> <p>In fact we don't even get the update PR anymore!</p>"},{"location":"getting-started/use-cases/#advanced-configuration","title":"Advanced configuration","text":"<p>The capabilities listed below are commonly needed for all the above use cases.</p>"},{"location":"getting-started/use-cases/#batched-updates","title":"Batched updates","text":"<p>Renovate defaults to separating each dependency update into its own PR. But you may want to batch or \"group\" updates together. For example, group all patch updates into one PR or even all non-major updates together (patches and minor updates).</p> <p>You can configure batched updates by setting a <code>groupName</code> as part of <code>packageRules</code>.</p>"},{"location":"getting-started/use-cases/#scheduled-updates","title":"Scheduled updates","text":"<p>You may want to limit the times when Renovate is allowed to raise updates. This reduces \"noise\" during your working hours, and reduces the chance of CI contention. You can tell Renovate to \"not bother you\" during times when you're using the CI resources, or want to focus on your work.</p> <p>You can set the time ranges during which Renovate creates updates in the <code>schedule</code> field.</p>"},{"location":"getting-started/use-cases/#on-demand-updates-via-dependency-dashboard","title":"On-demand updates via Dependency Dashboard","text":"<p>You can use Renovate's \"Dependency Dashboard\" on platforms which support dynamic Markdown checkboxes:</p> <ul> <li>Gitea and Forgejo</li> <li>GitHub</li> <li>GitLab</li> </ul> <p>When you enable the Dependency Dashboard, Renovate creates a \"Dependency Dashboard\" issue. This issue lists all updates which are pending, in progress, or were previously closed ignored.</p> <p>If you want to get an update ahead of schedule, or want to retry a previously closed update: select the update's checkbox in the Dependency Dashboard.</p>"},{"location":"getting-started/use-cases/#dependency-dashboard-approval","title":"Dependency Dashboard Approval","text":"<p>If you enable the Dependency Dashboard you can opt-in to a different workflow for some, or even all of your packages. We call this the \"Dependency Dashboard Approval\" workflow.</p> <p>Here's how it works:</p> <ul> <li>You tell Renovate which package updates need \"Dashboard Approval\" by setting a custom <code>packageRule</code></li> <li>Renovate only raises updates for packages that need \"Dashboard Approval\" after you select the corresponding checkbox on the dashboard</li> </ul>"},{"location":"getting-started/use-cases/#benefits-of-using-dependency-dashboard-approval","title":"Benefits of using Dependency Dashboard Approval","text":"<p>Benefits of using Dependency Dashboard Approval:</p> <ul> <li>By not raising PRs automatically, it allows you to request updates on-demand when you're ready, and</li> <li>It offers you an alternative to permanently ignoring/disabling certain types of updates, like major updates</li> </ul> <p>When you use the Dependency Dashboard Approval workflow you have full visibility and control over your updates.</p>"},{"location":"getting-started/use-cases/#configuration-presets","title":"Configuration presets","text":"<p>You may run Renovate on many, or even all your repositories. This also means that you might want a similar config for all of your repositories. You can use configuration \"presets\" to avoid duplicating your configuration across your repositories.</p> <p>Configuration presets are JSON configuration files which are committed to repositories and then referenced from others. Renovate includes over 100 built-in presets, like the default recommended <code>config:base</code> preset.</p> <p>The typical workflow for a company is:</p> <ul> <li>Create a dedicated repository to store the company's default Renovate settings</li> <li>Set that repository as the default <code>extends</code> value when onboarding new repositories</li> </ul> <p>This means that repositories get the centralized config by default, and any changes made to the centralized config repository are propagated to other repositories immediately.</p>"},{"location":"getting-started/use-cases/#how-others-use-renovate","title":"How others use Renovate","text":"<p>You can learn a lot by seeing how others use Renovate. Check out the Swissquote user story.</p>"},{"location":"key-concepts/automerge/","title":"Introduction","text":"<p>Automerging is a Renovate feature that you can use to automate upgrading dependencies. When enabled, Renovate tries to merge the proposed update once the tests pass.</p> <p>Keep in mind that Renovate automerges take a bit of time, do not expect Renovate to automerge a PR the second it opens and passes tests. Wait for at least an hour or two before troubleshooting to ensure that Renovate has had the time to run once in a state where tests have passed and the branch is up-to-date with its base branch. If you or others keep committing to the default branch then Renovate cannot find a suitable gap to automerge into!</p> <p>Once a branch is automerged, the \"Git state\" needs to be recalculated for every remaining branch. At times, merging one branch could result in another branch's updates being changed or even removed as unnecessary. Renovate's approach is to ensure that automerging branches are up-to-date with their target branch before automerging. This means merging multiple branches in a row won't work reliably, so we prefer not to do that. What all this means is that Renovate will only automerge at most one branch/PR per target branch per run, before you need to wait for the next run.</p> <p>As a general guide, we recommend that you enable automerge for any type of dependency updates where you would just select \"merge\" anyway. For any updates where you want to review the release notes - or code - before you merge, you can keep automerge disabled.</p> <p>Automerge works particularly well for <code>devDependencies</code> as well as for production <code>dependencies</code> in projects which have great test coverage.</p> <p>For example, if you have Jest or Mocha as a development dependency, and it has an upgrade with passing tests... automerge them! If you have a linter like ESLint or TSLint and its update passes... automerge them! If you have an API with 100% test coverage and Express is updated... automerge it!</p> <p></p>"},{"location":"key-concepts/automerge/#configuration-examples","title":"Configuration examples","text":""},{"location":"key-concepts/automerge/#automerge-lock-file-maintenance","title":"Automerge lock file maintenance","text":"<p>The lowest risk type of update to automerge is probably <code>lockFileMaintenance</code>. When Renovate performs lock file maintenance, it leaves the project dependency definitions unchanged, but refreshes the lock file completely so that the latest versions according to the package file constraints are installed. Here is an example of automerging lock file maintenance:</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"enabled\": true,\n\"automerge\": true\n}\n}\n</code></pre>"},{"location":"key-concepts/automerge/#automerge-lint-tool-updates","title":"Automerge lint tool updates","text":"<p>Automerging lint tool updates can be a real time-saver. Sometimes an update to a lint tool or plugin definition causes tests to fail, and that is usually deliberate/intentional because the lint authors have added a new rule that you need to adhere to. But in many cases the new version(s) will pass tests, and if so then there's really nothing else to consider before merging, so they may as well be automerged:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDepTypes\": [\"devDependencies\"],\n\"matchPackagePatterns\": [\"lint\", \"prettier\"],\n\"automerge\": true\n}\n]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#automerge-non-major-updates","title":"Automerge non-major updates","text":"<p>Non-major updates in SemVer ecosystems shouldn't have breaking changes (if they follow the spec), so many users enable automerge for these too:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchUpdateTypes\": [\"minor\", \"patch\"],\n\"matchCurrentVersion\": \"!/^0/\",\n\"automerge\": true\n}\n]\n}\n</code></pre> <p>The <code>matchCurrentVersion</code> setting above is a rule to exclude any dependencies which are pre-1.0.0 because those can make breaking changes at any time according to the SemVer spec.</p>"},{"location":"key-concepts/automerge/#automerge-monorepo-prs","title":"Automerge monorepo PRs","text":"<p>Say you want to automerge <code>patch</code> and <code>minor</code> updates for packages in the <code>group:ionic-nativeMonorepo</code> preset:</p> <pre><code>{\n\"packageRules\": [\n{\n\"extends\": [\"monorepo:ionic-native\"],\n\"matchUpdateTypes\": [\"patch\", \"minor\"],\n\"automerge\": true\n}\n]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#faster-merges-with-platform-native-automerge","title":"Faster merges with platform-native automerge","text":"<p>You can speed up merges by letting Renovate use your platform's native automerge. The config option is called <code>platformAutomerge</code>. If <code>automerge=true</code> and <code>automergeType=pr</code> then you can set <code>platformAutomerge=true</code>.</p> <p>For example:</p> <pre><code>{\n\"lockFileMaintenance\": {\n\"enabled\": true,\n\"automerge\": true,\n\"automergeType\": \"pr\",\n\"platformAutomerge\": true\n}\n}\n</code></pre> <p>For more information read <code>platformAutomerge</code>.</p>"},{"location":"key-concepts/automerge/#github-merge-queue","title":"GitHub Merge Queue","text":"<p>Renovate supports GitHub's Merge Queue.</p> <p>Read the GitHub Docs, managing a merge queue first.</p> <p>The steps to enable GitHub's Merge Queue differ based on whether you use GitHub Actions or another CI provider.</p> <p>GitHub Merge Queue overview page</p> <p>GitHub has a page that shows all the PRs in the Merge Queue. The page link follows this pattern: <code>https://github.com/organization-name/repository-name/queue/base-branch-name</code>. For example, here's Renovate's main repository's Merge Queue overview.</p> <p>GitHub Merge Queue is in beta</p> <p>GitHub's Merge Queue feature is labeled as a beta feature by GitHub. The Merge Queue may stop working, have bugs, or you may need to update your configuration when GitHub changes things.</p>"},{"location":"key-concepts/automerge/#if-you-use-github-actions","title":"If you use GitHub Actions","text":"<p>If you use GitHub Actions as your CI provider, follow these steps:</p> <p>Add the <code>on.merge_group</code> event to your GitHub Action <code>.yaml</code> files, for example:</p> <pre><code>on:\npull_request:\nmerge_group:\n</code></pre> <p>On <code>github.com</code>, go to your repository's \"homepage\", click on Settings, scroll down to the Pull Requests section and enable the \"Allow auto-merge\" checkbox.</p> <p>Then go to your repository's branch protection rules for your base branch (usually <code>main</code>) and enable the \"Require merge queue\" setting. Confirm you've set the correct \"required checks\" for your base branch.</p> <p>Finally, allow Renovate to automerge by setting <code>automerge=true</code> and <code>platformAutomerge=true</code> in your Renovate config file, for example:</p> <pre><code>{\n\"platformAutomerge\": true,\n\"packageRules\": [\n{\n\"description\": \"Automerge non-major updates\",\n\"matchUpdateTypes\": [\"minor\", \"patch\"],\n\"automerge\": true\n}\n]\n}\n</code></pre>"},{"location":"key-concepts/automerge/#if-you-dont-use-github-actions","title":"If you don't use GitHub Actions","text":"<p>If you don't use GitHub Actions as your CI provider, follow these steps:</p> <p>Update your CI provider's configuration so it also runs tests on the temporary <code>gh-readonly-queue/{base_branch}</code> branches, read your CI providers's documentation to learn how to do this.</p> <p>On <code>github.com</code>, go to your repository's \"homepage\", click on Settings, scroll down to the Pull Requests section and enable the \"Allow auto-merge\" checkbox. Go to your repository's branch protection rules for your base branch (usually <code>main</code>) and enable the \"Require merge queue\" setting. Confirm you've set the correct \"required checks\" for your base branch.</p> <p>Finally, allow Renovate to automerge by setting <code>automerge=true</code> and <code>platformAutomerge=true</code> in your Renovate config file (see earlier example).</p>"},{"location":"key-concepts/automerge/#automerging-and-scheduling","title":"Automerging and scheduling","text":"<p>Automerging is particularly beneficial if you have configured a schedule, because Renovate on its own may be able to automerge the majority of your updates. And this is especially so if your repository needs rebasing, like when you use lock files. Let's say you have dependencies <code>abc</code> and <code>xyz</code> with upgrades, and you use a <code>yarn.lock</code> file.</p> <ul> <li>At the start of the schedule, <code>Renovate</code> will create branches for <code>abc</code> and <code>xyz</code> upgrades, including <code>yarn.lock</code> updates</li> <li>After <code>abc</code> passes tests, <code>Renovate</code> will automerge it into the base branch</li> <li>The <code>xyz</code> branch has a <code>yarn.lock</code> conflict now</li> <li>Renovate will immediately check all other branches and rebase them</li> <li>The change to <code>xyz</code> branch will trigger another round of CI tests</li> <li>After the updated <code>xyz</code> branch passes, Renovate will automerge it too</li> </ul> <p>This is a lot better than you waking up to two PRs and then having to deal with conflicts yourself after you merge the first one.</p>"},{"location":"key-concepts/automerge/#branch-vs-pr-automerging","title":"Branch vs PR automerging","text":"<p>Even if you automerge PRs, you are likely to still get notification noise - one when the PR is created and another when it is merged. For this reason we recommend you consider setting <code>automergeType=branch</code> which will mean:</p> <ul> <li>Renovate first creates a branch and no PR</li> <li>If tests pass, Renovate pushes a commit directly to the base branch without PR</li> <li>If tests fail, Renovate raises a PR for you to review</li> </ul> <p>Add the <code>renovate/**</code> branch to your testing workflow files, or Renovate will not work properly with the <code>automergeType=branch</code> setting.</p> <p>The result is that passing updates are essentially \"silent\" - the only sign of them are the commits Renovate pushes to your base branch. If you have enabled branch protection which prevents Renovate from automerging directly to the base branch, then this won't work and you should stick with the default PR-based automerging instead.</p>"},{"location":"key-concepts/automerge/#assignees-and-reviewers","title":"Assignees and Reviewers","text":"<p>When automerge is enabled on a PR, Renovate will not add assignees or reviewers at PR creation time, in order to decrease notifications noise a little. If tests subsequently fail, making automerge not possible, then Renovate will add the configured assignees and/or reviewers.</p> <p>Note: Renovate won't add assignees and reviewers to a PR with failing checks if the PR already has assignees or reviewers present. If there are accounts you wish to ignore (i.e. add assignees and reviewers regardless) then add them to <code>ignoreReviewers</code> to specify those which should be filtered out in such consideration.</p>"},{"location":"key-concepts/automerge/#frequent-problems-and-how-to-resolve-them","title":"Frequent problems and how to resolve them","text":""},{"location":"key-concepts/automerge/#automerge-not-enabled-correctly-in-config","title":"Automerge not enabled correctly in config","text":"<p>Sometimes, the reason Renovate is not automerging a PR is because of a configuration mistake. You can confirm that Renovate knows you want it to automerge by checking if the PR body includes the text \"Automerge: Enabled\". If you see \"Automerge: Disabled by config\" it means you need to make a config change for automerge to work.</p>"},{"location":"key-concepts/automerge/#absence-of-tests","title":"Absence of tests","text":"<p>By default, Renovate will not automerge until it sees passing status checks / check runs for the branch. If you have no tests but still want Renovate to automerge, you need to add <code>\"ignoreTests\": true</code> to your configuration.</p> <p>Tip</p> <p>We strongly recommend you have tests in any project where you are regularly updating dependencies.</p>"},{"location":"key-concepts/automerge/#committer-restrictions","title":"Committer restrictions","text":"<p>If you have protected your base branch with a list of allowed committers, and Renovate is not on that list, then naturally automerge can't work.</p>"},{"location":"key-concepts/automerge/#pull-requests-required","title":"Pull Requests Required","text":"<p>If you have configured your project to require Pull Requests before merging, it means that branch automerging is not possible, even if Renovate has rights to commit to the base branch.</p>"},{"location":"key-concepts/automerge/#required-pull-request-reviews","title":"Required Pull Request reviews","text":"<p>If you have mandatory Pull Request reviews then it means Renovate can't automerge its own PR until such a review has happened.</p> <p>If you're on <code>github.com</code> or GitHub Enterprise Server (<code>&gt;=3.4</code>) you can let Renovate bypass the mandatory Pull Request reviews using the \"Allow specified actors to bypass required pull requests\" option in your branch protection rules.</p> <p>Alternatively, if you are running the hosted Mend Renovate App on <code>github.com</code>, you can also install the helper apps renovate-approve and renovate-approve-2 and they will mark all automerging Pull Requests by Renovate as approved. These approval helper apps are only available for GitHub.</p>"},{"location":"key-concepts/automerge/#codeowners","title":"Codeowners","text":"<p>Depending on the platform, having a <code>CODEOWNERS</code> file could block automerging, because it means a code owner must review the PR.</p>"},{"location":"key-concepts/automerge/#overriding-global-automerge","title":"Overriding global automerge","text":"<p>You might have setup a global configuration in a <code>.github</code> repository, that has a <code>renovate.json</code> file that turns on automerge for certain dependencies. It does not matter where you've put the global config, the important point in this example is that you're extending from a global config that's somewhere else. For this example we'll assume you put your config in a repository on GitHub, called <code>.github</code>.</p> <p>Repositories in the organization all extend from this global configuration, and so they \"inherit\" the automerge settings as well.</p> <p>To turn off automerge for all dependencies of a selected repository, you need to make a config that overrides all <code>packageRules</code> in the repository's <code>renovate.json</code> file, like this:</p> <pre><code>{\n\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n\"extends\": [\"local&gt;org-name/.github:renovate-config\"],\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"*\"],\n\"automerge\": false\n}\n]\n}\n</code></pre>"},{"location":"key-concepts/dashboard/","title":"Introduction","text":"<p>Renovate has a Dependency Dashboard that shows an overview of the state of your repositories' dependencies.</p> <p>When the Dependency Dashboard is enabled, Renovate will create a new issue in the repository. This issue has a \"dashboard\" where you can get an overview of the status of all updates.</p> <p>Having the Dependency Dashboard also enables the concept of an \"approval\" workflow for new upgrades, either for selected dependencies (recommended) or even for all.</p>"},{"location":"key-concepts/dashboard/#supported-platforms","title":"Supported platforms","text":"<p>The Dependency Dashboard requires that the host platforms supports the concept of issues with dynamic Markdown checkboxes. Read our FAQ, Renovate core features not supported on all platforms to see if your platform can use the Dependency Dashboard feature.</p>"},{"location":"key-concepts/dashboard/#how-to-enable-the-dashboard","title":"How to enable the dashboard","text":"<p>To turn on the Dashboard manually, add the <code>:dependencyDashboard</code> preset to your <code>extends</code> array in the Renovate configuration file:</p> <pre><code>{\n\"extends\": [\"config:base\", \":dependencyDashboard\"]\n}\n</code></pre> <p>Or set <code>dependencyDashboard</code> to <code>true</code>:</p> <pre><code>{\n\"dependencyDashboard\": true\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#how-to-disable-the-dashboard","title":"How to disable the dashboard","text":"<p>To disable the Dependency Dashboard, add the preset <code>:disableDependencyDashboard</code> or set <code>dependencyDashboard</code> to <code>false</code>.</p> <pre><code>{\n\"extends\": [\"config:base\", \":disableDependencyDashboard\"]\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#use-cases","title":"Use cases","text":"<p>This section explains some common use cases where having the Dependency Dashboard can help.</p>"},{"location":"key-concepts/dashboard/#visibility-into-rejecteddeferred-updates","title":"Visibility into rejected/deferred updates","text":"<p>Renovate's Dependency Dashboard shows an overview of all updates that are still \"to do\".</p> <p>If you close an update PR from Renovate without merging, the Dashboard will list this update in the Closed/Ignored section. If you later change your mind about the update, you can get a new PR by selecting the corresponding checkbox on the dashboard.</p>"},{"location":"key-concepts/dashboard/#dependency-dashboard-approval-workflow","title":"Dependency Dashboard Approval workflow","text":"<p>Sometimes you want Renovate to wait for your approval before creating an update PR. You can customize this \"wait for approval\" behavior however you like best.</p> <p>At a high level the options are:</p> <ul> <li>Require approval for all updates</li> <li>Require approval for a type of updates (<code>major</code> for example)</li> <li>Require approval for specific packages</li> </ul> <p>You can mix and match these options as well.</p>"},{"location":"key-concepts/dashboard/#require-approval-for-all-updates","title":"Require approval for all updates","text":"<p>We do not recommend that you require approval for all updates. When you require prior approval, you need to check the dashboard issue regularly to check for important updates. You'll probably forget to check often enough, and out of sight means out of mind!</p> <p>Maybe you find Renovate too noisy, and want to opt-out of getting automatic updates whenever they're ready.</p> <p>In this case, you can tell Renovate to wait for your approval before making any pull requests. This means that you have full control over when you get updates.</p> <p>But vulnerability remediation PRs will still get created immediately without requiring approval.</p> <p>To require manual approval for all updates, add the <code>:dependencyDashboardApproval</code> presets to the <code>extends</code> array in your Renovate configuration file:</p> <pre><code>{\n\"extends\": [\"config:base\", \":dependencyDashboardApproval\"]\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#require-approval-for-major-updates","title":"Require approval for major updates","text":"<p>Major updates often have breaking changes which require manual changes in your code before they can be merged. So maybe you only want to get major updates when you have sufficient time to check them carefully.</p> <p>Dependency Dashboard Approval is far superior to disabling major updates because at least you can fully see what's pending on the dashboard, instead of updates being totally invisible.</p> <p>If you want to require approval for major updates, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>major</code> object:</p> <pre><code>{\n\"major\": {\n\"dependencyDashboardApproval\": true\n}\n}\n</code></pre>"},{"location":"key-concepts/dashboard/#require-approval-for-specific-packages","title":"Require approval for specific packages","text":"<p>Sometimes you only want to update specific packages when you say so.</p> <p>Maybe a package doesn't follow Semantic Versioning, and has breaking changes on every new release, so you want to update on your terms.</p> <p>Or maybe you have a package that updates too rapidly for you to keep up with, and you want to update once in a while manually.</p> <p>If you want to approve specific packages, set <code>dependencyDashboardApproval</code> to <code>true</code> within a <code>packageRules</code> entry where you have defined a specific package or pattern.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackagePatterns\": [\"^@somescope\"],\n\"dependencyDashboardApproval\": true\n}\n]\n}\n</code></pre>"},{"location":"key-concepts/presets/","title":"Presets","text":"<p>This document describes Renovate configuration presets and why you should use them.</p> <p>To learn how to create your own presets, how to host them, and how to extend from presets read the Shareable Config Presets page.</p>"},{"location":"key-concepts/presets/#why-you-should-use-presets","title":"Why you should use presets","text":"<p>Use presets to:</p> <ul> <li>Set up the bot with good default settings</li> <li>Reduce duplication of your configuration</li> <li>Share your configuration with others</li> <li>Use somebody else's configuration and extend it with your own rules</li> </ul>"},{"location":"key-concepts/presets/#how-to-use-presets","title":"How to use presets","text":"<p>Let's say you're using the <code>config:base</code> preset, and want to pin your GitHub Action digests. Instead of writing your own Renovate config, you search through Renovate's built-in presets. You find the the <code>helpers:pinGitHubActionDigests</code> preset and add it to the <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\"config:base\", \"helpers:pinGitHubActionDigests\"]\n}\n</code></pre> <p>Renovate now follows the rules for <code>config:base</code> plus the rules for <code>helpers:pinGitHubActionDigests</code>. If there is a logical conflict between presets, then the last preset in the array wins.</p>"},{"location":"key-concepts/presets/#managing-config-for-many-repositories","title":"Managing config for many repositories","text":"<p>If you manage Renovate for many repositories, then you should create a global preset configuration. Then you extend the global preset in each repository. This way you have all global configuration in a single file, in a single repository.</p>"},{"location":"key-concepts/presets/#presets-are-modular","title":"Presets are modular","text":"<p>Preset configs are modular, they can be as small as a single package rule or as large as an entire configuration, just like an ESLint config.</p>"},{"location":"key-concepts/presets/#built-in-presets","title":"Built-in presets","text":"<p>Renovate comes with a lot of built-in presets that you can use. Browse Renovate's default presets to find any that are useful to you. Once you find a preset you like, put it in an <code>extends</code> array in your config file.</p>"},{"location":"key-concepts/presets/#contributing-a-new-built-in-preset","title":"Contributing a new built-in preset","text":"<p>If you have a Renovate config that may help others, you can put it into Renovate's built-in presets.</p> <p>Read Contributing to presets to learn how.</p>"},{"location":"key-concepts/presets/#summary","title":"Summary","text":"<p>In short:</p> <ul> <li>Browse Renovate's default presets to find any that are useful to you</li> <li>Publish your own if you wish to reuse them across repositories</li> </ul>"},{"location":"key-concepts/pull-requests/","title":"Pull requests","text":"<p>This page describes how Renovate pull requests work.</p>"},{"location":"key-concepts/pull-requests/#how-renovate-finds-existing-prs","title":"How Renovate finds existing PRs","text":"<p>Renovate does not need to maintain any database/state about open or closed Pull Requests. Instead, it uses the code platform's APIs to search and find such PRs.</p> <p>Renovate finds existing PRs (open or closed) by matching both:</p> <ul> <li>the branch name, for example: <code>renovate/lodash-4.x</code>,</li> <li>and the Pull Request title, for example: <code>Update lodash to v4.17.21</code></li> </ul> <p>In cases like the above, there is typically one existing PR with a matching branch name and PR title. But if you group PRs and use titles like \"All non-major updates\", then multiple past PRs may match.</p>"},{"location":"key-concepts/pull-requests/#normal-prs","title":"Normal PRs","text":"<p>As explained above, Renovate PRs normally have some \"uniqueness\" in their title relating to the version in the upgrade. When you close a \"unique\" PR, Renovate assumes you don't want to see that PR again in future, for example:</p> <ol> <li>You ignored <code>lodash@4.17.21</code> by closing Renovate's PR</li> <li>Renovate assumes you don't want any updates to <code>4.17.21</code> of <code>lodash</code></li> <li>Renovate creates a new PR when the branch + title \"uniqueness\" exists again, like when <code>lodash@4.17.22</code> releases</li> </ol> <p>Renovate behaves similarly for <code>major</code> updates, for example:</p> <ol> <li>You ignored a <code>major</code> update for Lodash (pr title: \"Update lodash to v4\") by closing Renovate's PR</li> <li>Renovate assumes you don't want any updates to <code>v4</code> of <code>lodash</code></li> <li>Renovate won't create any update PRs for <code>v4</code> of <code>lodash</code>, even if there are newer versions of <code>v4</code></li> </ol>"},{"location":"key-concepts/pull-requests/#immortal-prs","title":"Immortal PRs","text":"<p>Some Renovate pull requests have a section like this:</p> <p>\ud83d\udc7b Immortal: This PR will be recreated if closed unmerged. Get config help if that's undesired.</p> <p>An immortal PR keeps popping up again after you close it.</p> <p>This document explains why we have immortal PRs, and how you can fix them.</p>"},{"location":"key-concepts/pull-requests/#why-we-have-immortal-prs","title":"Why we have immortal PRs","text":"<p>First off, we don't have immortal PRs for some philosphical reason like: \"don't ignore this update, it's good for you!\". We just have no way to ignore some PRs after they're closed.</p>"},{"location":"key-concepts/pull-requests/#branch-name-and-pr-title-are-cache-keys","title":"Branch name and PR title are cache keys","text":"<p>Renovate uses the branch name and PR title like a cache key. If the same key exists and the PR was closed, then we ignore the PR.</p>"},{"location":"key-concepts/pull-requests/#cache-keys-can-cause-problems","title":"Cache keys can cause problems","text":"<p>Let's say you have an \"All non-major updates\" PR. If you close the PR, and Renovate ignores it based on the PR title, then you would never get a non-major update again.</p>"},{"location":"key-concepts/pull-requests/#only-unique-version-prs-can-be-ignored","title":"Only unique version PRs can be ignored","text":"<p>Renovate can only ignore PRs if they have a unique version, like \"to v16.1.2\" or \"to v16\" in the title.</p>"},{"location":"key-concepts/pull-requests/#grouped-updates-with-different-versions","title":"Grouped updates with different versions","text":"<p>The problem comes when there are groups of updates which have different versions. Then the update becomes \"Update react (major)\", which is not safely ignorable, instead of \"Update react to v16\".</p>"},{"location":"key-concepts/pull-requests/#future-plans-for-immortal-prs","title":"Future plans for immortal PRs","text":"<p>In the future we may embed metadata in each PR identifying the exact files and packages + versions that PR contains. Then we could allow such PRs to be closed/ignored but then as soon as there's any chance to files/packages/versions being updated then we'd be cache busted and create a new PR. If you regularly wish to close immortal PRs, it's an indication that you may be grouping too widely.</p>"},{"location":"key-concepts/pull-requests/#how-to-fix-immortal-prs","title":"How to fix immortal PRs","text":"<p>Avoid grouping dependencies together which have different versions, or which you have a high chance of wanting to ignore.</p>"},{"location":"key-concepts/pull-requests/#major-updates-require-dependency-dashboard-approval","title":"Major updates require Dependency Dashboard approval","text":"<p>Avoid grouping major upgrades together unless they are related dependencies. Instead, set <code>\"dependencyDashboardApproval\": true</code> for major updates so that you have control about when they are created.</p>"},{"location":"key-concepts/pull-requests/#ignoring-prs","title":"Ignoring PRs","text":"<p>To ignore a PR you just close it unmerged.</p> <p>Note</p> <p>Renovate will re-create any PRs that is marked \"immortal\". What this means is that any immortal PR you close, will pop up again the next time Renovate runs. To ignore immortal PRs, follow the advice in the How to fix immortal PRs section.</p>"},{"location":"key-concepts/scheduling/","title":"Renovate scheduling","text":"<p>This document describes Renovate's scheduling.</p>"},{"location":"key-concepts/scheduling/#default-behavior","title":"Default behavior","text":"<p>By default, Renovate bot runs as often as its administrator has configured it to (e.g. hourly, daily, etc.). The exact frequency at which Renovate can process individual repositories depends on the combination of how often it runs, how many repositories are installed, and whether there's a lot of work to be done in each repository (e.g. if a commonly used dependency has recently gotten a new update, which triggers a lot of PRs to be created).</p> <p>By default, Renovate schedules use the UTC timezone. You can override the default timezone by setting your own <code>timezone</code> config option.</p>"},{"location":"key-concepts/scheduling/#global-schedule-vs-specific-schedule","title":"Global schedule vs specific schedule","text":"<p>When we talk about scheduling Renovate, there are 2 senses in which you can schedule Renovate:</p> <ul> <li>A global sense: when the bot is allowed to do work at all. This is determined by the bot admin using tools such as <code>cron</code></li> <li>A specific sense: when Renovate is allowed to look for updates to a specific dependency</li> </ul> <p>While as an end user you may think of scheduling in terms of when you allow it to raise updates, it's important to remember that such updates can only occur if the bot gets the opportunity to run within the schedule window you provide.</p> <p>Because Renovate defaults to \"always on\" and \"open PRs right away\" it can be overwhelming your repository with notifications of new PRs. To reduce overwhelm, we provide scheduling tools.</p> <p>You may want to update certain repositories less often, or you may even want to use different schedules for specific packages.</p>"},{"location":"key-concepts/scheduling/#scheduling-use-cases","title":"Scheduling use cases","text":"<p>Some common reasons to schedule when Renovate runs:</p> <ul> <li>Make Renovate run outside office hours, to free up continuous integration resources for developers during the day</li> <li>Get updates for certain packages on a regular interval instead of right away</li> <li>Reduce Renovate bot PR notifications during the day</li> </ul>"},{"location":"key-concepts/scheduling/#customizing-the-schedule","title":"Customizing the schedule","text":"<p>You can customize when Renovate runs, by using the <code>timezone</code> and <code>schedule</code> configuration options.</p> <p>At a high level you need to follow these steps:</p> <ol> <li>Tell Renovate what <code>timezone</code> you want to use</li> <li>Learn about the scheduling syntax</li> <li>Optional: configure an \"in repository schedule\"</li> <li>Optional: create packageRules with a custom <code>schedule</code> for specific packages</li> </ol>"},{"location":"key-concepts/scheduling/#setting-your-timezone","title":"Setting your timezone","text":"<p>By default, Renovate schedules use the UTC timezone. If you want Renovate to use your local time, use the <code>timezone</code> configuration option. The timezone must be a valid IANA time zone.</p> <p>You can set a specific time zone in your local config file like this:</p> <pre><code>{\n\"timezone\": \"America/Los_Angeles\"\n}\n</code></pre> <p>Read our docs on the timezone configuration option.</p>"},{"location":"key-concepts/scheduling/#scheduling-syntax","title":"Scheduling syntax","text":"<p>After you've set your local timezone, you can define \"days of the week\" or \"hours of the day\" in which Renovate is allowed to make changes.</p> <p>Examples of the kind of schedules you can create include:</p> <pre><code>every weekend\nbefore 5:00am\n[after 10pm, before 5:00am]\n[after 10pm every weekday, before 5am every weekday]\non friday and saturday\n</code></pre> <p>Warning</p> <p>Renovate does not support scheduled minutes or \"at an exact time\" granularity. Granularity must be at least one hour.</p> <p>Renovate uses the @breejs/later library to parse the text, so Renovate is limited to that library's syntax support. Read the parser documentation at breejs.github.io/later/parsers.html#text for more details. The @breejs/later library also handles the concepts of \"days\", time_before\", and \"time_after\".</p>"},{"location":"key-concepts/scheduling/#in-repository-schedule-configuration","title":"In repository schedule configuration","text":"<p>Reminder: the times when the Renovate process runs are controlled by the bot admin using tools such as <code>cron</code>. If you use the GitHub hosted app, the default is that Renovate will always be allowed to run.</p> <p>Be sure to schedule enough time for Renovate to process your repository. Do not set schedules like \"Run Renovate for an hour each Sunday\" as you will run into problems.</p> <p>Say you want Renovate bot to run each day before 2 am:</p> <pre><code>{\n\"schedule\": [\"before 2am\"]\n}\n</code></pre> <p>Or you could tell Renovate to run outside of common office hours like this:</p> <pre><code>{\n\"schedule\": [\n\"after 10pm every weekday\",\n\"before 5am every weekday\",\n\"every weekend\"\n]\n}\n</code></pre>"},{"location":"key-concepts/scheduling/#schedule-presets","title":"Schedule presets","text":"<p>Renovate has preset schedules that you might want to use, go to Schedule Presets to see them.</p> <p>These preset schedules only affect when Renovate bot checks for updates, and do not affect any specific dependencies/packages.</p>"},{"location":"key-concepts/scheduling/#schedule-when-to-update-specific-dependencies","title":"Schedule when to update specific dependencies","text":"<p>The scheduling feature can be very useful for \"noisy\" packages that are updated frequently, such as <code>aws-sdk</code>.</p> <p>Say you want to restrict <code>aws-sdk</code> to weekly updates, you would create this package rule:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"aws-sdk\"],\n\"schedule\": [\"after 9pm on sunday\"]\n}\n]\n}\n</code></pre> <p>The \"schedule\" property must always be defined in an array, even if you only set a single schedule. Multiple entries in the array means \"or\".</p> <p>Read the schedule config option documentation to learn more.</p>"},{"location":"modules/versioning/","title":"Versioning","text":"<p>Once Managers have extracted dependencies, and Datasources have located available versions, then Renovate will use a \"Versioning\" scheme to perform sorting and filtering of results. The \"versioning\" is different for each package manager, because different package managers use different versioning schemes. For example, <code>npm</code> uses<code>1.0.0-beta.1</code> and <code>pip</code> uses <code>1.0.0b1</code>.</p>"},{"location":"modules/versioning/#why-you-might-need-to-manually-configure-versioning","title":"Why you might need to manually configure versioning","text":"<p>Renovate interprets versions correctly out-of-the-box most of the time. It's impossible to automatically detect all versioning schemes, so sometimes you need to tell the bot what versioning scheme it should use.</p> <p>You can manually configure/override the <code>versioning</code> value for a particular dependency. You generally won't need to override the defaults for ecosystems which enforce a strict version scheme like <code>npm</code>.</p> <p>Configuring or overriding the default <code>versioning</code> can be particularly helpful for ecosystems like Docker/Kubernetes/Helm, where versioning is barely a \"convention\".</p>"},{"location":"modules/versioning/#general-concepts-behind-overriding-versioning","title":"General concepts behind overriding versioning","text":"<ul> <li>Although you can reconfigure versioning per-manager or per-datasource, it's unlikely that such a broad change would ever be needed</li> <li>More commonly you would need to configure <code>versioning</code> for individual packages or potentially package patterns</li> <li>The best way to do this is with <code>packageRules</code>, with a combination of <code>matchManagers</code>, <code>matchDatasources</code>, <code>matchPackageNames</code> and <code>matchPackagePatterns</code>.   Avoid configuring <code>versioning</code> in a rule that also uses <code>matchUpdateTypes</code>, as the update types aren't known at the time the <code>versioning</code> is applied.</li> </ul>"},{"location":"modules/versioning/#examples-of-versioning-overrides","title":"Examples of versioning overrides","text":""},{"location":"modules/versioning/#overriding-docker-versioning-to-use-a-versioning-specific-for-a-package","title":"Overriding Docker versioning to use a versioning specific for a package","text":"<p>The configuration below overrides Renovate's default <code>docker</code> versioning for the <code>python</code> Docker image and instead uses the <code>pep440</code> versioning scheme to evaluate versions.</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"python\"],\n\"versioning\": \"pep440\"\n}\n]\n}\n</code></pre>"},{"location":"modules/versioning/#using-a-custom-regex-versioning-scheme","title":"Using a custom regex versioning scheme","text":"<pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"foo/bar\"],\n\"versioning\": \"regex:^(?&lt;compatibility&gt;.*)-v?(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)?$\"\n}\n]\n}\n</code></pre>"},{"location":"modules/versioning/#supported-versioning","title":"Supported Versioning","text":"<p>Supported values for <code>versioning</code> are: <code>aws-machine-image</code>, <code>azure-rest-api</code>, <code>bazel-module</code>, <code>cargo</code>, <code>composer</code>, <code>conan</code>, <code>deb</code>, <code>debian</code>, <code>docker</code>, <code>git</code>, <code>go-mod-directive</code>, <code>gradle</code>, <code>hashicorp</code>, <code>helm</code>, <code>hermit</code>, <code>hex</code>, <code>ivy</code>, <code>kubernetes-api</code>, <code>loose</code>, <code>maven</code>, <code>nixpkgs</code>, <code>node</code>, <code>npm</code>, <code>nuget</code>, <code>pep440</code>, <code>perl</code>, <code>poetry</code>, <code>python</code>, <code>redhat</code>, <code>regex</code>, <code>rez</code>, <code>ruby</code>, <code>semver</code>, <code>semver-coerced</code>, <code>swift</code>, <code>ubuntu</code>.</p>"},{"location":"modules/versioning/#aws-machine-image-versioning","title":"aws-machine-image Versioning","text":"<p>Identifier: <code>aws-machine-image</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's AWS Machine Image versioning is a kind of hack to support Amazon Machine Images (AMI) updates.</p> <p>At the moment every AMI that matches the regex <code>^ami-[a-z0-9]{17}$</code> is considered a valid \"release\".</p>"},{"location":"modules/versioning/#azure-rest-api-versioning","title":"azure-rest-api Versioning","text":"<p>Identifier: <code>azure-rest-api</code></p> <p>References:</p> <ul> <li>https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#api-versioning</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>The Azure REST APIs use a <code>YYYY-MM-DD</code> version with an optional <code>-preview</code> suffix: https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#api-versioning</p> <p>Internally at Microsoft they are using other additional suffixes: https://github.com/Azure/bicep/blob/a1d217e3bb3d049fc5c6c21b466c3a29585a6c69/src/Bicep.Core/Analyzers/Linter/ApiVersions/ApiVersionHelper.cs#L15</p>"},{"location":"modules/versioning/#bazel-module-versioning","title":"Bazel Module Versioning","text":"<p>Identifier: <code>bazel-module</code></p> <p>References:</p> <ul> <li>https://bazel.build/external/module</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p>"},{"location":"modules/versioning/#cargo-versioning","title":"Cargo Versioning","text":"<p>Identifier: <code>cargo</code></p> <p>References:</p> <ul> <li>https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Cargo versioning uses Semantic Versioning 2.0.</p> <p>Cargo supports ranges in a similar manner to npm, but not identical. The important differences are:</p> <p>Use of commas</p> <p>Multiple version requirements can also be separated with a comma, e.g. <code>&gt;= 1.2, &lt; 1.5</code>. We interpret this to mean AND.</p> <p>No exact versions unless using equals =</p> <p>In Cargo, <code>1.2.3</code> doesn't mean \"exactly 1.2.3\", it actually means <code>&gt;=1.2.3 &lt;2.0.0</code>. So this is like the equivalent of <code>^1.2.3</code> in npm.</p>"},{"location":"modules/versioning/#composer-versioning","title":"Composer Versioning","text":"<p>Identifier: <code>composer</code></p> <p>References:</p> <ul> <li>https://getcomposer.org/doc/articles/versions.md</li> <li>https://packagist.org/packages/composer/semver</li> <li>https://madewithlove.be/tilde-and-caret-constraints/</li> <li>https://semver.mwl.be</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code>, <code>update-lockfile</code></p> <p>Description:</p> <p>Composer uses Semver-like versioning, but some package authors may use versions that are not completely valid, e.g. <code>1.2</code> instead of <code>1.2.0</code>.</p> <p>Composer supports ranges in a similar manner to npm, but not identical. The main difference is with tilde ranges.</p> <p>Tilde ranges with \"short\" versions are different to npm. e.g.</p> <p><code>~4</code> is equivalent to <code>^4</code> in npm <code>~4.1</code> is equivalent to <code>^4.1</code> in npm <code>~0.4</code> is equivalent to <code>&gt;=0.4 &lt;1</code> in npm</p>"},{"location":"modules/versioning/#conan-versioning","title":"conan Versioning","text":"<p>Identifier: <code>conan</code></p> <p>References:</p> <ul> <li>https://semver.org/</li> <li>https://github.com/podhmo/python-node-semver</li> <li>https://github.com/podhmo/python-node-semver/tree/master/examples</li> <li>https://docs.conan.io/en/latest/versioning/version_ranges.html#version-ranges</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>auto</code>, <code>bump</code>, <code>widen</code>, <code>replace</code></p> <p>Description:</p> <p>Conan versioning supports Semantic Versioning 2.0 but some packages don't follow this specification.</p> <p>Conan implements python-node-semver.</p> <p>Read the Conan docs about version ranges for more information.</p> syntax description <code>5.45</code> Equivalent to <code>5.45</code> <code>16.00</code> Equivalent to <code>16.00</code> <code>2.8.3</code> Equivalent to <code>2.8.3</code> <code>[&gt;1.1 &lt;2.1]</code> Keep version within range <code>[2.8]</code> Equivalent to <code>=2.8</code> <code>[~=3.0]</code> Compatible, according to SemVer <code>[&gt;1.1 \\|\\| 0.8]</code> Conditions can be OR'ed <code>[1.2.7 \\|\\| &gt;=1.2.9 &lt;2.0.0]</code> This range would match the versions <code>1.2.7</code>, <code>1.2.9</code>, and <code>1.4.6</code>, but not the versions <code>1.2.8</code> or <code>2.0.0</code> <code>[&gt;1.1 &lt;2.1, include_prerelease=True]</code> Would e.g. accept <code>2.0.0-pre.1</code> as match <code>[~1.2.3, loose=False]</code> Would only accept correct Semantic Versioning strings. E.g. version <code>1.2.3.4</code> would not be accepted <code>[~1.2.3, loose=False, include_prerelease=True]</code> Both options can be used for the same version range"},{"location":"modules/versioning/#deb-version-versioning","title":"Deb version Versioning","text":"<p>Identifier: <code>deb</code></p> <p>References:</p> <ul> <li>https://www.debian.org/doc/debian-policy/ch-controlfields.html#version</li> <li>https://manpages.debian.org/unstable/dpkg-dev/deb-version.7.en.html</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Deb versioning compares versions like package managers on Debian-based Linux distributions compare packages (<code>dpkg</code>, <code>apt</code>). Deb versioning supports complicated version numbers, including alphabetical characters almost everywhere. Similar to our \"loose\" versioning, deb versioning is a \"best effort\" attempt to convert deb versions to SemVer fields like <code>major</code>, <code>minor</code>, <code>patch</code>.</p>"},{"location":"modules/versioning/#debian-versioning","title":"Debian Versioning","text":"<p>Identifier: <code>debian</code></p> <p>References:</p> <ul> <li>https://debian.pages.debian.net/distro-info-data/debian.csv</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code></p> <p>Description:</p> <p>Debian versioning is used for Debian container images that are referenced by their major release version or a codename.</p> <p>Versions to which this scheme applies are e.g. <code>11</code> and <code>bullseye</code>. Container image tags such as <code>11-slim</code>, <code>11.4</code> or <code>11.4-slim</code>, <code>bullseye-20220822</code> or <code>bullseye-backports</code> are not compliant with the current implementation.</p>"},{"location":"modules/versioning/#docker-versioning","title":"Docker Versioning","text":"<p>Identifier: <code>docker</code></p> <p>References:</p> <ul> <li>https://docs.docker.com/engine/reference/commandline/tag/</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Docker images don't really have versions, instead they have \"tags\". Tags are often used by Docker image authors as a form of versioning.</p> <p>Renovate tries to follow the most common conventions that are used to tag Docker images. In particular, Renovate treats the text after the first hyphen as a type of platform/compatibility indicator.</p> <p>For example, many images have releases with the <code>-alpine</code> suffix. The official <code>node</code> Docker image has tags like <code>12.15.0-alpine</code> which is not compatible with <code>12.15.0</code> or <code>12.15.0-stretch</code>. Users on <code>-alpine</code> don't want updates to <code>12.16.0</code> or <code>12.16.0-stretch</code>. Those users only want upgrades to <code>12.16.0-alpine</code> and not <code>12.16.0</code> or <code>12.16.0-stretch</code>.</p> <p>Similarly, a user on <code>12.14</code> expects to be upgraded to <code>12.15</code> and not <code>12.15.0</code>.</p> <p>What type of versioning is used?</p> <p>Docker image authors can use whatever tag they want, it's a \"wild west\". Docker tags don't always follow SemVer. This means that Renovate tries to accept and sort SemVer-like versions, but this won't always work.</p> <p>You may need to help Renovate and create your own rules for some Docker images. For example:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"badly-versioned-docker-image\"],\n\"versioning\": \"loose\"\n}\n]\n}\n</code></pre> <p>Are ranges supported?</p> <p>No. You may think a tag like <code>12.15</code> also means <code>12.15.x</code>, but it's a tag of its own. The <code>12.15</code> tag may or may not point to any of the available <code>12.15.x</code> tags, including <code>12.15.0</code>.</p> <p>Are commit hashes supported?</p> <p>No, Renovate ignores Docker image tags that look like a Git commit hash.</p>"},{"location":"modules/versioning/#git-versioning","title":"git Versioning","text":"<p>Identifier: <code>git</code></p> <p>References:</p> <ul> <li>https://git-scm.com/</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's Git versioning is a kind of hack to support Git submodule updating.</p>"},{"location":"modules/versioning/#go-modules-directive-versioning","title":"Go Modules Directive Versioning","text":"<p>Identifier: <code>go-mod-directive</code></p> <p>References:</p> <ul> <li>https://go.dev/ref/mod</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>replace</code></p> <p>Description:</p> <p>This versioning is used exclusively for the <code>go</code> directive in <code>go.mod</code> files.</p> <p>It ensures that a value like <code>1.16</code> is treated like <code>^1.16</code> and not <code>~1.16</code>.</p> <p>By default this will mean that the <code>go</code> directive in <code>go.mod</code> files won't get upgraded to any new Go version, such as <code>1.19</code>. If you wish to upgrade this value every time there's a new minor Go release, configure <code>rangeStrategy</code> to be <code>\"bump\"</code> like so:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"golang-version\"],\n\"rangeStrategy\": \"bump\"\n}\n]\n}\n</code></pre>"},{"location":"modules/versioning/#gradle-versioning","title":"Gradle Versioning","text":"<p>Identifier: <code>gradle</code></p> <p>References:</p> <ul> <li>https://docs.gradle.org/current/userguide/single_versions.html#version_ordering</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>pin</code></p>"},{"location":"modules/versioning/#hashicorp-versioning","title":"Hashicorp Versioning","text":"<p>Identifier: <code>hashicorp</code></p> <p>References:</p> <ul> <li>https://www.terraform.io/docs/configuration/terraform.html#specifying-a-required-terraform-version</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Hashicorp versioning syntax is used for Terraform.</p> <p>It is based off Semantic Versioning 2.0 but with a subset of npm's range syntax.</p>"},{"location":"modules/versioning/#helm-versioning","title":"helm Versioning","text":"<p>Identifier: <code>helm</code></p> <p>References:</p> <ul> <li>https://semver.org/</li> <li>https://helm.sh/docs/chart_best_practices/dependencies/#versions</li> <li>https://github.com/Masterminds/semver#basic-comparisons</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code>, <code>widen</code></p>"},{"location":"modules/versioning/#hermit-versioning","title":"Hermit Versioning","text":"<p>Identifier: <code>hermit</code></p> <p>References:</p> <ul> <li>https://cashapp.github.io/hermit/packaging/reference/#versions</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Hermit versioning is a mix of <code>version</code> and <code>channel</code>.</p> <p>Version</p> <p>Hermit's package version comes from the package's original Git tag. The version is an extension to SemVer, with an extra build number to accommodate package versions from OpenJDK, which has a value <code>15.0.1_9</code>.</p> <p>Channel</p> <p>Channel could be Hermit-generated or user-defined. Channel is considered unstable version and normally won't upgrade. If you would like to get out of Channel, you could replace the Channel with a given version number and let Renovate manage it.</p>"},{"location":"modules/versioning/#hex-versioning","title":"Hex Versioning","text":"<p>Identifier: <code>hex</code></p> <p>References:</p> <ul> <li>https://hexdocs.pm/elixir/Version.html</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Hex versioning syntax is used for Elixir and Erlang hex dependencies. It is based on Semantic Versioning 2.0 and supports a subset of npm's range syntax.</p>"},{"location":"modules/versioning/#ivy-versioning","title":"Ivy Versioning","text":"<p>Identifier: <code>ivy</code></p> <p>References:</p> <ul> <li>https://ant.apache.org/ivy/</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p>"},{"location":"modules/versioning/#kubernetes-api-versioning","title":"Kubernetes API Versioning","text":"<p>Identifier: <code>kubernetes-api</code></p> <p>References:</p> <ul> <li>https://kubernetes.io/docs/reference/using-api/#api-versioning</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p>"},{"location":"modules/versioning/#loose-versioning","title":"Loose Versioning","text":"<p>Identifier: <code>loose</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's \"loose\" versioning was created for cases where no strict versioning is in place. It works like SemVer if SemVer-compliant versions are supplied, but otherwise is \"best effort\". Essentially it just does its best to sort versions and ignore versions that are not sortable.</p>"},{"location":"modules/versioning/#maven-versioning","title":"Maven Versioning","text":"<p>Identifier: <code>maven</code></p> <p>References:</p> <ul> <li>https://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification</li> <li>https://octopus.com/blog/maven-versioning-explained</li> <li>https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Maven versioning is similar to SemVer but also very different in places. It's specified by Maven itself.</p> <p>Ranges are supported using Maven's special syntax.</p> <p>For development purposes, download maven-artifact JAR and run:</p> <pre><code>$ java -jar maven-artifact-*.jar 3.2.4-alpha-1 3.2.4-SNAPSHOT 3.2.4.0\nDisplay parameters as parsed by Maven (in canonical form) and comparison result:\n1. 3.2.4-alpha-1 == 3.2.4.alpha.1\n   3.2.4-alpha-1 &lt; 3.2.4-SNAPSHOT\n2. 3.2.4-SNAPSHOT == 3.2.4.snapshot\n   3.2.4-SNAPSHOT &lt; 3.2.4.0\n3. 3.2.4.0 == 3.2.4\n</code></pre>"},{"location":"modules/versioning/#nixpkgs-versioning","title":"Nixpkgs Versioning","text":"<p>Identifier: <code>nixpkgs</code></p> <p>References:</p> <ul> <li>https://github.com/NixOS/nixpkgs</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Nixpkgs versioning is designed to be used with the nix manager.</p> <p>NixOS releases follow the <code>YY.MM</code> pattern. There are also some prefixes and suffixes allowed. Using <code>22.05</code> as an example the allowed combination of prefixes and suffixes are:</p> <ul> <li><code>release-22.05</code></li> <li><code>nixos-22.05</code></li> <li><code>nixos-22.05-small</code></li> <li><code>nixos-22.05-aarch64</code></li> <li><code>nixpkgs-22.05-darwin</code></li> </ul> <p>Additionally, there are some floating versions:</p> <ul> <li><code>nixos-unstable</code></li> <li><code>nixos-unstable-small</code></li> <li><code>nixpkgs-unstable</code></li> </ul>"},{"location":"modules/versioning/#nodejs-versioning","title":"Node.js Versioning","text":"<p>Identifier: <code>node</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's Node.js versioning is a wrapper around npm's versioning, except that it makes sure to strip \"v\" prefixes from exact versions when replacing.</p> <p>It is planned to extend it one day to support \"stability\" awareness, because Node.js's version stability does not follow the SemVer approach.</p>"},{"location":"modules/versioning/#npm-versioning","title":"npm Versioning","text":"<p>Identifier: <code>npm</code></p> <p>References:</p> <ul> <li>https://semver.org/</li> <li>https://www.npmjs.com/package/semver</li> <li>https://docs.npmjs.com/about-semantic-versioning</li> <li>https://semver.npmjs.com/</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>npm versioning is the most well known/widely-used implementation of Semantic Versioning 2.0.</p> <p>It's important to understand that \"npm\" versioning scheme is not the same as \"semver\" versioning. SemVer's spec does not define ranges at all - so all range/constraint syntax in npm is npm-specific and not part of the spec.</p>"},{"location":"modules/versioning/#nuget-versioning","title":"NuGet Versioning","text":"<p>Identifier: <code>nuget</code></p> <p>References:</p> <ul> <li>https://docs.microsoft.com/en-us/nuget/concepts/package-versioning</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>NuGet versioning matches as closely as possible to the version comparison that NuGet itself uses.</p> <p>NuGet supports SemVer 2.0.0, but permits versions with differing numbers of version parts.</p> <p>Ranges are not yet supported by this versioning, but they are defined in NuGet and could be supported in the future.</p>"},{"location":"modules/versioning/#pep440-versioning","title":"PEP440 Versioning","text":"<p>Identifier: <code>pep440</code></p> <p>References:</p> <ul> <li>https://www.python.org/dev/peps/pep-0440/</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>PEP 440 is defined as part of the Python project, and its versioning is independent of others such as SemVer.</p> <p>Ranges are supported using the syntax defined as part of the PEP440 spec.</p>"},{"location":"modules/versioning/#perl-versioning","title":"Perl Versioning","text":"<p>Identifier: <code>perl</code></p> <p>References:</p> <ul> <li>https://metacpan.org/pod/version</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Perl versioning is based on Perl's <code>version</code> module.</p> <p>This could be used in combination with the <code>regex</code> manager and the <code>cpan</code> datasource.</p>"},{"location":"modules/versioning/#poetry-versioning","title":"Poetry Versioning","text":"<p>Identifier: <code>poetry</code></p> <p>References:</p> <ul> <li>https://python-poetry.org/docs/versions/</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Poetry versioning is a little like a mix of PEP440 and SemVer.</p> <p>Currently Renovate's implementation is based off npm versioning. This works by parsing versions using the same patterns and similar normalization rules as Poetry, passing them to the npm versioning implementation, and then reversing the normalizations. This allows Renovate to meaningfully compare the SemVer-style versions allowed in <code>pyproject.toml</code> to the PEP440 representations used on PyPI. These are equivalent for major.minor.patch releases, but different for pre-, post-, and dev releases.</p>"},{"location":"modules/versioning/#python-versioning","title":"Python Versioning","text":"<p>Identifier: <code>python</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Python versioning is a little like a mix of PEP440 and Poetry SemVer.</p>"},{"location":"modules/versioning/#red-hat-versioning","title":"Red Hat Versioning","text":"<p>Identifier: <code>redhat</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Red Hat versioning is used with container images that are maintained by Red Hat.</p> <p>Red Hat version definitions follow this pattern:</p> <ul> <li>the version of the main component, where major is required, but minor and patch are optional</li> <li>optionally a hyphen followed by release information</li> <li>the version of Red Hat's release as an integer, optionally followed by a timestamp like: <code>1645808164</code></li> </ul> <p>Examples of valid Red Hat versions:</p> <ul> <li><code>1</code></li> <li><code>8.5</code></li> <li><code>7.9-628</code></li> <li><code>9.0.0-19.1655192132</code></li> </ul> <p>Ranges are not supported by this versioning.</p>"},{"location":"modules/versioning/#regular-expression-versioning","title":"Regular Expression Versioning","text":"<p>Identifier: <code>regex</code></p> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Regular Expression Versioning is designed to be a flexible fallback versioning approach if Renovate's other versioning schemes don't do the job.</p> <p>The <code>regex</code> scheme makes use of Regular Express capture groups. The valid capture groups for <code>regex</code> versioning are:</p> <ul> <li><code>major</code>, <code>minor</code>, and <code>patch</code>: at least one of these must be provided. When determining whether a package has updates, these values will be compared in the standard semantic versioning fashion. If any of these fields are omitted, they will be treated as if they were <code>0</code> -- in this way, you can describe versioning schemes with up to three incrementing values.</li> <li><code>build</code>: this capture group can be used after you've already used the <code>major</code>, <code>minor</code> and <code>patch</code> capture groups and need a fourth version part. <code>build</code> updates are handled like <code>patch</code> updates.</li> <li><code>revision</code>: this capture group can be used after you've already used the <code>build</code> capture groups and need a fifth version part. <code>revision</code> updates are handled like <code>patch</code> updates.</li> <li><code>prerelease</code>: this value, if captured, will mark a given release as a prerelease (e.g. unstable). If this value is captured and you have configured <code>\"ignoreUnstable\": true</code>, the given release will be skipped.</li> <li><code>compatibility</code>: this value defines the \"build compatibility\" of a given dependency. A proposed Renovate update will never change the specified compatibility value. For example, if you are pinning to <code>1.2.3-linux</code> (and <code>linux</code> is captured as the compatibility value), Renovate will not update you to <code>1.2.4-osx</code>.</li> </ul> <p>The compatibility concept was originally introduced for Docker versioning but sometimes package authors may use/misuse suffixes to mean compatibility in other versioning schemes.</p> <p>Here is an example of using <code>regex</code> versioning to correct behavior of the <code>guava</code> Maven package, which misuses suffixes as compatibility indicators:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchPackageNames\": [\"com.google.guava:guava\"],\n\"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)(\\\\.(?&lt;minor&gt;\\\\d+))?(\\\\.(?&lt;patch&gt;\\\\d+))?(-(?&lt;compatibility&gt;.*))?$\"\n}\n]\n}\n</code></pre> <p>Here is another example, this time for handling <code>python</code> Docker images, which use both pre-release indicators as well as version suffixes for compatibility:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"python\"],\n\"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?&lt;prerelease&gt;[^.-]+)?(-(?&lt;compatibility&gt;.*))?$\"\n}\n]\n}\n</code></pre> <p>Here is another example, this time for handling Bitnami Docker images, which use <code>build</code> and <code>revision</code> indicators as well as version suffixes for compatibility:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackagePrefixes\": [\"bitnami/\"],\n\"versioning\": \"regex:^(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)(?:-(?&lt;compatibility&gt;.+)(?&lt;build&gt;\\\\d+)-r(?&lt;revision&gt;\\\\d+))?$\"\n}\n]\n}\n</code></pre>"},{"location":"modules/versioning/#rez-versioning","title":"rez Versioning","text":"<p>Identifier: <code>rez</code></p> <p>References:</p> <ul> <li>https://github.com/nerdvegas/rez</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>rez versioning was developed to support the rez Package Manager. It's based on Semantic Versioning but includes its own concept of ranges.</p> <p>Use of dots</p> <p>A range is expressed with dots <code>1.2..2</code> means <code>&gt;=1.2.x &lt;2.0.0</code>.</p> <p>No exact versions unless using two equals ==</p> <p>In rez, <code>1.2.3</code> doesn't mean \"exactly 1.2.3\", it actually means <code>&gt;= 1.2.3 &lt;1.2.4</code>. If you want to use an exact version use two equal characters, like this: <code>==1.2.3</code>.</p> <p>Use of pipes</p> <p>rez uses pipes as an OR operator, <code>2.7..3|4</code> means <code>&gt;=2.7 &lt;3 OR 4.x.x</code>.</p> <p>This has not been implemented yet. The current iteration of rez versioning does not support pipes yet.</p>"},{"location":"modules/versioning/#ruby-versioning","title":"Ruby Versioning","text":"<p>Identifier: <code>ruby</code></p> <p>References:</p> <ul> <li>https://guides.rubygems.org/patterns/</li> <li>https://bundler.io/v1.5/gemfile.html</li> <li>https://www.devalot.com/articles/2012/04/gem-versions.html</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>The RubyGems team urges gem developers to follow the Semantic Versioning standard for their gem\u2019s versions, but it is not enforced.</p> <p>Range syntax is similar to npm's but not identical. The main difference is the use of \"pessimistic\" greater than or equals: <code>~&gt;</code></p>"},{"location":"modules/versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>Identifier: <code>semver</code></p> <p>References:</p> <ul> <li>https://semver.org/</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's Semantic Versioning is a strict/independent implementation of Semantic Versioning 2.0. It has been developed to be used in situations where exact-only SemVer support is needed and not npm's extended semver implementation including ranges.</p> <p>Ranges are not supported, in line with the specification.</p>"},{"location":"modules/versioning/#coerced-semantic-versioning-versioning","title":"Coerced Semantic Versioning Versioning","text":"<p>Identifier: <code>semver-coerced</code></p> <p>References:</p> <ul> <li>https://semver.org/</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Renovate's Coerced Semantic Versioning is a forgiving variant of Semantic Versioning 2.0 with coercion enabled for versions.</p> <p>This versioning provides a very forgiving translation of inputs in non-strict-SemVer format into strict SemVer. For example, \"v1\" is coerced into \"1.0.0\", \"2.1\" =&gt; \"2.1.0\", \"~3.1\" =&gt; \"3.1.0\", \"1.1-foo\" =&gt; \"1.1.0\". Look at the Coercion section of this page for more info on input coercion.</p> <p>Since this versioning is very forgiving, it doesn't actually provide the coercion for version ranges. The range functions only accept strict SemVer as input and equivalent to those provided by the Renovate's semver versioning.</p>"},{"location":"modules/versioning/#swift-versioning","title":"Swift Versioning","text":"<p>Identifier: <code>swift</code></p> <p>References:</p> <ul> <li>https://swift.org/package-manager/</li> </ul> <p>Ranges/Constraints:</p> <p>\u2705 Ranges are supported.</p> <p>Valid <code>rangeStrategy</code> values are: <code>bump</code>, <code>widen</code>, <code>pin</code>, <code>replace</code></p> <p>Description:</p> <p>Swift versioning was developed to support the Swift Package Manager. It's based on Semantic versioning but includes its own concept of ranges.</p>"},{"location":"modules/versioning/#ubuntu-versioning","title":"Ubuntu Versioning","text":"<p>Identifier: <code>ubuntu</code></p> <p>References:</p> <ul> <li>https://changelogs.ubuntu.com/meta-release</li> <li>https://debian.pages.debian.net/distro-info-data/ubuntu.csv</li> </ul> <p>Ranges/Constraints:</p> <p>\u274c No range support.</p> <p>Description:</p> <p>Ubuntu versioning is used for Ubuntu container images that are referenced by their release version or a codename.</p> <p>Versions to which this scheme applies are e.g. <code>22.04</code> and <code>jammy</code>. Container image tags such as <code>jammy-20220815</code> or <code>focal-20220826</code> are not compliant with the current implementation.</p>"},{"location":"modules/datasource/","title":"Datasources","text":"<p>After Renovate's manager scanned the files and extracted the dependencies, it assigns a <code>datasource</code> to each extracted package file or dependency. The <code>datasource</code> tells Renovate how to search for new versions.</p> <p>You don't need to configure or override datasources. But you may use datasources in a <code>packageRules</code> array to configure Renovate's behavior, for example:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"npm\"],\n\"matchPackageNames\": [\"lodash\"],\n\"automerge\": true\n}\n]\n}\n</code></pre>"},{"location":"modules/datasource/#supported-datasources","title":"Supported Datasources","text":"<p>Supported values for <code>datasource</code> are:</p> <ul> <li><code>artifactory</code></li> <li><code>aws-machine-image</code></li> <li><code>aws-rds</code></li> <li><code>azure-bicep-resource</code></li> <li><code>azure-pipelines-tasks</code></li> <li><code>bazel</code></li> <li><code>bitbucket-tags</code></li> <li><code>cdnjs</code></li> <li><code>clojure</code></li> <li><code>conan</code></li> <li><code>conda</code></li> <li><code>cpan</code></li> <li><code>crate</code></li> <li><code>dart</code></li> <li><code>dart-version</code></li> <li><code>deno</code></li> <li><code>docker</code></li> <li><code>dotnet-version</code></li> <li><code>flutter-version</code></li> <li><code>galaxy</code></li> <li><code>galaxy-collection</code></li> <li><code>git-refs</code></li> <li><code>git-tags</code></li> <li><code>github-release-attachments</code></li> <li><code>github-releases</code></li> <li><code>github-tags</code></li> <li><code>gitlab-packages</code></li> <li><code>gitlab-releases</code></li> <li><code>gitlab-tags</code></li> <li><code>go</code></li> <li><code>golang-version</code></li> <li><code>gradle-version</code></li> <li><code>helm</code></li> <li><code>hermit</code></li> <li><code>hex</code></li> <li><code>hexpm-bob</code></li> <li><code>java-version</code></li> <li><code>jenkins-plugins</code></li> <li><code>kubernetes-api</code></li> <li><code>maven</code></li> <li><code>node-version</code></li> <li><code>npm</code></li> <li><code>nuget</code></li> <li><code>orb</code></li> <li><code>packagist</code></li> <li><code>pod</code></li> <li><code>puppet-forge</code></li> <li><code>pypi</code></li> <li><code>repology</code></li> <li><code>ruby-version</code></li> <li><code>rubygems</code></li> <li><code>sbt-package</code></li> <li><code>sbt-plugin</code></li> <li><code>terraform-module</code></li> <li><code>terraform-provider</code></li> </ul>"},{"location":"modules/datasource/artifactory/","title":"Artifactory Datasource","text":"<p>Identifier: <code>artifactory</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>Artifactory is the recommended registry for Conan packages.</p> <p>This datasource returns releases from given custom <code>registryUrl</code>(s).</p> <p>The target URL is composed by the <code>registryUrl</code> and the <code>packageName</code>.</p> <p>The release timestamp is taken from the date in the directory listing, and is assumed to be in UTC time.</p>"},{"location":"modules/datasource/aws-machine-image/","title":"Aws Machine Image Datasource","text":"<p>Identifier: <code>aws-machine-image</code></p> <p>Default versioning: <code>aws-machine-image</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>Warning</p> <p>This datasource is experimental. Its syntax and behavior may change at any time!</p> <p>This datasource returns the latest Amazon Machine Image via the AWS API.</p> <p>Because the datasource uses the AWS-SDK for JavaScript, you can configure it like other AWS Tools. You can use common AWS configuration options, for example (partial list):</p> <ul> <li>Setting the region via <code>AWS_REGION</code> (environment variable) or your <code>~/.aws/config</code> file</li> <li>Provide credentials via <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> (environment variable) or your <code>~/.aws/credentials</code> file</li> <li>Select the profile to use via <code>AWS_PROFILE</code> environment variable</li> </ul> <p>Read the Developer guide for more information on configuration options.</p> <p>The least IAM privileges required for this datasource are:</p> <pre><code>{\n\"Sid\": \"AllowEc2ImageLookup\",\n\"Effect\": \"Allow\",\n\"Action\": [\"ec2:DescribeImages\"],\n\"Resource\": \"*\"\n}\n</code></pre> <p>Read the AWS IAM Reference for more information.</p> <p>Because there is no general <code>packageName</code>, you have to use the describe images filter as minified JSON as a <code>packageName</code>.</p> <p>Example:</p> <pre><code># Getting the latest official EKS image from AWS (account '602401143452' for eu-central-1) for EKS 1.21 (name matches 'amazon-eks-node-1.21-*') would look as a describe images filter like:\n\n[\n{\n\"Name\": \"owner-id\",\n\"Values\": [ \"602401143452\" ]\n},\n{\n\"Name\": \"name\",\n\"Values\": [ \"amazon-eks-node-1.21-*\" ]\n}\n]\n\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n</code></pre> <p>At the moment, this datasource has no \"manager\". You have to use the regex manager for this.</p> <p>Usage Example</p> <p>Here's an example of using the regex manager:</p> <pre><code>module.exports = {\nregexManagers: [\n{\nfileMatch: ['.*'],\nmatchStrings: [\n'.*amiFilter=(?&lt;packageName&gt;.*?)\\n(.*currentImageName=(?&lt;currentDigest&gt;.*?)\\n)?(.*\\n)?.*?(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\"|\\']?(?&lt;currentValue&gt;ami-[a-z0-9]{17})[\"|\\']?.*',\n],\ndatasourceTemplate: 'aws-machine-image',\nversioningTemplate: 'aws-machine-image',\n},\n],\n};\n</code></pre> <p>Or as JSON:</p> <pre><code>{\n'regexManagers':\n[\n{\n'fileMatch': ['.*'],\n'matchStrings':\n[\n\".*amiFilter=(?&lt;packageName&gt;.*?)\\n(.*currentImageName=(?&lt;currentDigest&gt;.*?)\\n)?(.*\\n)?.*?(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\\\"|']?(?&lt;currentValue&gt;ami-[a-z0-9]{17})[\\\"|']?.*\",\n],\n'datasourceTemplate': 'aws-machine-image',\n'versioningTemplate': 'aws-machine-image',\n},\n],\n}\n</code></pre> <p>This would match every file, and would recognize the following lines:</p> <pre><code># With AMI name mentioned in the comments\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n# currentImageName=unknown\nmy_ami1: ami-02ce3d9008cab69cb\n# Only AMI, no name mentioned\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n# currentImageName=unknown\nmy_ami2: ami-0083e9407e275acf2\n</code></pre> <pre><code>const myConfigObject = {\n// With AMI name mentioned in the comments\n// amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n// currentImageName=unknown\nmy_ami1: 'ami-02ce3d9008cab69cb',\n};\n\n/**\n * Only AMI, no AMI name mentioned\n * amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n * currentImageName=unknown\n */\nconst my_ami2 = 'ami-0083e9407e275acf2';\n</code></pre> <pre><code>resource \"aws_instance\" \"web\" {\n\n    # Only AMI, no name mentioned\n    # amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n    # currentImageName=unknown\nami = \"ami-0083e9407e275acf2\"\n\ncount = 2\nsource_dest_check = false\n\nconnection {\nuser = \"root\"\n}\n}\n</code></pre> <p>Default configuration:</p> <pre><code>{\n\"commitMessageExtra\": \"to {{{newVersion}}}\",\n\"prBodyColumns\": [\n\"Change\",\n\"Image\"\n],\n\"prBodyDefinitions\": {\n\"Image\": \"```{{{newDigest}}}```\"\n},\n\"digest\": {\n\"commitMessageExtra\": \"to {{{newDigest}}}\",\n\"prBodyColumns\": [\n\"Image\"\n],\n\"prBodyDefinitions\": {\n\"Image\": \"```{{{newDigest}}}```\"\n}\n}\n}\n</code></pre>"},{"location":"modules/datasource/aws-rds/","title":"Aws Rds Datasource","text":"<p>Identifier: <code>aws-rds</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This datasource returns the database engine versions available for use on AWS RDS via the AWS API. Generally speaking, all publicly released database versions are available for use on RDS. However, new versions may not be available on RDS for a few weeks or months after their release while AWS tests them. In addition, AWS may pull existing versions if serious problems arise during their use.</p> <p>AWS API configuration</p> <p>Since the datasource uses the AWS SDK for JavaScript, you can configure it like other AWS Tools. You can use common AWS configuration options, for example:</p> <ul> <li>Set the region via the <code>AWS_REGION</code> environment variable or your <code>~/.aws/config</code> file</li> <li>Provide credentials via the <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> environment variables or your <code>~/.aws/credentials</code> file</li> <li>Select the profile to use via <code>AWS_PROFILE</code> environment variable</li> </ul> <p>Read the AWS Developer Guide - Configuring the SDK for JavaScript for more information on these configuration options.</p> <p>The minimal IAM privileges required for this datasource are:</p> <pre><code>{\n\"Sid\": \"AllowDBEngineVersionLookup\",\n\"Effect\": \"Allow\",\n\"Action\": [\"rds:DescribeDBEngineVersions\"],\n\"Resource\": \"*\"\n}\n</code></pre> <p>Read the AWS RDS IAM reference for more information.</p> <p>Usage</p> <p>Because Renovate has no manager for the AWS RDS datasource, you need to help Renovate by configuring the regex manager to identify the RDS dependencies you want updated.</p> <p>When configuring the regex manager, you have to pass a filter as minified JSON as the <code>packageName</code>. For example:</p> <pre><code># Getting the latest supported MySQL 5.7 version from RDS as a filter would look like:\n\n[\n{\n\"Name\": \"engine\",\n\"Values\": [ \"mysql\" ]\n},\n{\n\"Name\": \"engine-version\",\n\"Values\": [ \"5.7\" ]\n}\n]\n\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\n</code></pre> <p>Here's an example of using the regex manager to configure this datasource:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"\\\\.yaml$\"],\n\"matchStrings\": [\n\".*amiFilter=(?&lt;lookupName&gt;.+?)[ ]*\\n[ ]*(?&lt;depName&gt;[a-zA-Z0-9-_:]*)[ ]*?:[ ]*?[\\\"|']?(?&lt;currentValue&gt;[.\\\\d]+)[\\\"|']?.*\"\n],\n\"datasourceTemplate\": \"aws-rds\"\n}\n]\n}\n</code></pre> <p>The configuration above matches every YAML file, and recognizes these lines:</p> <pre><code>spec:\n# amiFilter=[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\nengineVersion: 5.7.34\n</code></pre>"},{"location":"modules/datasource/azure-bicep-resource/","title":"Azure Bicep Resource Datasource","text":"<p>Identifier: <code>azure-bicep-resource</code></p> <p>Default versioning: <code>azure-rest-api</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This data source returns available Bicep resource versions from the official index, which is also used by all Bicep tooling: https://github.com/Azure/bicep-types-az</p> <p>Default configuration:</p> <pre><code>{\n\"commitMessageTopic\": \"resource {{depName}}\",\n\"commitMessageExtra\": \"to {{{newVersion}}}\",\n\"prBodyColumns\": [\n\"Resource\",\n\"Change\"\n],\n\"prBodyDefinitions\": {\n\"Resource\": \"{{{depNameLinked}}}\"\n}\n}\n</code></pre>"},{"location":"modules/datasource/azure-pipelines-tasks/","title":"Azure Pipelines Tasks Datasource","text":"<p>Identifier: <code>azure-pipelines-tasks</code></p> <p>Default versioning: <code>loose</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource returns versions of the built-in Azure Pipelines tasks and from all public extensions on the Visual Studio Marketplace.</p>"},{"location":"modules/datasource/azure-pipelines-tasks/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/azure-pipelines-tasks/#feature-requests","title":"Feature requests","text":"<ul> <li><code>azure-pipelines-tasks</code>: refactor to use github cdn do fetch prepared data #20019</li> </ul>"},{"location":"modules/datasource/bazel/","title":"Bazel Datasource","text":"<p>Identifier: <code>bazel</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>The <code>bazel</code> datasource is designed to query one or more Bazel registries using the first successful result.</p>"},{"location":"modules/datasource/bitbucket-tags/","title":"Bitbucket Tags Datasource","text":"<p>Identifier: <code>bitbucket-tags</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/cdnjs/","title":"Cdnjs Datasource","text":"<p>Identifier: <code>cdnjs</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/clojure/","title":"Clojure Datasource","text":"<p>Identifier: <code>clojure</code></p> <p>Default versioning: <code>maven</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/conan/","title":"Conan Datasource","text":"<p>Identifier: <code>conan</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/conda/","title":"Conda Datasource","text":"<p>Identifier: <code>conda</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This datasource returns releases from the specified conda registry.</p> <p>The default registry is <code>https://api.anaconda.org/package/</code>, which queries a specific conda channel for a specific package.</p> <p>Use <code>channel/packageName</code> as your <code>depName</code> when using this datasource.</p>"},{"location":"modules/datasource/cpan/","title":"Cpan Datasource","text":"<p>Identifier: <code>cpan</code></p> <p>Default versioning: <code>perl</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/crate/","title":"Crate Datasource","text":"<p>Identifier: <code>crate</code></p> <p>Default versioning: <code>cargo</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/crate/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/crate/#feature-requests","title":"Feature requests","text":"<ul> <li>Support for updating dependencies to private github crates (rust) #19813</li> </ul>"},{"location":"modules/datasource/dart/","title":"Dart Datasource","text":"<p>Identifier: <code>dart</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/dart-version/","title":"Dart Version Datasource","text":"<p>Identifier: <code>dart-version</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/deno/","title":"Deno Datasource","text":"<p>Identifier: <code>deno</code></p> <p>Default versioning: <code>semver</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This datasource extracts dependencies from a <code>denoland/apiland</code> compatible registry server.</p> <p>By default, Renovate uses the official Deno registry. You can override this by setting your own <code>registryUrl</code>.</p>"},{"location":"modules/datasource/docker/","title":"Docker Datasource","text":"<p>Identifier: <code>docker</code></p> <p>Default versioning: <code>docker</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This datasource identifies an image's source repository according to the pre-defined annotation keys of the OCI Image Format Specification.</p> <p>This datasource looks for the metadata of the latest stable image found on the Docker registry and uses the value of the label <code>org.opencontainers.image.source</code> and <code>org.label-schema.vcs-url</code> as the <code>sourceUrl</code>. Additionally, it uses the value of the label <code>org.opencontainers.image.revision</code> as the <code>gitRef</code>.</p> <p>The Label Schema is superseded by OCI annotations, use the <code>org.opencontainers.image.source</code> label if possible.</p> <p>If you maintain a Docker image and want Renovate to find your changelogs, add a <code>org.opencontainers.image.source</code> field to your Dockerfile. The link must point to your GitHub or GitLab repository. Here's an example from our <code>renovate/renovate</code> Dockerfile:</p> <pre><code>LABEL org.opencontainers.image.source=\"https://github.com/renovatebot/renovate\"\n</code></pre> <p>If you use Harbor as a proxy cache for Docker Hub, then you must use Harbor version <code>2.5.0</code> or higher.</p> <p>Default configuration:</p> <pre><code>{\n\"commitMessageTopic\": \"{{{depName}}} Docker tag\",\n\"commitMessageExtra\": \"to {{#if isPinDigest}}{{{newDigestShort}}}{{else}}{{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{prettyNewVersion}}}{{/if}}{{/if}}\",\n\"digest\": {\n\"branchTopic\": \"{{{depNameSanitized}}}-{{{currentValue}}}\",\n\"commitMessageExtra\": \"to {{newDigestShort}}\",\n\"commitMessageTopic\": \"{{{depName}}}{{#if currentValue}}:{{{currentValue}}}{{/if}} Docker digest\",\n\"group\": {\n\"commitMessageTopic\": \"{{{groupName}}}\",\n\"commitMessageExtra\": \"\"\n}\n},\n\"pin\": {\n\"commitMessageExtra\": \"\",\n\"groupName\": \"Docker digests\",\n\"group\": {\n\"commitMessageTopic\": \"{{{groupName}}}\",\n\"branchTopic\": \"digests-pin\"\n}\n}\n}\n</code></pre>"},{"location":"modules/datasource/docker/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/docker/#feature-requests","title":"Feature requests","text":"<ul> <li>Azure Container Registry Managed Identity  #20200</li> <li>ECR OCI Credentials for Docker and Helm repositories #19241</li> <li>docker datasource registryUrls #10135</li> <li>Support \"releaseTimestamp\" field for Docker datasource #5773</li> <li>Docker major upgrades only when latest changed #3469</li> <li>Support Jenkinsfile for Docker Tags #3464</li> </ul>"},{"location":"modules/datasource/dotnet-version/","title":"Dotnet Version Datasource","text":"<p>Identifier: <code>dotnet-version</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource returns releases of the .NET Runtime and SDK. It only accepts dependencies with the name <code>dotnet-sdk</code> or <code>dotnet-runtime</code>.</p>"},{"location":"modules/datasource/flutter-version/","title":"Flutter Version Datasource","text":"<p>Identifier: <code>flutter-version</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/galaxy/","title":"Galaxy Datasource","text":"<p>Identifier: <code>galaxy</code></p> <p>Default versioning: <code>pep440</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/galaxy-collection/","title":"Galaxy Collection Datasource","text":"<p>Identifier: <code>galaxy-collection</code></p> <p>Default versioning: <code>pep440</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/git-refs/","title":"Git Refs Datasource","text":"<p>Identifier: <code>git-refs</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>This datasource returns a reference from a Git repository. The <code>packageName</code> must be a fully qualified domain name. To fetch the latest digest of a reference instead of the named reference, specify the reference as the <code>currentValue</code> and match on the <code>currentDigest</code>.</p> <p>Usage example</p> <p>The following is an example where you would maintain the HEAD digest of the <code>master</code> branch of a repository. You would configure a generic regex manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^versions.ini$\"],\n\"matchStrings\": [\"GOOGLE_API_VERSION=(?&lt;currentDigest&gt;.*?)\\\\n\"],\n\"currentValueTemplate\": \"master\",\n\"depNameTemplate\": \"googleapis\",\n\"packageNameTemplate\": \"https://github.com/googleapis/googleapis\",\n\"datasourceTemplate\": \"git-refs\"\n}\n]\n}\n</code></pre>"},{"location":"modules/datasource/git-tags/","title":"Git Tags Datasource","text":"<p>Identifier: <code>git-tags</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/git-tags/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/git-tags/#feature-requests","title":"Feature requests","text":"<ul> <li>Support git insteadOf env configuration in git-refs and git-tags datasources #19271</li> </ul>"},{"location":"modules/datasource/github-release-attachments/","title":"Github Release Attachments Datasource","text":"<p>Identifier: <code>github-release-attachments</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/github-releases/","title":"Github Releases Datasource","text":"<p>Identifier: <code>github-releases</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/github-tags/","title":"Github Tags Datasource","text":"<p>Identifier: <code>github-tags</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/github-tags/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/github-tags/#feature-requests","title":"Feature requests","text":"<ul> <li>Progressively enhance git-refs #19459</li> <li>Add releaseTimestamp for \"github-tags\" datasource #7062</li> <li>Regex Manager - Handling when version doesn't exactly match github-tags format #6716</li> </ul>"},{"location":"modules/datasource/github-tags/#bug-reports","title":"Bug reports","text":"<ul> <li>Source url isn't provided for digest-only updates #15889</li> </ul>"},{"location":"modules/datasource/gitlab-packages/","title":"Gitlab Packages Datasource","text":"<p>Identifier: <code>gitlab-packages</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>GitLab Packages API supports looking up package versions from all types of packages registry supported by GitLab and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be formed with the project path first, then a <code>:</code> and finally the package name.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js</code> would look for the<code>@gitlab-org/nk-js</code> packages in the generic packages repository of the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>If you are using a self-hosted GitLab instance, please note the following requirements:</p> <ul> <li>If you are on the <code>Free</code> edition, this datasource requires at least GitLab 13.3</li> <li>If you are on the <code>Premium</code> or the <code>Ultimate</code> edition, this datasource requires at least GitLab 11.8, but GitLab 12.9 or more is recommended if you have a lot of packages with different names in the same project</li> </ul> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a generic regex manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^versions.ini$\"],\n\"matchStrings\": [\n\"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n],\n\"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n}\n]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-packages depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-packages</code> uses the <code>docker</code> versioning scheme.</p>"},{"location":"modules/datasource/gitlab-releases/","title":"Gitlab Releases Datasource","text":"<p>Identifier: <code>gitlab-releases</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>GitLab Releases API supports looking up releases supported by GitLab and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be set to the project path.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> would look for releases in the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>Please note the following requirements:</p> <ul> <li>This datasource requires at least GitLab 11.7</li> </ul> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a generic regex manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^versions.ini$\"],\n\"matchStrings\": [\n\"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n],\n\"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n}\n]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-releases depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-releases</code> uses the <code>semver-coerced</code> versioning scheme.</p>"},{"location":"modules/datasource/gitlab-tags/","title":"Gitlab Tags Datasource","text":"<p>Identifier: <code>gitlab-tags</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>GitLab Tags API supports looking up Git tags and can be used in combination with regex managers to keep dependencies up-to-date which are not specifically supported by Renovate.</p> <p>To specify which specific repository should be queried when looking up a package, the <code>packageName</code> should be set to the project path.</p> <p>As an example, <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> would look for releases in the <code>gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list</code> project.</p> <p>To specify where to find a self-hosted GitLab instance, specify <code>registryUrl</code>. An example would be <code>https://gitlab.company.com</code>.</p> <p>Usage Example</p> <p>A real-world example for this specific datasource would be maintaining package versions in a config file. This can be achieved by configuring a generic regex manager in <code>renovate.json</code> for files named <code>versions.ini</code>:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^versions.ini$\"],\n\"matchStrings\": [\n\"# renovate: datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?( registryUrl=(?&lt;registryUrl&gt;.*?))?\\\\s.*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n],\n\"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n}\n]\n}\n</code></pre> <p>Now you may use comments in your <code>versions.ini</code> files to automatically update dependencies, which could look like this:</p> <pre><code># renovate: datasource=gitlab-tags depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n</code></pre> <p>By default, <code>gitlab-tags</code> uses the <code>semver-coerced</code> versioning scheme.</p>"},{"location":"modules/datasource/gitlab-tags/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/gitlab-tags/#feature-requests","title":"Feature requests","text":"<ul> <li>datasource gitlab-tags: private repository support #8159</li> </ul>"},{"location":"modules/datasource/go/","title":"Go Datasource","text":"<p>Identifier: <code>go</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource will default to using the <code>GOPROXY</code> settings <code>https://proxy.golang.org,direct</code> if there is no value defined in environment variables.</p> <p>To override this default and use a different proxy, simply configure <code>GOPROXY</code> to an alternative setting in env.</p> <p>To override this default and stop using any proxy at all, set <code>GOPROXY</code> to the value <code>direct</code>.</p>"},{"location":"modules/datasource/go/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/go/#feature-requests","title":"Feature requests","text":"<ul> <li>Support go versioning #18480</li> <li>Ignore retracted versions of go dependencies #13012</li> <li>Updating go.sum artifact on Bitbucket Cloud #6680</li> </ul>"},{"location":"modules/datasource/go/#bug-reports","title":"Bug reports","text":"<ul> <li>Renovate doesn't understand custom domains for go modules #18396</li> <li>Go module under GitLab subgroup is not detected when GOPROXY is not set #16743</li> <li>Go sub-modules incorrectly bumped to root module version #11778</li> <li>go.mod dependencies versions not detected properly when number for deps with 1000+ tags #8852</li> </ul>"},{"location":"modules/datasource/golang-version/","title":"Golang Version Datasource","text":"<p>Identifier: <code>golang-version</code></p> <p>Default versioning: <code>semver</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/gradle-version/","title":"Gradle Version Datasource","text":"<p>Identifier: <code>gradle-version</code></p> <p>Default versioning: <code>gradle</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/helm/","title":"Helm Datasource","text":"<p>Identifier: <code>helm</code></p> <p>Default versioning: <code>helm</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Default configuration:</p> <pre><code>{\n\"commitMessageTopic\": \"Helm release {{depName}}\"\n}\n</code></pre>"},{"location":"modules/datasource/helm/#open-items","title":"Open items","text":"<p>The below list of bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/helm/#bug-reports","title":"Bug reports","text":"<ul> <li>helm datasource now failing with <code>couldn't get index.yaml file</code> #16249</li> </ul>"},{"location":"modules/datasource/hermit/","title":"Hermit Datasource","text":"<p>Identifier: <code>hermit</code></p> <p>Default versioning: <code>hermit</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>By default Hermit looks up packages from the open source project https://github.com/cashapp/hermit-packages.</p> <p>Hermit supports private packages. To get Renovate to find your private packages, follow these steps:</p> <ol> <li>perform <code>hermit search --json</code> with your private Hermit distribution and save the file to <code>index.json</code></li> <li>make a GitHub release in your private packages repository named <code>index</code> with the asset <code>index.json</code> generated in step 1.</li> <li>setup a CI pipeline to repeat step 1 &amp; 2 on new commits to the private packages repository.</li> <li>Add a package rule for the Hermit manager, so that Renovate knows where to find your private packages:</li> </ol> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"hermit\"],\n\"defaultRegistryUrls\": [\n\"https://github.com/your/private-hermit-packages\"\n]\n}\n]\n}\n</code></pre>"},{"location":"modules/datasource/hex/","title":"Hex Datasource","text":"<p>Identifier: <code>hex</code></p> <p>Default versioning: <code>hex</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/hexpm-bob/","title":"Hexpm Bob Datasource","text":"<p>Identifier: <code>hexpm-bob</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>This datasource returns releases from Bob the builder.</p> <p>Supported values for <code>packageName</code>:</p> <ul> <li><code>elixir</code>, Elixir homepage</li> <li><code>otp/[OS/Version]</code>, Erlang/OTP homepage</li> </ul> <p>Read the Bob the builder docs, Erlang builds for a list of supported operating systems and versions.</p>"},{"location":"modules/datasource/java-version/","title":"Java Version Datasource","text":"<p>Identifier: <code>java-version</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource returns releases from the Adoptium API.</p> <p>It uses <code>image_type=&lt;jre|jdk&gt;&amp;project=jdk&amp;release_type=ga&amp;sort_method=DATE&amp;sort_order=DESC</code> as filter parameters. This means that the datasource finds:</p> <ul> <li>JRE or JDK images</li> <li>with a JDK project</li> <li>which have the General Availability status</li> </ul> <p>And finally, the results are sorted in descending order.</p> <p>When Renovate contacts the Adoptium API, it fetches 50 pages. Each page has 50 items. So 2500 items are fetched from the API in total.</p> <p>If you want to get releases which come with the JDK, set the <code>packageName</code> to <code>java-jdk</code> or <code>java</code>.</p> <p>If you want to get releases which come with the JRE, set the <code>packageName</code> to <code>java-jre</code>. LTS releases of Java will have a version that comes with the JRE. Non-LTS releases may not always include the JRE.</p>"},{"location":"modules/datasource/jenkins-plugins/","title":"Jenkins Plugins Datasource","text":"<p>Identifier: <code>jenkins-plugins</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/kubernetes-api/","title":"Kubernetes Api Datasource","text":"<p>Identifier: <code>kubernetes-api</code></p> <p>Default versioning: <code>kubernetes-api</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>Kubernetes API upgrade versions are manually transcribed from the Kubernetes API deprecation guide. The Kubernetes API deprecation guide is updated regularly, so this list may be out of date.</p>"},{"location":"modules/datasource/maven/","title":"Maven Datasource","text":"<p>Identifier: <code>maven</code></p> <p>Default versioning: <code>maven</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p>"},{"location":"modules/datasource/maven/#making-your-changelogs-fetchable","title":"Making your changelogs fetchable","text":"<p>In case you are publishing artifacts and you want to ensure that your changelogs are fetchable by <code>Renovate</code>, you need to configure the scm section on their <code>pom.xml</code> file.</p> <p>For example:</p> <pre><code>&lt;scm&gt;\n&lt;url&gt;scm:git:https://github.com/path_to_repository&lt;/url&gt;\n&lt;/scm&gt;\n</code></pre> <p>This is what allows <code>Renovate</code> to determine the <code>sourceUrl</code>, that it then uses to fetch the changelogs.</p> <p>Note</p> <p>This also works for private repositories. It can leverage the same <code>token</code> that you had to configure in order to be able to reach the private Artifactory.</p>"},{"location":"modules/datasource/maven/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/maven/#feature-requests","title":"Feature requests","text":"<ul> <li>Add ability to specify AWS credentials in hostRules block for private Maven repos hosted directly on S3  #18745</li> <li>Maven: Update versions defined in a property but managed by parent pom #15170</li> <li>Add support for maven snapshot version updates #14510</li> <li>Support pinned snapshot versions in maven datasource #14300</li> <li>Cache pom.xml content of non-SNAPSHOT versions to improve Maven cache efficiency #6572</li> </ul>"},{"location":"modules/datasource/node-version/","title":"Node Version Datasource","text":"<p>Identifier: <code>node-version</code></p> <p>Default versioning: <code>node</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p> <p>Description:</p> <p>This datasource returns NodeJS releases from nodejs.org API.</p>"},{"location":"modules/datasource/npm/","title":"Npm Datasource","text":"<p>Identifier: <code>npm</code></p> <p>Default versioning: <code>npm</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/npm/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/npm/#feature-requests","title":"Feature requests","text":"<ul> <li>Per-release sourceUrl support for npm datasource #13943</li> <li>Use the exact release that started LTS in node versioning #9716</li> <li>get changelog from npm #9061</li> </ul>"},{"location":"modules/datasource/npm/#bug-reports","title":"Bug reports","text":"<ul> <li>abortOnError:false not working #13482</li> </ul>"},{"location":"modules/datasource/nuget/","title":"Nuget Datasource","text":"<p>Identifier: <code>nuget</code></p> <p>Default versioning: <code>nuget</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/nuget/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/nuget/#feature-requests","title":"Feature requests","text":"<ul> <li>Use NuGet Release notes #14128</li> </ul>"},{"location":"modules/datasource/orb/","title":"Orb Datasource","text":"<p>Identifier: <code>orb</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/packagist/","title":"Packagist Datasource","text":"<p>Identifier: <code>packagist</code></p> <p>Default versioning: <code>composer</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/packagist/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/packagist/#feature-requests","title":"Feature requests","text":"<ul> <li>Support Composer v2 canonical settings #20201</li> </ul>"},{"location":"modules/datasource/pod/","title":"Pod Datasource","text":"<p>Identifier: <code>pod</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/pod/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/pod/#feature-requests","title":"Feature requests","text":"<ul> <li>Cocoapods repository URL #12313</li> </ul>"},{"location":"modules/datasource/puppet-forge/","title":"Puppet Forge Datasource","text":"<p>Identifier: <code>puppet-forge</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/pypi/","title":"Pypi Datasource","text":"<p>Identifier: <code>pypi</code></p> <p>Default versioning: <code>pep440</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/pypi/#open-items","title":"Open items","text":"<p>The below list of bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/pypi/#bug-reports","title":"Bug reports","text":"<ul> <li>Explicit source of Poetry managed Python dependency is not supported #12003</li> </ul>"},{"location":"modules/datasource/repology/","title":"Repology Datasource","text":"<p>Identifier: <code>repology</code></p> <p>Default versioning: no default versioning</p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p> <p>Description:</p> <p>With Repology you can look up package versions from many package repositories. You can combine Repology with regex managers to update dependencies which are not supported by Renovate.</p> <p>The <code>packageName</code> field should be constructed using the repository identifier and the actual package name separated by a slash. For example: <code>alpine_3_12/gcc</code> would look for a binary (or source package) called <code>gcc</code> within the <code>alpine_3_12</code> repository.</p> <p>A list of all supported repositories can be found on the Repology homepage.</p> <p>To find the correct identifier, select the repository you want and copy the identifier in the URL: <code>https://repology.org/repository/&lt;identifier&gt;</code>. For example, the <code>Alpine Linux 3.12</code> repository has this URL: <code>https://repology.org/repository/alpine_3_12</code> and has this repository identifier: <code>alpine_3_12</code>.</p> <p>Usage Example</p> <p>Say you're using system packages in a Dockerfile and want to update them with Repology. With the Repology datasource you can \"pin\" each dependency, and get automatic updates.</p> <p>First you would set a generic regex manager in your <code>renovate.json</code> file for <code>Dockerfile</code>:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^Dockerfile$\"],\n\"matchStrings\": [\n\"#\\\\s*renovate:\\\\s*datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\sENV .*?_VERSION=\\\"(?&lt;currentValue&gt;.*)\\\"\\\\s\"\n],\n\"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n}\n]\n}\n</code></pre> <p>Then you would put comments in your Dockerfile, to tell Renovate where to find the updates:</p> <pre><code>FROM alpine:3.12.0@sha256:a15790640a6690aa1730c38cf0a440e2aa44aaca9b0e8931a9f2b0d7cc90fd65\n\n# renovate: datasource=repology depName=alpine_3_12/gcc versioning=loose\nENV GCC_VERSION=\"9.3.0-r2\"\n# renovate: datasource=repology depName=alpine_3_12/musl-dev versioning=loose\nENV MUSL_DEV_VERSION=\"1.1.24-r8\"\n\nRUN apk add --no-cache \\\ngcc=\"${GCC_VERSION}\" \\\nmusl-dev=\"${MUSL_DEV_VERSION}\"\n</code></pre> <p>When the operating system package for <code>gcc</code> of <code>Alpine Linux 3.12</code> is updated, Renovate updates the environment variable.</p> <p>Tip</p> <p>We recommend you try <code>loose</code> or <code>deb</code> versioning for distribution packages first. This is because the version number usually doesn't match Renovate's default <code>semver-coerced</code> specification.</p>"},{"location":"modules/datasource/ruby-version/","title":"Ruby Version Datasource","text":"<p>Identifier: <code>ruby-version</code></p> <p>Default versioning: <code>ruby</code></p> <p>Custom registry support: </p> <p>\u274c No custom registry support.</p>"},{"location":"modules/datasource/rubygems/","title":"Rubygems Datasource","text":"<p>Identifier: <code>rubygems</code></p> <p>Default versioning: <code>ruby</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/rubygems/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/datasource/rubygems/#feature-requests","title":"Feature requests","text":"<ul> <li>Change <code>Accept-Encoding</code> for requests to <code>/versions</code> for rubygems.org and set <code>range: bytes=0-</code> #21887</li> <li>Support GitHub package registry with bundler artifacts #15873</li> <li>Support Nexus repository manager for RubyGems #15459</li> <li>Bundler/Rubygems: support registries with incomplete releases lists #12618</li> <li>Gemstash server integration #6787</li> <li>Add back metadata for rubygems.org packages to get release notes / changelog #3670</li> </ul>"},{"location":"modules/datasource/sbt-package/","title":"Sbt Package Datasource","text":"<p>Identifier: <code>sbt-package</code></p> <p>Default versioning: <code>ivy</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/sbt-plugin/","title":"Sbt Plugin Datasource","text":"<p>Identifier: <code>sbt-plugin</code></p> <p>Default versioning: <code>ivy</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/terraform-module/","title":"Terraform Module Datasource","text":"<p>Identifier: <code>terraform-module</code></p> <p>Default versioning: <code>hashicorp</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/datasource/terraform-provider/","title":"Terraform Provider Datasource","text":"<p>Identifier: <code>terraform-provider</code></p> <p>Default versioning: <code>hashicorp</code></p> <p>Custom registry support: </p> <p>\u2705 Custom registries are supported.</p>"},{"location":"modules/manager/","title":"Managers","text":"<p>Renovate is based around the concept of \"package managers\", or \"managers\" for short. These range from traditional package managers like npm, Bundler and Composer through to less traditional concepts like CircleCI or Travis config files.</p> <p>The goal of Renovate is to detect and maintain all third-party dependencies in your repositories, through the use of managers.</p>"},{"location":"modules/manager/#supported-managers","title":"Supported Managers","text":"<p>docker: <code>ansible</code>, <code>docker-compose</code>, <code>dockerfile</code>, <code>droneci</code>, <code>gitlabci</code>, <code>kubernetes</code>, <code>woodpecker</code></p> <p>dotnet: <code>cake</code>, <code>nuget</code></p> <p>elixir: <code>mix</code></p> <p>golang: <code>gomod</code></p> <p>java: <code>gradle</code>, <code>maven</code>, <code>osgi</code></p> <p>js: <code>meteor</code>, <code>npm</code></p> <p>node: <code>nodenv</code>, <code>nvm</code>, <code>travis</code></p> <p>php: <code>composer</code></p> <p>python: <code>pip-compile</code>, <code>pip_requirements</code>, <code>pip_setup</code>, <code>pipenv</code>, <code>poetry</code>, <code>pyenv</code>, <code>setup-cfg</code></p> <p>ruby: <code>bundler</code>, <code>puppet</code>, <code>ruby-version</code></p> <p>rust: <code>cargo</code></p> <p>other: <code>ansible-galaxy</code>, <code>argocd</code>, <code>asdf</code>, <code>azure-pipelines</code>, <code>batect</code>, <code>batect-wrapper</code>, <code>bazel</code>, <code>bazelisk</code>, <code>bicep</code>, <code>bitbucket-pipelines</code>, <code>buildkite</code>, <code>cdnurl</code>, <code>circleci</code>, <code>cloudbuild</code>, <code>cocoapods</code>, <code>conan</code>, <code>deps-edn</code>, <code>fleet</code>, <code>flux</code>, <code>fvm</code>, <code>git-submodules</code>, <code>github-actions</code>, <code>gitlabci-include</code>, <code>gradle-wrapper</code>, <code>helm-requirements</code>, <code>helm-values</code>, <code>helmfile</code>, <code>helmsman</code>, <code>helmv3</code>, <code>hermit</code>, <code>homebrew</code>, <code>html</code>, <code>jenkins</code>, <code>jsonnet-bundler</code>, <code>kotlin-script</code>, <code>kustomize</code>, <code>leiningen</code>, <code>maven-wrapper</code>, <code>mint</code>, <code>nix</code>, <code>pre-commit</code>, <code>pub</code>, <code>regex</code>, <code>sbt</code>, <code>swift</code>, <code>tekton</code>, <code>terraform</code>, <code>terraform-version</code>, <code>terragrunt</code>, <code>terragrunt-version</code>, <code>tflint-plugin</code>, <code>velaci</code></p>"},{"location":"modules/manager/#configuring-managers","title":"Configuring Managers","text":""},{"location":"modules/manager/#file-matching","title":"File Matching","text":"<p>Most managers have a default <code>fileMatch</code> array. The <code>fileMatch</code> array has regular expression strings that match against the repository file list.</p>"},{"location":"modules/manager/#managers-with-no-default-filematch","title":"Managers with no default fileMatch","text":"<p>Some managers have no default <code>fileMatch</code> regular expression, because they have no filename convention that would let Renovate intelligently filter them. In such a case, the manager will be disabled until you create a <code>fileMatch</code> regular expression, e.g. like the following:</p> <pre><code>{\n\"kubernetes\": {\n\"fileMatch\": [\"^config/.*\\\\.yaml$\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/#extending-a-managers-default-filematch","title":"Extending a manager's default fileMatch","text":"<p>If the default <code>fileMatch</code> regular expression for a manager does not match against one of your relevant files, you can extend the existing regular expression(s) by configuring a manager's <code>fileMatch</code> like in this example:</p> <pre><code>{\n\"dockerfile\": {\n\"fileMatch\": [\"does-not-look-like-a-docker-file\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/#ignoring-files-that-match-the-default-filematch","title":"Ignoring files that match the default fileMatch","text":"<p>Renovate will extend the existing <code>fileMatch</code>, meaning you don't need to include the default regular expressions like <code>Dockerfile</code> in your own array. In other words, the regular expression are \"additive\". If a manager matches a file that you don't want it to, ignore it using the <code>ignorePaths</code> configuration option. Also, if you ever find that Renovate is not matching a file name that you're certain it should, check your preset config isn't the cause of it. The <code>config:base</code> preset ignores common test and example directory names, for example.</p>"},{"location":"modules/manager/#enabling-and-disabling-managers","title":"Enabling and disabling managers","text":""},{"location":"modules/manager/#enabling-experimental-managers","title":"Enabling experimental managers","text":"<p>Most managers are enabled by default. For those that aren't, typically because they are considered experimental, you can opt-in manually. If there was a manager called <code>some-new-manager</code> you would enable it like this:</p> <pre><code>{\n\"some-new-manager\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"modules/manager/#disabling-managers","title":"Disabling managers","text":"<p>To disable a specific manager like <code>gradle</code>, do this:</p> <pre><code>{\n\"gradle\": {\n\"enabled\": false\n}\n}\n</code></pre> <p>To disable all managers within a language like <code>python</code>, do this:</p> <pre><code>{\n\"python\": {\n\"enabled\": false\n}\n}\n</code></pre> <p>Only languages declared by a Renovate manager are supported. Please check the list of supported managers.</p>"},{"location":"modules/manager/#limiting-enabled-managers","title":"Limiting enabled managers","text":"<p>Say you only want to use Renovate for JavaScript packages, and to update your Dockerfile, and don't want any other updates. You can use the <code>enabledManagers</code> array, to list the managers you want to use (<code>npm</code>, <code>dockerfile</code>):</p> <pre><code>{\n\"enabledManagers\": [\"npm\", \"dockerfile\"]\n}\n</code></pre> <p>Using the <code>enabledManagers</code> array disables all other managers, this includes Bundler, Composer, Docker Compose, etc.</p>"},{"location":"modules/manager/ansible/","title":"Automated Dependency Updates for Ansible","text":"<p>Renovate supports updating Ansible dependencies.</p>"},{"location":"modules/manager/ansible/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)tasks/[^/]+\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/ansible/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/ansible/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)tasks/[^/]+\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/ansible/#additional-information","title":"Additional Information","text":"<p>Supports Docker-type dependency extraction from Ansible configuration files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/ansible-galaxy/","title":"Automated Dependency Updates for Ansible Galaxy","text":"<p>Renovate supports updating Ansible Galaxy dependencies.</p>"},{"location":"modules/manager/ansible-galaxy/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>(^|/)requirements\\.ya?ml$\n(^|/)galaxy\\.ya?ml$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/ansible-galaxy/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>galaxy-collection</code>, <code>git-tags</code>, <code>github-tags</code>.</p>"},{"location":"modules/manager/ansible-galaxy/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)requirements\\\\.ya?ml$\",\n\"(^|/)galaxy\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/ansible-galaxy/#additional-information","title":"Additional Information","text":"<p>Extracts Ansible Galaxy dependencies from configuration files used by the <code>ansible-galaxy</code> CLI tool.</p> <p>This manager uses two <code>depType</code>s to allow a fine-grained control of which dependencies are upgraded:</p> <ul> <li>collection</li> <li>role</li> </ul>"},{"location":"modules/manager/ansible-galaxy/#open-items","title":"Open items","text":"<p>The below list of bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/ansible-galaxy/#bug-reports","title":"Bug reports","text":"<ul> <li>ansible-galaxy / parsing ends when a comment is found in dependencies #17281</li> </ul>"},{"location":"modules/manager/argocd/","title":"Automated Dependency Updates for Argo CD","text":"<p>Renovate supports updating Argo CD dependencies.</p>"},{"location":"modules/manager/argocd/#file-matching","title":"File Matching","text":"<p>Because file names for <code>argocd</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>argocd</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/argocd/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>, <code>helm</code>.</p>"},{"location":"modules/manager/argocd/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": []\n}\n</code></pre>"},{"location":"modules/manager/argocd/#additional-information","title":"Additional Information","text":"<p>The <code>argocd</code> manager has no <code>fileMatch</code> default patterns, so it won't match any files until you configure it with a pattern. This is because there is no commonly accepted file/directory naming convention for argocd YAML files and we don't want to check every single <code>*.yaml</code> file in repositories just in case any of them have ArgoCD definitions.</p> <p>If most <code>.yaml</code> files in your repository are argocd ones, then you could add this to your config:</p> <pre><code>{\n\"argocd\": {\n\"fileMatch\": [\"\\\\.yaml$\"]\n}\n}\n</code></pre> <p>If instead you have them all inside a <code>argocd/</code> directory, you would add this:</p> <pre><code>{\n\"argocd\": {\n\"fileMatch\": [\"argocd/.+\\\\.yaml$\"]\n}\n}\n</code></pre> <p>Or if it's just a single file then something like this:</p> <pre><code>{\n\"argocd\": {\n\"fileMatch\": [\"^config/applications\\\\.yaml$\"]\n}\n}\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/asdf/","title":"Automated Dependency Updates for asdf","text":"<p>Renovate supports updating asdf dependencies.</p>"},{"location":"modules/manager/asdf/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.tool-versions$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/asdf/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>dart-version</code>, <code>docker</code>, <code>flutter-version</code>, <code>github-releases</code>, <code>github-tags</code>, <code>hexpm-bob</code>, <code>java-version</code>, <code>node-version</code>, <code>npm</code>, <code>pypi</code>, <code>ruby-version</code>.</p>"},{"location":"modules/manager/asdf/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.tool-versions$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/asdf/#additional-information","title":"Additional Information","text":"<p>Keeps the asdf <code>.tool-versions</code> file updated.</p> <p>Because <code>asdf</code> supports versioning for many different tools, specific tool support must be added one-by-one. The following tools are currently supported:</p> <ul> <li>argocd</li> <li>awscli</li> <li>bun</li> <li>cargo-make</li> <li>clojure</li> <li>crystal</li> <li>dart</li> <li>deno</li> <li>direnv</li> <li>dprint</li> <li>elixir</li> <li>elm</li> <li>erlang</li> <li>flutter</li> <li>gauche</li> <li>gohugo</li> <li>golang</li> <li>haskell</li> <li>helm</li> <li>helmfile</li> <li>hugo</li> <li>idris</li> <li>java</li> <li>julia</li> <li>just</li> <li>kotlin</li> <li>kustomize</li> <li>lua</li> <li>nim</li> <li>nodejs</li> <li>ocaml</li> <li>perl</li> <li>php</li> <li>pnpm</li> <li>poetry</li> <li>pulumi</li> <li>python</li> <li>ruby</li> <li>rust</li> <li>scala</li> <li>shellcheck</li> <li>shfmt</li> <li>sops</li> <li>terraform</li> <li>terragrunt</li> <li>trivy</li> <li>zig</li> </ul> <p>Note</p> <p>Only the first version entry for each supported tool is managed, this is because <code>.tool-versions</code> supports fallback versions.</p>"},{"location":"modules/manager/asdf/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/asdf/#feature-requests","title":"Feature requests","text":"<ul> <li>[asdf] Support flutter plugin #20273</li> <li>Enable to use <code>temurin</code> as a Java distribution name instead of <code>adoptopenjdk</code>  in asdf .tool-version #19184</li> <li>Support more Java distributions for asdf .tool-version file #19183</li> </ul>"},{"location":"modules/manager/azure-pipelines/","title":"Automated Dependency Updates for Azure Pipelines","text":"<p>Renovate supports updating Azure Pipelines dependencies.</p>"},{"location":"modules/manager/azure-pipelines/#enabling","title":"Enabling","text":"<p>Azure Pipelines functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"azure-pipelines\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/azure-pipelines/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>azure.*pipelines?.*\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/azure-pipelines/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>azure-pipelines-tasks</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/azure-pipelines/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"azure.*pipelines?.*\\\\.ya?ml$\"\n],\n\"enabled\": false\n}\n</code></pre>"},{"location":"modules/manager/azure-pipelines/#additional-information","title":"Additional Information","text":"<p>The <code>azure-pipelines</code> manager is disabled by default. This is because there's no way for Renovate to know whether new task versions are yet available with the Azure DevOps environment, so new versions proposed by Renovate could fail.</p> <p>To opt into running it, set the following:</p> <pre><code>{\n\"azure-pipelines\": {\n\"enabled\": true\n}\n}\n</code></pre> <p>In most cases only major version numbers are specified in YAML when referencing a task version: <code>NodeTool@0</code>. By default, Renovate replaces these with the full version: <code>NodeTool@0.216.0</code>.</p> <p>To use the standard convention for Azure Pipelines, add:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"azure-pipelines-tasks\"],\n\"extractVersion\": \"^(?&lt;version&gt;\\\\d+)\"\n}\n]\n}\n</code></pre> <p>Renovate now updates container and repository resources from the <code>resources</code> block, plus tasks from <code>steps</code> blocks.</p> <p>For example:</p> <pre><code>resources:\nrepositories:\n- type: github\nname: renovate/renovate\nref: refs/heads/main\n- type: github\nname: user/repo\nref: refs/tags/v0.5.1\ncontainers:\n- container: linux\nimage: ubuntu:16.04\n- container: python\nimage: python:3.7@sha256:3870d35b962a943df72d948580fc66ceaaee1c4fbd205930f32e0f0760eb1077\n\nstages:\n- stage: StageOne\njobs:\n- job: JobOne\nsteps:\n- task: Bash@3\ninputs:\nscript: 'echo Hello World'\n</code></pre> <p>Read the resources block and the tasks block Azure Pipelines documentation for more information.</p> <p>Files that are processed by the manager includes:</p> <ul> <li><code>.azure-pipelines/**/*.yaml</code></li> <li><code>.azure-pipelines.yaml</code></li> <li><code>.azure-pipelines.yml</code></li> <li><code>azure-pipelines/**/*.yaml</code></li> <li><code>azure-pipelines.yaml</code></li> <li><code>azure-pipelines.yml</code></li> <li><code>azure-pipeline/**/*.yaml</code></li> <li><code>azure-pipeline.yaml</code></li> <li><code>azure-pipeline.yml</code></li> </ul>"},{"location":"modules/manager/azure-pipelines/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/azure-pipelines/#feature-requests","title":"Feature requests","text":"<ul> <li>Allow Renovate's azure-pipeline's manager to read azure repositories defined in resource blocks #15028</li> </ul>"},{"location":"modules/manager/batect/","title":"Automated Dependency Updates for Batect","text":"<p>Renovate supports updating Batect dependencies.</p>"},{"location":"modules/manager/batect/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)batect(-bundle)?\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/batect/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/batect/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)batect(-bundle)?\\\\.yml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/batect/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images and Batect bundles from Batect configuration files.</p> <p>For updates to Batect itself, see batect-wrapper.</p>"},{"location":"modules/manager/batect/#files-searched","title":"Files searched","text":"<p>By default, the manager searches for files called <code>batect.yml</code> or <code>batect-bundle.yml</code>.</p> <p>If you keep your Batect configuration in other files, you'll need to tell Renovate where to find them. Files included in your main configuration file with <code>include</code> don't need to be listed.</p> <p>You do this by creating a <code>\"batect\"</code> object in your <code>renovate.json</code> file. This object should have a <code>fileMatch</code> array with regular expressions that match the configuration file names.</p> <p>For example:</p> <pre><code>{\n\"batect\": {\n\"fileMatch\": [\n\"(^|/)batect(-bundle)?\\\\.yml$\",\n\"(^|/)my-other-batect-file\\\\.yml$\",\n\"^a-directory/[^/]*\\\\.yml$\"\n]\n}\n}\n</code></pre>"},{"location":"modules/manager/batect/#bundle-versioning","title":"Bundle versioning","text":"<p>This manager assumes that any bundles referenced use tags for versioning, and that these tags use SemVer. The implementation of SemVer is strict - versions must follow the <code>X.Y.Z</code> or <code>vX.Y.Z</code> format. Versions that don't match this format (eg. <code>X.Y</code>) will be ignored.</p>"},{"location":"modules/manager/batect-wrapper/","title":"Automated Dependency Updates for Batect Wrapper","text":"<p>Renovate supports updating Batect Wrapper dependencies.</p>"},{"location":"modules/manager/batect-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)batect$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/batect-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/batect-wrapper/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)batect$\"\n],\n\"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/batect-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Batect wrapper updates. The default configuration will automatically update both <code>batect</code> and <code>batect.cmd</code>, similar to running <code>./batect --upgrade</code>.</p> <p>See also: Batect image reference updates</p>"},{"location":"modules/manager/bazel/","title":"Automated Dependency Updates for Bazel","text":"<p>Renovate supports updating Bazel dependencies.</p>"},{"location":"modules/manager/bazel/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>(^|/)WORKSPACE(|\\.bazel)$\n\\.bzl$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/bazel/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>github-releases</code>, <code>github-tags</code>, <code>go</code>.</p>"},{"location":"modules/manager/bazel/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)WORKSPACE(|\\\\.bazel)$\",\n\"\\\\.bzl$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/bazel/#additional-information","title":"Additional Information","text":"<p>Bazel is quite unlike most other \"package managers\" that Renovate supports, which usually focus on a particular ecosystem like JavaScript, Ruby or Docker. Instead, Bazel is a build tool so supports a multitude of languages/datasources. Renovate does not support all possible Bazel references, although would like to, and feature requests are welcome.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/bazel/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/bazel/#feature-requests","title":"Feature requests","text":"<ul> <li>Bazel: Updating http_file's that point into GitHub repos #8784</li> <li>bazel: support http_archives with non-GitHub URLs #6847</li> <li>[Bazel] Support for repository_ctx download and download_and_extract #6462</li> <li>Support bazel go_repository urls field #6207</li> <li>Invoke <code>bazel run //:gazelle</code> to upgrade BUILD files after updating the <code>WORKSPACE</code> of a Bazel proejct #3347</li> </ul>"},{"location":"modules/manager/bazelisk/","title":"Automated Dependency Updates for Bazelisk","text":"<p>Renovate supports updating Bazelisk dependencies.</p>"},{"location":"modules/manager/bazelisk/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.bazelversion$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/bazelisk/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/bazelisk/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.bazelversion$\"\n],\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/bazelisk/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.bazelversion</code> file updated.</p>"},{"location":"modules/manager/bicep/","title":"Automated Dependency Updates for Bicep","text":"<p>Renovate supports updating Bicep dependencies.</p>"},{"location":"modules/manager/bicep/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.bicep$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/bicep/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>azure-bicep-resource</code>.</p>"},{"location":"modules/manager/bicep/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.bicep$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/bicep/#additional-information","title":"Additional Information","text":"<p>Updates the Azure REST API version of <code>resource</code>s in Bicep files.</p>"},{"location":"modules/manager/bitbucket-pipelines/","title":"Automated Dependency Updates for Bitbucket Pipelines","text":"<p>Renovate supports updating Bitbucket Pipelines dependencies.</p>"},{"location":"modules/manager/bitbucket-pipelines/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.?bitbucket-pipelines\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/bitbucket-pipelines/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/bitbucket-pipelines/#references","title":"References","text":"<ul> <li>https://support.atlassian.com/bitbucket-cloud/docs/bitbucket-pipelines-configuration-reference/</li> </ul>"},{"location":"modules/manager/bitbucket-pipelines/#default-config","title":"Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.?bitbucket-pipelines\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/bitbucket-pipelines/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from Bitbucket Pipelines config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/buildkite/","title":"Automated Dependency Updates for Buildkite","text":"<p>Renovate supports updating Buildkite dependencies.</p>"},{"location":"modules/manager/buildkite/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>buildkite\\.ya?ml\n\\.buildkite/.+\\.ya?ml$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/buildkite/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/buildkite/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"buildkite\\\\.ya?ml\",\n\"\\\\.buildkite/.+\\\\.ya?ml$\"\n],\n\"commitMessageTopic\": \"buildkite plugin {{depName}}\",\n\"commitMessageExtra\": \"to {{#if isMajor}}{{{prettyNewMajor}}}{{else}}{{{newValue}}}{{/if}}\"\n}\n</code></pre>"},{"location":"modules/manager/buildkite/#additional-information","title":"Additional Information","text":"<p>Used for updating Docker dependencies in Buildkite configuration files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/bundler/","title":"Automated Dependency Updates for Bundler","text":"<p>Renovate supports updating Bundler dependencies.</p>"},{"location":"modules/manager/bundler/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Gemfile$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/bundler/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>rubygems</code>, <code>ruby-version</code>.</p>"},{"location":"modules/manager/bundler/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Gemfile$\"\n],\n\"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/bundler/#additional-information","title":"Additional Information","text":"<p>The <code>bundler</code> manager is used to extract dependencies from <code>Gemfile</code> and <code>Gemfile.lock</code> files.</p>"},{"location":"modules/manager/bundler/#authenticating-private-registry","title":"Authenticating private registry","text":"<p>If you need Bundler to authenticate with a private registry - and it's not the same host as your GitHub/GitLab/etc - then you should do so with <code>hostRules</code> and be sure to set the <code>hostType</code> value to be \"bundler\". e.g.</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"private-registry.company.com\",\n\"hostType\": \"rubygems\",\n\"token\": \"abc123\"\n}\n]\n}\n</code></pre> <p>Important notes regarding the above:</p> <p><code>hostType</code> is a required field, and you must provide a value. If you use Renovate <code>v26</code> or higher, set <code>hostType=rubygems</code>. If you use Renovate <code>v25</code> or lower, set <code>hostType=bundler</code>.</p> <p>If the registry is used for multiple package types then you may need multiple <code>hostRules</code>.</p> <p>Instead of <code>token</code>, you may also supply <code>username</code> and <code>password</code> instead.</p> <p>If you don't want to commit raw secrets to your repository, either:</p> <ul> <li>If self hosting, add the <code>hostRules</code> to your bot's configuration file rather than the repository's configuration file, or</li> <li>If using the hosted Mend Renovate app, make use of the <code>encrypted</code> capability</li> </ul>"},{"location":"modules/manager/bundler/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/bundler/#feature-requests","title":"Feature requests","text":"<ul> <li>Support Nexus repository manager for RubyGems #15459</li> <li>Bundler: Support inline gemfile declaration and dependencies #14017</li> <li>Bundler/Rubygems: support registries with incomplete releases lists #12618</li> <li>Update vendored gems when updating with bundler #11004</li> <li>Parse <code>gemspec</code> files #10616</li> <li>bundler with geminabox #6184</li> <li>Bundler extract and update github dependency #4789</li> </ul>"},{"location":"modules/manager/cake/","title":"Automated Dependency Updates for Cake","text":"<p>Renovate supports updating Cake dependencies.</p>"},{"location":"modules/manager/cake/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.cake$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/cake/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>nuget</code>.</p>"},{"location":"modules/manager/cake/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.cake$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/cake/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>*.cake</code> files.</p>"},{"location":"modules/manager/cargo/","title":"Automated Dependency Updates for Cargo","text":"<p>Renovate supports updating Cargo dependencies.</p>"},{"location":"modules/manager/cargo/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Cargo\\.toml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/cargo/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>crate</code>.</p>"},{"location":"modules/manager/cargo/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"Rust crate {{depName}}\",\n\"fileMatch\": [\n\"(^|/)Cargo\\\\.toml$\"\n],\n\"versioning\": \"cargo\"\n}\n</code></pre>"},{"location":"modules/manager/cargo/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>Cargo.toml</code> files, and also updates <code>Cargo.lock</code> files too if found.</p>"},{"location":"modules/manager/cargo/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/cargo/#feature-requests","title":"Feature requests","text":"<ul> <li>Support Rust/Cargo constraints when updating artifacts #6365</li> </ul>"},{"location":"modules/manager/cdnurl/","title":"Automated Dependency Updates for Cdnurl","text":"<p>Renovate supports updating Cdnurl dependencies.</p>"},{"location":"modules/manager/cdnurl/#file-matching","title":"File Matching","text":"<p>Because file names for <code>cdnurl</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>cdnurl</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/cdnurl/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>cdnjs</code>.</p>"},{"location":"modules/manager/cdnurl/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [],\n\"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/cdnurl/#additional-information","title":"Additional Information","text":"<p>To enable this manager, add the matching files to <code>cdnurl.fileMatch</code>. For example:</p> <pre><code>{\n\"cdnurl\": {\n\"fileMatch\": [\"\\\\.html?$\"]\n}\n}\n</code></pre> <p>Warning</p> <p>This manager isn't aware of subresource integrity (SRI) hashes. It searches for and replaces any matching URL it finds, without considering things like script integrity hashes. Use the <code>html</code> manager if you need SRI updating.</p>"},{"location":"modules/manager/circleci/","title":"Automated Dependency Updates for CircleCI","text":"<p>Renovate supports updating CircleCI dependencies.</p>"},{"location":"modules/manager/circleci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.circleci/config\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/circleci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>orb</code>.</p>"},{"location":"modules/manager/circleci/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.circleci/config\\\\.yml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/circleci/#additional-information","title":"Additional Information","text":"<p>The <code>circleci</code> manager extracts both <code>docker</code> as well as <code>orb</code> datasources from CircleCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/circleci/#private-orbs","title":"Private orbs","text":"<p>To get private orbs working you should:</p> <ol> <li>Encrypt your CircleCI token with the Renovate encryption page</li> <li>Create a new <code>hostRules</code> entry in your Renovate config file</li> <li>Put the encrypted token in the <code>token</code> field</li> </ol> <p>The end-result should look like this:</p> <pre><code>{\n\"hostRules\": [\n{\n\"matchHost\": \"circleci.com\",\n\"authType\": \"Token-Only\",\n\"encrypted\": {\n\"token\": \"****\"\n}\n}\n]\n}\n</code></pre> <p>This config strips the Bearer/Basic prefix from the <code>authorization</code> header.</p>"},{"location":"modules/manager/circleci/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/circleci/#feature-requests","title":"Feature requests","text":"<ul> <li>Detect + update Docker versions in CircleCI stages #19648</li> </ul>"},{"location":"modules/manager/cloudbuild/","title":"Automated Dependency Updates for Cloudbuild","text":"<p>Renovate supports updating Cloudbuild dependencies.</p>"},{"location":"modules/manager/cloudbuild/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)cloudbuild\\.ya?ml</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/cloudbuild/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/cloudbuild/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)cloudbuild\\\\.ya?ml\"\n]\n}\n</code></pre>"},{"location":"modules/manager/cloudbuild/#additional-information","title":"Additional Information","text":"<p>The <code>cloudbuild</code> manager extracts <code>docker</code> datasources from Cloud Build config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/cocoapods/","title":"Automated Dependency Updates for CocoaPods","text":"<p>Renovate supports updating CocoaPods dependencies.</p>"},{"location":"modules/manager/cocoapods/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Podfile$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/cocoapods/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>pod</code>.</p>"},{"location":"modules/manager/cocoapods/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Podfile$\"\n],\n\"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/cocoapods/#additional-information","title":"Additional Information","text":"<p>The <code>cocoapods</code> manager supports extracting both \"pod\" type references as well as dependencies on GitHub repositories that use versioned tags.</p> <p>Whenever a <code>Podfile</code> is updated, Renovate will also update any accompanying <code>Podfile.lock</code> file. This is done using the <code>cocoapods</code> gem which runs within the Ruby runtime.</p>"},{"location":"modules/manager/cocoapods/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/cocoapods/#feature-requests","title":"Feature requests","text":"<ul> <li>Support rangeStrategy=\"update-lockfile\" for Cocoapods #7621</li> </ul>"},{"location":"modules/manager/composer/","title":"Automated Dependency Updates for Composer","text":"<p>Renovate supports updating Composer dependencies.</p>"},{"location":"modules/manager/composer/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)([\\w-]*)composer\\.json$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/composer/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>packagist</code>.</p>"},{"location":"modules/manager/composer/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)([\\\\w-]*)composer\\\\.json$\"\n],\n\"versioning\": \"composer\"\n}\n</code></pre>"},{"location":"modules/manager/composer/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>composer.json</code> files, and keeps the associated <code>composer.lock</code> file updated too.</p> <p>If you use VCS repositories then Renovate needs a hint via the <code>name</code> property, which must match the relevant package. For example, the package <code>acme/foo</code> would need an entry in repositories similar to the following:</p> <pre><code>{\n\"name\": \"acme/foo\",\n\"type\": \"vcs\",\n\"url\": \"http://vcs-of-acme.org/acme/foo.git\"\n}\n</code></pre>"},{"location":"modules/manager/composer/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/composer/#feature-requests","title":"Feature requests","text":"<ul> <li>Support Composer v2 canonical settings #20201</li> <li>Automated updates for <code>config.platform.php</code> field in composer #13676</li> <li>matchPackageTypes #12839</li> <li>Composer global configuration #11980</li> <li>Support composer packages in repositories with type path #11674</li> <li>Composer local package support #8176</li> <li>Support specifying composer options #6295</li> <li>Execute composer config http-basic before run main script #5119</li> <li>Composer: Support stability constraints for packages #4542</li> <li>not all symfony packages updated #3558</li> </ul>"},{"location":"modules/manager/conan/","title":"Automated Dependency Updates for Conan","text":"<p>Renovate supports updating Conan dependencies.</p>"},{"location":"modules/manager/conan/#enabling","title":"Enabling","text":"<p>Conan functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"conan\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/conan/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)conanfile\\.(txt|py)$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/conan/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>conan</code>.</p>"},{"location":"modules/manager/conan/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)conanfile\\\\.(txt|py)$\"\n],\n\"datasource\": \"conan\",\n\"versioning\": \"conan\",\n\"enabled\": false\n}\n</code></pre>"},{"location":"modules/manager/conan/#additional-information","title":"Additional Information","text":"<p>Warning</p> <p>The Conan package manager is disabled by default due to slowness in the Conan API. We recommend you only enable it for low volume experimental purposes until issue #14170 is resolved.</p> <p>Renovate can upgrade dependencies in <code>conanfile.txt</code> or <code>conanfile.py</code> files.</p> <p>How it works:</p> <ol> <li>Renovate searches in each repository for any <code>conanfile.txt</code> or <code>conanfile.py</code> file</li> <li>Renovate extracts existing dependencies from:</li> <li>the <code>[requires]</code> and <code>[build_requires]</code> sections in the <code>conanfile.txt</code> format</li> <li>the <code>requirements()</code> and <code>build_requirements()</code> functions in the <code>conanfile.py</code> format</li> <li>and the <code>python_requires</code>, <code>requires</code> and <code>build_requires</code> variables in the <code>conanfile.py</code> format</li> <li>Renovate resolves the dependency's version using the Conan v2 API</li> <li>If Renovate finds an update, Renovate will update <code>conanfile.txt</code> or <code>conanfile.py</code></li> </ol> <p>Enabling Conan updating</p> <p>Renovate updates Conan packages by default.</p>"},{"location":"modules/manager/deps-edn/","title":"Automated Dependency Updates for Deps Edn","text":"<p>Renovate supports updating Deps Edn dependencies.</p>"},{"location":"modules/manager/deps-edn/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)(?:deps|bb)\\.edn$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/deps-edn/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>clojure</code>.</p>"},{"location":"modules/manager/deps-edn/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)(?:deps|bb)\\\\.edn$\"\n],\n\"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/deps-edn/#additional-information","title":"Additional Information","text":"<p>Extracts Maven dependencies from <code>deps.edn</code> files.</p>"},{"location":"modules/manager/docker-compose/","title":"Automated Dependency Updates for Docker Compose","text":"<p>Renovate supports updating Docker Compose dependencies.</p>"},{"location":"modules/manager/docker-compose/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)(?:docker-)?compose[^/]*\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/docker-compose/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/docker-compose/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)(?:docker-)?compose[^/]*\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/docker-compose/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from with Docker Compose YAML files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/docker-compose/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/docker-compose/#feature-requests","title":"Feature requests","text":"<ul> <li>Support build.cache_from in docker-compose manager #18366</li> <li>env values in docker-compose files #4296</li> </ul>"},{"location":"modules/manager/docker-compose/#bug-reports","title":"Bug reports","text":"<ul> <li>not updating docker image in docker-compose with build context defined #14102</li> </ul>"},{"location":"modules/manager/dockerfile/","title":"Automated Dependency Updates for Dockerfile","text":"<p>Renovate supports updating Dockerfile dependencies.</p>"},{"location":"modules/manager/dockerfile/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>(^|/|\\.)(Docker|Container)file$\n(^|/)(Docker|Container)file[^/]*$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/dockerfile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/dockerfile/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/|\\\\.)(Docker|Container)file$\",\n\"(^|/)(Docker|Container)file[^/]*$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/dockerfile/#additional-information","title":"Additional Information","text":"<p>Extracts image references in a <code>Dockerfile</code> and/or <code>Containerfile</code>.</p> <p>Renovate's managers does not understand versioning, that's up to Renovate's versioning modules. The default <code>docker</code> versioning for container image datasources treats suffixes as \"compatibility\", for example: <code>-alpine</code>. Many container images are not SemVer compliant because they use such suffixes in their tags.</p> <p>If Renovate does not update your container images correctly, you may need to tell Renovate what versioning it should use. For example, if you know that an image follows SemVer, you can tell Renovate to use <code>\"semver\"</code> versioning for that image:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchDatasources\": [\"docker\"],\n\"matchPackageNames\": [\"whitesource/renovate\"],\n\"versioning\": \"semver\"\n}\n]\n}\n</code></pre> <p>Read Renovate's Docker Versioning docs to learn more.</p>"},{"location":"modules/manager/dockerfile/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/dockerfile/#feature-requests","title":"Feature requests","text":"<ul> <li>Dockerfile FROM pinning support #1027</li> </ul>"},{"location":"modules/manager/dockerfile/#bug-reports","title":"Bug reports","text":"<ul> <li>docker: Replacement causes existing dependencies to use wrong digest #20304</li> </ul>"},{"location":"modules/manager/droneci/","title":"Automated Dependency Updates for Droneci","text":"<p>Renovate supports updating Droneci dependencies.</p>"},{"location":"modules/manager/droneci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.drone\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/droneci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/droneci/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.drone\\\\.yml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/droneci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker-type dependencies from DroneCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/fleet/","title":"Automated Dependency Updates for Fleet","text":"<p>Renovate supports updating Fleet dependencies.</p>"},{"location":"modules/manager/fleet/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)fleet\\.ya?ml</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/fleet/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>helm</code>.</p>"},{"location":"modules/manager/fleet/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)fleet\\\\.ya?ml\"\n]\n}\n</code></pre>"},{"location":"modules/manager/fleet/#additional-information","title":"Additional Information","text":"<p>Can upgrade bundle definitions and GitRepo YAML manifests of Rancher Fleet.</p> <p>By default, only bundles with Helm references will be upgraded. To enable GitRepo updates you have to extend your <code>fileMatch</code> configuration.</p> <pre><code>{\n\"fileMatch\": [\"'(^|/)fleet.ya?ml\", \"myGitRepoManifests\\\\.yaml\"]\n}\n</code></pre>"},{"location":"modules/manager/flux/","title":"Automated Dependency Updates for Flux","text":"<p>Renovate supports updating Flux dependencies.</p>"},{"location":"modules/manager/flux/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)flux-system/(?:.+/)?gotk-components\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/flux/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>, <code>git-refs</code>, <code>github-tags</code>, <code>gitlab-tags</code>, <code>git-tags</code>, <code>bitbucket-tags</code>, <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/flux/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)flux-system/(?:.+/)?gotk-components\\\\.yaml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/flux/#additional-information","title":"Additional Information","text":"<p>This manager parses Flux YAML manifests and supports:</p> <ol> <li><code>HelmRelease</code> resources</li> <li>'GitRepository' resources</li> <li>'OCIRepository' resources</li> <li>Flux system manifests</li> </ol>"},{"location":"modules/manager/flux/#helmrelease-support","title":"HelmRelease support","text":"<p>Extracts <code>helm</code> dependencies from <code>HelmRelease</code> resources.</p> <p>The <code>flux</code> manager only extracts <code>helm</code> dependencies for <code>HelmRelease</code> resources linked to <code>HelmRepository</code> or <code>GitRepository</code> sources. Renovate does not support OCI <code>HelmRepository</code> sources, those with <code>type: oci</code>.</p> <p>In addition, for the <code>flux</code> manager to properly link <code>HelmRelease</code> and <code>HelmRepository</code> resources, both of the following conditions must be met:</p> <ol> <li>The <code>HelmRelease</code> resource must either have its <code>metadata.namespace</code> property set or its <code>spec.chart.spec.sourceRef.namespace</code> property set</li> <li>The referenced <code>HelmRepository</code> resource must have its <code>metadata.namespace</code> property set</li> </ol> <p>Namespaces will not be inferred from the context (e.g. from the parent <code>Kustomization</code>).</p> <p>Renovate updates <code>HelmRelease</code> resources coming from <code>GitRepository</code> by updating the <code>GitRepository</code> resource.</p>"},{"location":"modules/manager/flux/#gitrepository-support","title":"GitRepository support","text":"<p>Renovate can update <code>git</code> references from <code>GitRepository</code> resources.</p> <p>The <code>flux</code> manager only updates <code>GitRepository</code> fields that have a <code>tag</code> or <code>commit</code> key.</p>"},{"location":"modules/manager/flux/#ocirepository-support","title":"OCIRepository support","text":"<p>Renovate can update <code>oci</code> references from <code>OCIRepository</code> resources.</p> <p>The <code>flux</code> manager only updates <code>OCIRepository</code> fields that have a <code>digest</code> or <code>tag</code> key. If <code>tag</code> and <code>digest</code> exist then <code>digest</code> takes precedence.</p>"},{"location":"modules/manager/flux/#flux-system-manifests-support","title":"Flux system manifests support","text":"<p>Support updating Flux system manifests generated during Flux installation.</p> <p>Updating system manifests requires that either:</p> <ol> <li>The <code>flux</code> tool is pre-installed, or</li> <li>You run a Docker image based on containerbase, such as the official Renovate images, and have <code>binarySource=install</code> configured</li> </ol>"},{"location":"modules/manager/flux/#non-configured-filematch","title":"Non-configured fileMatch","text":"<p>By default, the <code>flux</code> manager will only match <code>flux-system/{.,**}/gotk-components.yaml</code> (i.e. system manifest) files.</p> <p>This is because there is no commonly accepted file/directory naming convention for Flux manifests and we don't want to check every single <code>*.yaml</code> file in repositories just in case some of them have Flux definitions.</p> <p>If most <code>.yaml</code> files in your repository are Flux manifests, then you could add this to your config:</p> <pre><code>{\n\"flux\": {\n\"fileMatch\": [\"\\\\.yaml$\"]\n}\n}\n</code></pre> <p>If instead you have all your Flux manifests inside a <code>flux/</code> directory, you would add this:</p> <pre><code>{\n\"flux\": {\n\"fileMatch\": [\"flux/.+\\\\.yaml$\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/flux/#versioning","title":"Versioning","text":"<p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/flux/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/flux/#feature-requests","title":"Feature requests","text":"<ul> <li>feature(manager/flux): Support helm-values for flux HelmRelease resource #18902</li> <li>improve flux manager with custom flags #13952</li> <li>Support Flux Kustomize #12139</li> </ul>"},{"location":"modules/manager/fvm/","title":"Automated Dependency Updates for Fvm","text":"<p>Renovate supports updating Fvm dependencies.</p>"},{"location":"modules/manager/fvm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.fvm/fvm_config\\.json$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/fvm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>flutter-version</code>.</p>"},{"location":"modules/manager/fvm/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.fvm/fvm_config\\\\.json$\"\n],\n\"versioning\": \"semver\"\n}\n</code></pre>"},{"location":"modules/manager/fvm/#additional-information","title":"Additional Information","text":"<p>Keeps the <code>.fvm/fvm_config.json</code> file updated.</p>"},{"location":"modules/manager/git-submodules/","title":"Automated Dependency Updates for Git Submodules","text":"<p>Renovate supports updating Git Submodules dependencies.</p>"},{"location":"modules/manager/git-submodules/#enabling","title":"Enabling","text":"<p>Git Submodules functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/git-submodules/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.gitmodules$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/git-submodules/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-refs</code>.</p>"},{"location":"modules/manager/git-submodules/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"enabled\": false,\n\"versioning\": \"git\",\n\"fileMatch\": [\n\"(^|/)\\\\.gitmodules$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/git-submodules/#additional-information","title":"Additional Information","text":"<p>Keeps publicly accessible Git submodules updated within a repository.</p> <p>Renovate does not support updating Git submodules that are hosted on a private repository. Subscribe to issue #10149 on GitHub to keep track of our progress towards supporting private Git submodules.</p> <p>You can customize the per-submodule checks of the git-submodules manager like this:</p> <pre><code>{\n\"ignoreDeps\": [\"path/to/submodule\", \"path/to/submodule2\"],\n\"git-submodules\": {\n\"enabled\": true\n}\n}\n</code></pre>"},{"location":"modules/manager/git-submodules/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/git-submodules/#feature-requests","title":"Feature requests","text":"<ul> <li>Update git-submodules only to latest tag #10234</li> <li>Private git-submodules support #10149</li> <li>changelog for git submodules #7776</li> <li>Only update dependency if the status of its new commit is green #6079</li> </ul>"},{"location":"modules/manager/git-submodules/#bug-reports","title":"Bug reports","text":"<ul> <li>Using relative path in .gitsubmodule leads to random errors #10655</li> <li>Error updating branch for submodule update #9532</li> <li>custom repo port should be rewritten when converting from SSH to HTTP #9003</li> </ul>"},{"location":"modules/manager/github-actions/","title":"Automated Dependency Updates for Github Actions","text":"<p>Renovate supports updating Github Actions dependencies.</p>"},{"location":"modules/manager/github-actions/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>^(workflow-templates|\\.github/workflows)/[^/]+\\.ya?ml$\n(^|/)action\\.ya?ml$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/github-actions/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/github-actions/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"^(workflow-templates|\\\\.github/workflows)/[^/]+\\\\.ya?ml$\",\n\"(^|/)action\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/github-actions/#additional-information","title":"Additional Information","text":"<p>The <code>github-actions</code> manager extracts dependencies from GitHub Actions workflow and workflow template files.</p> <p>If you like to use digest pinning but want to follow the action version tag, you can use the following sample:</p> <pre><code>name: build\n\non: [push]\n\njobs:\nbuild:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@af513c7a016048ae468971c52ed77d9562c7c819 # renovate: tag=v1.0.0\n</code></pre> <p>Renovate will update the commit SHA but follow the GitHub tag you specified. Renovate can update digests that use SHA1 and SHA256 algorithms.</p> <p>If you want to automatically pin action digests add the <code>helpers:pinGitHubActionDigests</code> preset to the <code>extends</code> array:</p> <pre><code>{\n\"extends\": [\"helpers:pinGitHubActionDigests\"]\n}\n</code></pre>"},{"location":"modules/manager/github-actions/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/github-actions/#feature-requests","title":"Feature requests","text":"<ul> <li>Update GitHub actions runner automatically #19827</li> <li>Use Gradle versioning automatically for gradle Actions #12584</li> <li>GHE: github-actions should lookup new versions from current host/endpoint #10178</li> <li>Renovate doesn't update NodeJS version used by GitHub actions #7716</li> <li>pin version in github-actions #7516</li> </ul>"},{"location":"modules/manager/gitlabci/","title":"Automated Dependency Updates for Gitlabci","text":"<p>Renovate supports updating Gitlabci dependencies.</p>"},{"location":"modules/manager/gitlabci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.gitlab-ci\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/gitlabci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/gitlabci/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.gitlab-ci\\\\.yml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/gitlabci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker dependencies from <code>gitlab-ci.yml</code> files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>If you use Gitlab Dependency Proxy then you can use these predefined variables as prefixes for your image:</p> <ul> <li><code>CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX</code></li> <li><code>CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX</code></li> </ul> <p>If you use the predefined <code>CI_REGISTRY</code> variable make sure to configure its value via <code>registryAliases</code>:</p> <pre><code>{\n\"registryAliases\": {\n\"$CI_REGISTRY\": \"registry.example.com\"\n}\n}\n</code></pre>"},{"location":"modules/manager/gitlabci/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/gitlabci/#feature-requests","title":"Feature requests","text":"<ul> <li>Merge <code>gitlabci-include</code> to <code>gitlabci</code> manager #21446</li> <li>Pin GitLab include digests #18753</li> <li>Gitlab CI trigger includes #12178</li> </ul>"},{"location":"modules/manager/gitlabci/#bug-reports","title":"Bug reports","text":"<ul> <li>Error updating gitlabci includes if pinDigests=true\"  #14177</li> <li><code>gitlabci-include</code> manager may fail if <code>yml</code> file is empty #12529</li> <li>Docker references in gitlab-ci.yml split on multiple lines is not updated correctly #11595</li> </ul>"},{"location":"modules/manager/gitlabci-include/","title":"Automated Dependency Updates for Gitlabci Include","text":"<p>Renovate supports updating Gitlabci Include dependencies.</p>"},{"location":"modules/manager/gitlabci-include/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.gitlab-ci\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/gitlabci-include/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>gitlab-tags</code>.</p>"},{"location":"modules/manager/gitlabci-include/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.gitlab-ci\\\\.yml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/gitlabci-include/#additional-information","title":"Additional Information","text":"<p>Extracts \"includes\" dependencies from <code>gitlab-ci.yml</code> files.</p>"},{"location":"modules/manager/gomod/","title":"Automated Dependency Updates for Go Modules","text":"<p>Renovate supports updating Go Modules dependencies.</p>"},{"location":"modules/manager/gomod/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)go\\.mod$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/gomod/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>go</code>, <code>golang-version</code>.</p>"},{"location":"modules/manager/gomod/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)go\\\\.mod$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/gomod/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/gomod/#post-update-options","title":"Post-Update Options","text":"<p>You might be interested in the following <code>postUpdateOptions</code>:</p> <ol> <li><code>gomodTidy</code> - if you'd like Renovate to run <code>go mod tidy</code> after every update before raising the PR</li> <li>This is implicitly enabled for major updates if the user has enabled the option <code>gomodUpdateImportPaths</code></li> <li><code>gomodTidy1.17</code> - if you'd like Renovate to run <code>go mod tidy -compat=1.17</code> after every update before raising the PR</li> <li><code>gomodTidyE</code> - if you'd like Renovate to run <code>go mod tidy -e</code> after every update before raising the PR</li> <li><code>gomodUpdateImportPaths</code> - if you'd like Renovate to update your source import paths on major updates before raising the PR</li> <li><code>gomodMassage</code> - to enable massaging of all <code>replace</code> statements prior to running <code>go</code> so that they will be ignored</li> </ol> <p>When Renovate is running using <code>binarySource=docker</code> (such as in the hosted Mend Renovate app) then it will pick the latest compatible version of Go to run, i.e. the latest <code>1.x</code> release. Even if the <code>go.mod</code> has a version like <code>go 1.14</code>, Renovate will treat it as a <code>^1.14</code> constraint and not <code>=1.14</code>.</p> <p>Indirect updates are disabled by default. To enable them, add a package rule such as:</p> <pre><code>{\n\"packageRules\": [\n{\n\"matchManagers\": [\"gomod\"],\n\"matchDepTypes\": [\"indirect\"],\n\"enabled\": true\n}\n]\n}\n</code></pre>"},{"location":"modules/manager/gomod/#private-modules-authentication","title":"Private Modules Authentication","text":"<p>Before running the <code>go</code> commands to update the <code>go.sum</code>, Renovate exports <code>git</code> <code>insteadOf</code> directives in environment variables.</p> <p>The following logic is executed prior to \"artifacts\" updating:</p> <p>The token from the <code>hostRules</code> entry matching <code>hostType=github</code> and <code>matchHost=api.github.com</code> is added as the default authentication for <code>github.com</code>. For those running against <code>github.com</code>, this token will be the default platform token.</p> <p>Next, all <code>hostRules</code> with both a token and <code>matchHost</code> will be fetched, except for any github.com one from above.</p> <p>Rules from this list are converted to environment variable directives if they match any of the following characteristics:</p> <ul> <li>No <code>hostType</code> is defined, or</li> <li><code>hostType</code> is <code>go</code>, or</li> <li><code>hostType</code> is a platform (<code>github</code>, <code>gitlab</code>, <code>azure</code>, etc.)</li> </ul>"},{"location":"modules/manager/gomod/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/gomod/#feature-requests","title":"Feature requests","text":"<ul> <li>Support vendored major upgrades for Go #21010</li> <li>Support go versioning #18480</li> <li>Support Go Workspaces #15071</li> <li>gomod: Update transitive dependencies (with security vulnerabilities) #13958</li> <li>Indirect dependencies in dependent go modules need to be updated #12999</li> <li>lockfile maintenance for go.mod files #9578</li> <li>Set GOCACHE when updating go artifacts #6225</li> <li>ignore \"empty\" Go module updates #5123</li> <li>Support private go modules on custom GitLab EE host #4601</li> <li>Golang dependencies on generated code #4490</li> <li>Support Bazel go_repository \"sum\" field #4402</li> <li>Link to compare in table #4154</li> <li>Add support for \"Compare Source\" + change summary to <code>go.mod</code> based repos #2939</li> </ul>"},{"location":"modules/manager/gomod/#bug-reports","title":"Bug reports","text":"<ul> <li>datasource/go: Renovate wants to \"upgrade\" to v1 digest from v2 #19756</li> <li>Renovate on Gitlab fails to lookup go dependency <code>gonum.org/v1/gonum</code> #19667</li> <li>Renovate doesn't understand custom domains for go modules #18396</li> <li>Go sub-modules incorrectly bumped to root module version #11778</li> <li>Errors resolving digest for go modules with +nocompatible  #8305</li> <li>Renovate does not add +incompatible tag when upgrading Golang packages from v1 to v2 #3557</li> </ul>"},{"location":"modules/manager/gradle/","title":"Automated Dependency Updates for Gradle","text":"<p>Renovate supports updating Gradle dependencies.</p>"},{"location":"modules/manager/gradle/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>\\.gradle(\\.kts)?$\n(^|/)gradle\\.properties$\n(^|/)gradle/.+\\.toml$\n\\.versions\\.toml$\n(^|/)versions.props$\n(^|/)versions.lock$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/gradle/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/gradle/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.gradle(\\\\.kts)?$\",\n\"(^|/)gradle\\\\.properties$\",\n\"(^|/)gradle/.+\\\\.toml$\",\n\"\\\\.versions\\\\.toml$\",\n\"(^|/)versions.props$\",\n\"(^|/)versions.lock$\"\n],\n\"timeout\": 600,\n\"versioning\": \"gradle\"\n}\n</code></pre>"},{"location":"modules/manager/gradle/#additional-information","title":"Additional Information","text":"<p>The <code>gradle</code> manager uses a custom parser written in JavaScript, similar to many others managers. It does not call <code>gradle</code> directly in order to extract a list of dependencies.</p>"},{"location":"modules/manager/gradle/#updating-lockfiles","title":"Updating lockfiles","text":"<p>Updating lockfiles is done with <code>./gradlew :dependencies --wirte/update-locks</code> command. This command can output excessive text to the console. While running the command, the output to stdout is dropped when you run Renovate on most platforms other than Windows.</p>"},{"location":"modules/manager/gradle/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/gradle/#feature-requests","title":"Feature requests","text":"<ul> <li>Support exclusive repositories #14208</li> <li>Add verification metadata update support to gradle manager  #13575</li> <li>Support scan buildSrc's Dependencies? #13295</li> <li>Support for Gradle composite builds #9410</li> <li>Add bumpVersion configuration option to gradle manager #7214</li> <li>Support custom init.gradle and/or gradle.properties #6894</li> <li>multimodule gradle (kotlin) with versions defined as constants in buildSrc #5480</li> </ul>"},{"location":"modules/manager/gradle/#bug-reports","title":"Bug reports","text":"<ul> <li>Renovate doesn't scans the latest version based on gradle multi module project using gradle.kts #12397</li> </ul>"},{"location":"modules/manager/gradle-wrapper/","title":"Automated Dependency Updates for Gradle Wrapper","text":"<p>Renovate supports updating Gradle Wrapper dependencies.</p>"},{"location":"modules/manager/gradle-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)gradle/wrapper/gradle-wrapper\\.properties$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/gradle-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>gradle-version</code>.</p>"},{"location":"modules/manager/gradle-wrapper/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)gradle/wrapper/gradle-wrapper\\\\.properties$\"\n],\n\"versioning\": \"gradle\"\n}\n</code></pre>"},{"location":"modules/manager/gradle-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Gradle Wrapper updates. Changes here affect how Renovate updates the version of gradle in the wrapper, not how it uses the wrapper.</p>"},{"location":"modules/manager/gradle-wrapper/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/gradle-wrapper/#feature-requests","title":"Feature requests","text":"<ul> <li>Proxy support for the gradle-wrapper manager #14303</li> </ul>"},{"location":"modules/manager/helm-requirements/","title":"Automated Dependency Updates for Helm Requirements","text":"<p>Renovate supports updating Helm Requirements dependencies.</p>"},{"location":"modules/manager/helm-requirements/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)requirements\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/helm-requirements/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>.</p>"},{"location":"modules/manager/helm-requirements/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n},\n\"commitMessageTopic\": \"helm chart {{depName}}\",\n\"fileMatch\": [\n\"(^|/)requirements\\\\.yaml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/helm-requirements/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Helm Chart references within <code>requirements.yaml</code> files.</p> <p>The <code>helm-requirements</code> manager defines this default registryAlias:</p> <pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n}\n}\n</code></pre> <p>If your Helm charts make use of repository aliases then you will need to configure an <code>registryAliases</code> object in your config to tell Renovate where to look for them. Be aware that alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p> <p>To learn how to use Helm with private packages, read private package support, Package Manager Credentials for Artifact Updating, helm.</p>"},{"location":"modules/manager/helm-requirements/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/helm-requirements/#feature-requests","title":"Feature requests","text":"<ul> <li>support for bumpVersion with helm-requirements #12099</li> <li>helm-requirements - support private git repositories #12093</li> </ul>"},{"location":"modules/manager/helm-values/","title":"Automated Dependency Updates for Helm Values","text":"<p>Renovate supports updating Helm Values dependencies.</p>"},{"location":"modules/manager/helm-values/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)values\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/helm-values/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/helm-values/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"helm values {{depName}}\",\n\"fileMatch\": [\n\"(^|/)values\\\\.yaml$\"\n],\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/helm-values/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating of Docker dependencies within Helm Chart <code>values.yaml</code> files or other YAML files that use the same format (via <code>fileMatch</code> configuration). Updates are performed if the files follow the conventional format used in most of the Helm charts:</p> <pre><code>image:\nrepository: 'some-docker/dependency'\ntag: v1.0.0\nregistry: registry.example.com # optional key, will default to \"docker.io\"\n\nimage:\nrepository: 'some-docker/dependency'\nversion: v1.0.0\n\ncoreImage:\nregistry: docker.io\nrepository: bitnami/harbor-core\ntag: 2.1.3-debian-10-r38\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/helm-values/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/helm-values/#feature-requests","title":"Feature requests","text":"<ul> <li>Support for bumpVersion when updating helm-values #8231</li> <li>[helm-values] support name as alias for repository #7010</li> </ul>"},{"location":"modules/manager/helm-values/#bug-reports","title":"Bug reports","text":"<ul> <li>\"Error updating branch: update failure\" with helm-values and certain dependency names #15318</li> </ul>"},{"location":"modules/manager/helmfile/","title":"Automated Dependency Updates for Helmfile","text":"<p>Renovate supports updating Helmfile dependencies.</p>"},{"location":"modules/manager/helmfile/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)helmfile\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/helmfile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>, <code>docker</code>.</p>"},{"location":"modules/manager/helmfile/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n},\n\"commitMessageTopic\": \"helm chart {{depName}}\",\n\"fileMatch\": [\n\"(^|/)helmfile\\\\.yaml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/helmfile/#additional-information","title":"Additional Information","text":"<p>Checks <code>helmfile.yaml</code> files and extracts dependencies for the <code>helm</code> datasource.</p> <p>The <code>helmfile</code> manager defines this default registryAlias:</p> <pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n}\n}\n</code></pre> <p>If your Helm charts make use of repository aliases then you will need to configure an <code>registryAliases</code> object in your config to tell Renovate where to look for them. Be aware that alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/helmsman/","title":"Automated Dependency Updates for Helmsman","text":"<p>Renovate supports updating Helmsman dependencies.</p>"},{"location":"modules/manager/helmsman/#file-matching","title":"File Matching","text":"<p>Because file names for <code>helmsman</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>helmsman</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/helmsman/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>helm</code>.</p>"},{"location":"modules/manager/helmsman/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": []\n}\n</code></pre>"},{"location":"modules/manager/helmsman/#additional-information","title":"Additional Information","text":"<p>The <code>helmsman</code> manager is currently limited and does not support the full feature set of Helmsman, read about the limitations below.</p>"},{"location":"modules/manager/helmsman/#non-configured-filematch","title":"Non-configured fileMatch","text":"<p>By default the <code>helmsman</code> manager has an empty array for its <code>fileMatch</code> configuration option, because there is no convention for file naming in practice. This means that <code>helmsman</code> won't search for any files, and you won't get any updates from the manager.</p> <p>To enable the <code>helmsman</code> manager, provide a valid <code>fileMatch</code> yourself, for example:</p> <pre><code>{\n\"helmsman\": {\n\"fileMatch\": [\"(^|/)desired_state\\\\.yaml$\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/helmsman/#file-format","title":"File format","text":"<p>Currently, state files must be in the <code>.yaml</code> format. The <code>.toml</code> format is not supported.</p>"},{"location":"modules/manager/helmv3/","title":"Automated Dependency Updates for Helmv3","text":"<p>Renovate supports updating Helmv3 dependencies.</p>"},{"location":"modules/manager/helmv3/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Chart\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/helmv3/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>helm</code>.</p>"},{"location":"modules/manager/helmv3/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n},\n\"commitMessageTopic\": \"helm chart {{depName}}\",\n\"fileMatch\": [\n\"(^|/)Chart\\\\.yaml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Helm Chart references in:</p> <ul> <li><code>requirements.yaml</code> files, for Helm v2</li> <li><code>Chart.yaml</code> files, for Helm v3</li> </ul> <p>The <code>helmv3</code> manager defines this default registryAlias:</p> <pre><code>{\n\"registryAliases\": {\n\"stable\": \"https://charts.helm.sh/stable\"\n}\n}\n</code></pre> <p>If you use repository aliases in your Helm charts then you must set an <code>registryAliases</code> object in your configuration file so Renovate knows where to find the repository. Alias values must be properly formatted URIs.</p> <p>If you need to change the versioning format, read our versioning documentation to learn more.</p>"},{"location":"modules/manager/helmv3/#private-repositories-and-registries","title":"Private repositories and registries","text":"<p>To use private sources in your Helm charts, you must set the <code>password</code> and <code>username</code> you use to authenticate to the private source. For this you use a custom <code>hostRules</code> array.</p>"},{"location":"modules/manager/helmv3/#oci-registries","title":"OCI registries","text":"<pre><code>{\n  hostRules: [\n    {\n      // Global login\n      matchHost: 'registry.gitlab.com',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n    {\n      // For repository string oci://registry.gitlab.com/user/oci-helm-test\n      matchHost: 'https://registry.gitlab.com/user/oci-helm-test',\n      hostType: 'docker',\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n  ],\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#helm-repository","title":"Helm repository","text":"<pre><code>{\n  hostRules: [\n    {\n      // Global login for 'gitlab.com' if using Helm\n      matchHost: 'gitlab.com',\n      hostType: 'helm', // this is optional, but else the credentials will be used for all requests matching `matchHost`\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n    {\n      // Specific repository\n      matchHost: 'https://gitlab.com/api/v4/projects/xxxxxxx/packages/helm/stable',\n      hostType: 'helm', // this is optional\n      username: '&lt;some-username&gt;',\n      password: '&lt;some-password&gt;',\n    },\n  ],\n}\n</code></pre>"},{"location":"modules/manager/helmv3/#subchart-archives","title":"Subchart archives","text":"<p>To get updates for subchart archives put <code>helmUpdateSubChartArchives</code> in your <code>postUpdateOptions</code> configuration. Renovate now updates archives in the <code>/charts</code> folder.</p> <pre><code>{\n\"postUpdateOptions\": [\"helmUpdateSubChartArchives\"]\n}\n</code></pre>"},{"location":"modules/manager/hermit/","title":"Automated Dependency Updates for Hermit","text":"<p>Renovate supports updating Hermit dependencies.</p>"},{"location":"modules/manager/hermit/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)bin/hermit$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/hermit/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>hermit</code>.</p>"},{"location":"modules/manager/hermit/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)bin/hermit$\"\n],\n\"excludeCommitPaths\": [\n\"**/bin/hermit\"\n],\n\"versioning\": \"hermit\"\n}\n</code></pre>"},{"location":"modules/manager/hermit/#additional-information","title":"Additional Information","text":"<p>Hermit package installation token</p> <p>When upgrading private packages through, Hermit manager will uses one of the following two tokens to download private packages.</p> <pre><code>HERMIT_GITHUB_TOKEN\nGITHUB_TOKEN\n</code></pre> <p>These environment variable could be passed on via setting it in <code>customEnvironmentVariables</code>.</p> <p>Nested Hermit setup</p> <p>Nested Hermit setup in a single repository is also supported. e.g.</p> <pre><code>\u251cbin\n\u251c\u2500hermit\n\u251c\u2500(other files)\n\u251c\n\u251cnested\n\u251c\u2500bin\n\u251c\u2500\u2500hermit\n\u251c\u2500\u2500(other files)\n</code></pre>"},{"location":"modules/manager/homebrew/","title":"Automated Dependency Updates for Homebrew","text":"<p>Renovate supports updating Homebrew dependencies.</p>"},{"location":"modules/manager/homebrew/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>^Formula/[^/]+[.]rb$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/homebrew/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/homebrew/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"Homebrew Formula {{depName}}\",\n\"fileMatch\": [\n\"^Formula/[^/]+[.]rb$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/homebrew/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/homebrew/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/homebrew/#feature-requests","title":"Feature requests","text":"<ul> <li>Support multiple platforms in Homebrew formula #9040</li> </ul>"},{"location":"modules/manager/html/","title":"Automated Dependency Updates for Html","text":"<p>Renovate supports updating Html dependencies.</p>"},{"location":"modules/manager/html/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.html?$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/html/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>cdnjs</code>.</p>"},{"location":"modules/manager/html/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.html?$\"\n],\n\"versioning\": \"semver\",\n\"digest\": {\n\"enabled\": false\n},\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/html/#additional-information","title":"Additional Information","text":"<p>The <code>html</code> manager extracts scripts and CSS includes pointing to cdnjs. It differs from the <code>cdnjs</code> manager in that it detects if an integrity hash is already present and updates it too if found.</p>"},{"location":"modules/manager/jenkins/","title":"Automated Dependency Updates for Jenkins","text":"<p>Renovate supports updating Jenkins dependencies.</p>"},{"location":"modules/manager/jenkins/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)plugins\\.(txt|ya?ml)$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/jenkins/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>jenkins-plugins</code>.</p>"},{"location":"modules/manager/jenkins/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)plugins\\\\.(txt|ya?ml)$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/jenkins/#additional-information","title":"Additional Information","text":"<p>The Jenkins manager supports a custom text or YAML format of the plugin list as described here. Only versions from the main Jenkins update center are supported.</p> <p>There are no strict filename rules, the convention is to name the file <code>plugins.txt</code> or <code>plugins.yaml</code>.</p>"},{"location":"modules/manager/jsonnet-bundler/","title":"Automated Dependency Updates for Jsonnet Bundler","text":"<p>Renovate supports updating Jsonnet Bundler dependencies.</p>"},{"location":"modules/manager/jsonnet-bundler/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)jsonnetfile\\.json$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/jsonnet-bundler/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/jsonnet-bundler/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)jsonnetfile\\\\.json$\"\n],\n\"datasource\": \"git-tags\"\n}\n</code></pre>"},{"location":"modules/manager/jsonnet-bundler/#additional-information","title":"Additional Information","text":"<p>Extracts dependencies from <code>jsonnetfile.json</code> files, updates <code>jsonnetfile.lock.json</code> and updates the <code>vendor</code> directory.</p> <p>Supports lock file maintenance.</p> <p>This plugin requires <code>jsonnet-bundler &gt;= v0.4.0</code> since previous versions don't support updating single dependencies.</p>"},{"location":"modules/manager/jsonnet-bundler/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/jsonnet-bundler/#feature-requests","title":"Feature requests","text":"<ul> <li>Private repository support for jb lock files #14145</li> <li>Support git-refs for jsonnet-bundler #14010</li> </ul>"},{"location":"modules/manager/kotlin-script/","title":"Automated Dependency Updates for Kotlin Script","text":"<p>Renovate supports updating Kotlin Script dependencies.</p>"},{"location":"modules/manager/kotlin-script/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>^.+\\.main\\.kts$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/kotlin-script/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/kotlin-script/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"^.+\\\\.main\\\\.kts$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/kotlin-script/#additional-information","title":"Additional Information","text":"<p>Renovate supports upgrading dependencies in Kotlin Script files. Read the Kotlin Script docs to learn more. For example:</p> <pre><code>#!/usr/bin/env kotlin\n@file:Repository(\"https://jitpack.io\")\n@file:DependsOn(\"com.github.krzema12:github-actions-kotlin-dsl:main-SNAPSHOT\")\n@file:DependsOn(\"org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r\")\n@file:DependsOn(\"org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.0.2\")\n\nprintln(\"Hello world!\")\n\n// ...\n</code></pre> <p>By default, Renovate only scans files with the <code>.main.kts</code> extension and not <code>.kts</code>. This way Renovate avoids ambiguity with Gradle config files that use the <code>.gradle.kts</code> extension.</p> <p>If you want to manage other Kotlin Script files, you may use the <code>fileMatch</code> config option to let Renovate update these files:</p> <pre><code>{\n\"kotlin-script\": {\n\"fileMatch\": [\"^.*\\\\.kts$\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/kubernetes/","title":"Automated Dependency Updates for Kubernetes","text":"<p>Renovate supports updating Kubernetes dependencies.</p>"},{"location":"modules/manager/kubernetes/#file-matching","title":"File Matching","text":"<p>Because file names for <code>kubernetes</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>kubernetes</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/kubernetes/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>kubernetes-api</code>.</p>"},{"location":"modules/manager/kubernetes/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": []\n}\n</code></pre>"},{"location":"modules/manager/kubernetes/#additional-information","title":"Additional Information","text":"<p>The <code>kubernetes</code> manager has no <code>fileMatch</code> default patterns, so it won't match any files until you configure it with a pattern. This is because there is no commonly accepted file/directory naming convention for Kubernetes YAML files and we don't want to check every single <code>*.yaml</code> file in repositories just in case any of them have Kubernetes definitions.</p> <p>If most <code>.yaml</code> files in your repository are Kubernetes ones, then you could add this to your config:</p> <pre><code>{\n\"kubernetes\": {\n\"fileMatch\": [\"\\\\.yaml$\"]\n}\n}\n</code></pre> <p>If instead you have them all inside a <code>k8s/</code> directory, you would add this:</p> <pre><code>{\n\"kubernetes\": {\n\"fileMatch\": [\"k8s/.+\\\\.yaml$\"]\n}\n}\n</code></pre> <p>Or if it's just a single file then something like this:</p> <pre><code>{\n\"kubernetes\": {\n\"fileMatch\": [\"^config/k8s\\\\.yaml$\"]\n}\n}\n</code></pre> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/kubernetes/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/kubernetes/#feature-requests","title":"Feature requests","text":"<ul> <li>Upper kubernetes limit for kubernetes-api datasource versions #18696</li> <li>Kubernetes: Natively support updating version labels #6812</li> </ul>"},{"location":"modules/manager/kustomize/","title":"Automated Dependency Updates for Kustomize","text":"<p>Renovate supports updating Kustomize dependencies.</p>"},{"location":"modules/manager/kustomize/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)kustomization\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/kustomize/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>, <code>git-tags</code>, <code>github-tags</code>, <code>helm</code>.</p>"},{"location":"modules/manager/kustomize/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)kustomization\\\\.ya?ml$\"\n],\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/kustomize/#additional-information","title":"Additional Information","text":"<p>Renovate can manage these parts of the <code>kustomization.yaml</code> file:</p> <ol> <li>remote resources</li> <li>image tags</li> <li>components</li> <li>helm charts</li> <li>remote bases (deprecated since Kustomize <code>v2.1.0</code>)</li> </ol> <p>How It Works</p> <ol> <li>Renovate searches in each repository for any <code>kustomization.yaml</code> files</li> <li>Dependencies are extracted from remote bases, image tags and Helm charts</li> <li>Renovate resolves the dependency's source repository and checks if there are SemVer tags</li> <li>If Renovate finds an update, then it updates the <code>kustomization.yaml</code> file</li> </ol> <p>This manager uses three <code>depType</code>s to allow fine-grained control of which dependencies are upgraded:</p> <ul> <li>Component</li> <li>Kustomization</li> <li>HelmChart</li> </ul> <p>Limitations</p> <ul> <li>Using HTTPS to fetch the repositories is not tested</li> <li>The keys for the image tags can be in any order</li> </ul> <pre><code>- name: image/name\nnewTag: v0.0.1\n# or\n- newTag: v0.0.1\nname: image/name\n</code></pre> <ul> <li>Digests can be pinned in <code>newTag</code> or <code>digest</code>:</li> </ul> <pre><code>- name: image/name\nnewTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n# without a version, digests are tracked as :latest\n- name: image/name\ndigest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre> <ul> <li>The image's repository can be changed with <code>newName</code>:</li> </ul> <pre><code>- name: image/name\nnewName: custom-image/name:v0.0.1\n- name: image/name\nnewName: custom-image/name:v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\nnewName: custom-image/name@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\nnewName: custom-image/name\nnewTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n- name: image/name\nnewName: custom-image/name\ndigest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre> <ul> <li>Images with values ignored by Kustomize will be skipped to avoid ambiguity:</li> </ul> <pre><code># bad: skipped because newTag: is ignored when digest: is set\n- name: image/name\nnewTag: v0.0.1\ndigest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n# good:\n- name: image/name\nnewTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n</code></pre>"},{"location":"modules/manager/kustomize/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/kustomize/#feature-requests","title":"Feature requests","text":"<ul> <li>Support <code>kustomize</code> manager with <code>github-releases</code> datasource #18986</li> <li>Support for inflating helmchart deptype upgrades in the kustomize manager #14137</li> <li>Kustomize: support docker digest pinning #8089</li> <li>Using git commit refs in kustomize #7915</li> </ul>"},{"location":"modules/manager/kustomize/#bug-reports","title":"Bug reports","text":"<ul> <li>bug: <code>cleanedCurrentFrom?.includes is not a function</code> #20055</li> </ul>"},{"location":"modules/manager/leiningen/","title":"Automated Dependency Updates for Leiningen","text":"<p>Renovate supports updating Leiningen dependencies.</p>"},{"location":"modules/manager/leiningen/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)project\\.clj$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/leiningen/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>clojure</code>.</p>"},{"location":"modules/manager/leiningen/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)project\\\\.clj$\"\n],\n\"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/leiningen/#additional-information","title":"Additional Information","text":"<p>Extracts Maven-type dependencies.</p>"},{"location":"modules/manager/maven/","title":"Automated Dependency Updates for Maven","text":"<p>Renovate supports updating Maven dependencies.</p>"},{"location":"modules/manager/maven/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>(^|/|\\.)pom\\.xml$\n^(((\\.mvn)|(\\.m2))/)?settings\\.xml$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/maven/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/maven/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/|\\\\.)pom\\\\.xml$\",\n\"^(((\\\\.mvn)|(\\\\.m2))/)?settings\\\\.xml$\"\n],\n\"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/maven/#additional-information","title":"Additional Information","text":"<p>The <code>maven</code> manager focuses on extracting dependencies from <code>pom.xml</code>. It uses the official Maven versioning scheme.</p>"},{"location":"modules/manager/maven/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/maven/#feature-requests","title":"Feature requests","text":"<ul> <li>Maven: Update versions defined in a property but managed by parent pom #15170</li> <li>Maven: bumpVersion update child pom.xml versions in multi module projects #14703</li> <li>Do not use parent property in artifactId dependency for maven project #14670</li> <li>Support pinned snapshot versions in maven datasource #14300</li> <li>Detect all Maven dependencies when upgrading property value #3247</li> </ul>"},{"location":"modules/manager/maven/#bug-reports","title":"Bug reports","text":"<ul> <li>defaultRegistryUrls does not work when the manager provides a custom defaultUrl #13925</li> </ul>"},{"location":"modules/manager/maven-wrapper/","title":"Automated Dependency Updates for Maven Wrapper","text":"<p>Renovate supports updating Maven Wrapper dependencies.</p>"},{"location":"modules/manager/maven-wrapper/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|\\/).mvn/wrapper/maven-wrapper.properties$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/maven-wrapper/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/maven-wrapper/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|\\\\/).mvn/wrapper/maven-wrapper.properties$\"\n],\n\"versioning\": \"maven\"\n}\n</code></pre>"},{"location":"modules/manager/maven-wrapper/#additional-information","title":"Additional Information","text":"<p>Configuration for Maven Wrapper updates. Changes here affect how Renovate updates the version of Maven in the wrapper, not how it uses the wrapper.</p>"},{"location":"modules/manager/meteor/","title":"Automated Dependency Updates for Meteor","text":"<p>Renovate supports updating Meteor dependencies.</p>"},{"location":"modules/manager/meteor/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)package\\.js$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/meteor/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>npm</code>.</p>"},{"location":"modules/manager/meteor/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)package\\\\.js$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/meteor/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/mint/","title":"Automated Dependency Updates for Mint","text":"<p>Renovate supports updating Mint dependencies.</p>"},{"location":"modules/manager/mint/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Mintfile$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/mint/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/mint/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Mintfile$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/mint/#additional-information","title":"Additional Information","text":"<p>Renovate supports updating Mintfiles.</p> <p>Go to the <code>yonaskolb/Mint</code> repository on GitHub to learn more about the Mint package manager.</p> <p>You must put the library version in the Mintfile:</p> <pre><code>// Good:\nSwiftGen/SwiftGen@6.6.1\nrealm/SwiftLint @ 0.48.0\n\n// Bad:\nyonaskolb/xcodegen\n</code></pre>"},{"location":"modules/manager/mix/","title":"Automated Dependency Updates for Mix","text":"<p>Renovate supports updating Mix dependencies.</p>"},{"location":"modules/manager/mix/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)mix\\.exs$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/mix/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>git-tags</code>, <code>hex</code>.</p>"},{"location":"modules/manager/mix/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)mix\\\\.exs$\"\n],\n\"versioning\": \"hex\"\n}\n</code></pre>"},{"location":"modules/manager/mix/#additional-information","title":"Additional Information","text":"<p>The <code>mix</code> manager extracts dependencies for the <code>hex</code> datasource and uses Renovate's implementation of Hex SemVer to evaluate updates.</p> <p>The <code>mix</code> package manager itself is also used to keep the lock file up-to-date.</p>"},{"location":"modules/manager/mix/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/mix/#feature-requests","title":"Feature requests","text":"<ul> <li>Support mix auth for private packages #20717</li> <li>Custom (third-party) Repositories for Hex in Elixir #18300</li> <li>Use dynamic elixir/mix version selection #6370</li> </ul>"},{"location":"modules/manager/nix/","title":"Automated Dependency Updates for Nix","text":"<p>Renovate supports updating Nix dependencies.</p>"},{"location":"modules/manager/nix/#enabling","title":"Enabling","text":"<p>Nix functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"nix\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/nix/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)flake\\.nix$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/nix/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-refs</code>.</p>"},{"location":"modules/manager/nix/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)flake\\\\.nix$\"\n],\n\"commitMessageTopic\": \"nixpkgs\",\n\"commitMessageExtra\": \"to {{newValue}}\",\n\"enabled\": false\n}\n</code></pre>"},{"location":"modules/manager/nix/#additional-information","title":"Additional Information","text":"<p>The <code>nix</code> manager supports:</p> <ul> <li><code>lockFileMaintenance</code> updates for <code>flake.lock</code></li> <li>nixpkgs updates</li> </ul>"},{"location":"modules/manager/nix/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/nix/#feature-requests","title":"Feature requests","text":"<ul> <li>Support shorthand nixpkgs references #18955</li> </ul>"},{"location":"modules/manager/nodenv/","title":"Automated Dependency Updates for nodenv","text":"<p>Renovate supports updating nodenv dependencies.</p>"},{"location":"modules/manager/nodenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.node-version$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/nodenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/nodenv/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.node-version$\"\n],\n\"versioning\": \"node\"\n}\n</code></pre>"},{"location":"modules/manager/nodenv/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.node-version</code> file updated.</p>"},{"location":"modules/manager/npm/","title":"Automated Dependency Updates for Npm","text":"<p>Renovate supports updating Npm dependencies.</p>"},{"location":"modules/manager/npm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)package\\.json$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/npm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>npm</code>.</p>"},{"location":"modules/manager/npm/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)package\\\\.json$\"\n],\n\"rollbackPrs\": true,\n\"versioning\": \"npm\",\n\"digest\": {\n\"prBodyDefinitions\": {\n\"Change\": \"{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}\"\n}\n},\n\"prBodyDefinitions\": {\n\"Change\": \"[{{#if displayFrom}}`{{{displayFrom}}}` -&gt; {{else}}{{#if currentValue}}`{{{currentValue}}}` -&gt; {{/if}}{{/if}}{{#if displayTo}}`{{{displayTo}}}`{{else}}`{{{newValue}}}`{{/if}}]({{#if depName}}https://renovatebot.com/diffs/npm/{{replace '/' '%2f' depName}}/{{{currentVersion}}}/{{{newVersion}}}{{/if}})\"\n}\n}\n</code></pre>"},{"location":"modules/manager/npm/#additional-information","title":"Additional Information","text":"<p>The following <code>depTypes</code> are currently supported by the npm manager :</p> <ul> <li><code>dependencies</code></li> <li><code>devDependencies</code></li> <li><code>optionalDependencies</code></li> <li><code>peerDependencies</code></li> <li><code>engines</code> : Renovate will update any <code>node</code>, <code>npm</code> and <code>yarn</code> version specified under <code>engines</code>.</li> <li><code>volta</code> : Renovate will update any <code>node</code>, <code>npm</code> and <code>yarn</code> version specified under <code>volta</code>.</li> <li><code>packageManager</code></li> </ul>"},{"location":"modules/manager/npm/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/npm/#feature-requests","title":"Feature requests","text":"<ul> <li>npm: support parsing lockfileVersion=3 #21552</li> <li>Support rangeStrategy=update-lockfile for pnpm #21438</li> <li>Renovate Yarn's <code>packageExtensions</code> in .yarnrc.yml #19163</li> <li>Default npm to use default version from node #19044</li> <li>PNPM + package from GIT using YARN #18005</li> <li>Support for pnpm.overrides #17298</li> <li>Support <code>node_modules</code> that live in source control #13926</li> <li>Option to regenerate lock files during updates #13470</li> <li>Handle more complex yarn resolutions #12605</li> <li>Add source URL compare links for npm digest updates #12112</li> <li>Logging installed binary version and constraints mismatch #10382</li> <li>Support npmv7 (lock file v2) for transitiveRemediation #10371</li> <li>Support npm registries with a general hostRule authentication #9941</li> <li>Detect if npm package file is nodejs-only #9616</li> <li>Upgrade yarn when version policy is on #7429</li> <li><code>chore</code> commit type when only the lockfile is updated #6791</li> <li>Add NPM Audit data to add more detail to Renovate PRs or limit to merge requests to only vulnerability fixes #6027</li> <li>Improve story for creating PRs to update to nightly builds #5872</li> <li>Update github hashes in npm package.json files #5640</li> <li>Semver-compatible branch committish incorrectly getting rolled back to tagged versions #5170</li> <li>npm: Add support for node compatibility checks  #4826</li> <li><code>latest</code> is not supported as a valid version spec for dependencies in a <code>package.json</code> file #3945</li> <li>Feature request: Rushjs monorepo support #3681</li> <li>feat(pnpm): support package.yaml and package.json5 #3653</li> <li>Vulnerability remediation using Yarn resolutions #3093</li> <li>Update dependencies to resolve security vulnerabilities in sub-dependencies #3080</li> <li>Feature Request: Add tag after bumpVersion and automerge #2928</li> <li>bumping the version doesn't execute npm preversion hook #2463</li> <li>Group remaining @types PR's #1799</li> <li>Special handling for npm <code>@types</code> #519</li> </ul>"},{"location":"modules/manager/npm/#bug-reports","title":"Bug reports","text":"<ul> <li>Mismatch between PR title/body and bumped version when remediating yarn range #20929</li> <li>Cannot handle yarn v3 and private registry #14756</li> <li>Renovate cannot upgrade npm to an incompatible version when <code>engine-strict=true</code> is in <code>.npmrc</code> #12068</li> <li>Renovate removed a or clause when updating node engines in package.json #7469</li> </ul>"},{"location":"modules/manager/nuget/","title":"Automated Dependency Updates for Nuget","text":"<p>Renovate supports updating Nuget dependencies.</p>"},{"location":"modules/manager/nuget/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>\\.(?:cs|fs|vb)proj$\n\\.(?:props|targets)$\n(^|/)dotnet-tools\\.json$\n(^|/)global\\.json$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/nuget/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>dotnet-version</code>, <code>nuget</code>.</p>"},{"location":"modules/manager/nuget/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.(?:cs|fs|vb)proj$\",\n\"\\\\.(?:props|targets)$\",\n\"(^|/)dotnet-tools\\\\.json$\",\n\"(^|/)global\\\\.json$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/nuget/#additional-information","title":"Additional Information","text":"<p>Use <code>packageRules</code> to control the behavior of the NuGet package manager.</p> <p>The NuGet package manager supports these SDK-style files and formats:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> <li><code>.props</code></li> <li><code>.targets</code></li> <li><code>global.json</code></li> <li><code>dotnet-tools.json</code></li> </ul> <p>.NET Core projects are supported by default.</p> <p>For Renovate to work with .NET Framework projects, you need to update these files so they match the new SDK-style format:</p> <ul> <li><code>.csproj</code></li> <li><code>.fsproj</code></li> <li><code>.vbproj</code></li> <li><code>.props</code></li> <li><code>.targets</code></li> </ul>"},{"location":"modules/manager/nuget/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/nuget/#feature-requests","title":"Feature requests","text":"<ul> <li>Ability to ignore pinned NuGet dependencies #21323</li> <li>Extract <code>RuntimeFrameworkVersion</code> for dotnet #18434</li> <li>Nuget: support for packageSourceMapping feature #17562</li> <li>Fully support nuget range/floating versions (including prerelease) #11127</li> <li>NuGet Repository URLs and environment variables #8335</li> </ul>"},{"location":"modules/manager/nuget/#bug-reports","title":"Bug reports","text":"<ul> <li>Nuget manager fails to update <code>packages.lock.json</code> artifact if <code>nuget.config</code> contains default registry #20888</li> </ul>"},{"location":"modules/manager/nvm/","title":"Automated Dependency Updates for nvm","text":"<p>Renovate supports updating nvm dependencies.</p>"},{"location":"modules/manager/nvm/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.nvmrc$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/nvm/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/nvm/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.nvmrc$\"\n],\n\"versioning\": \"node\",\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/nvm/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.nvmrc</code> file updated.</p>"},{"location":"modules/manager/osgi/","title":"Automated Dependency Updates for Osgi","text":"<p>Renovate supports updating Osgi dependencies.</p>"},{"location":"modules/manager/osgi/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)src/main/features/.+\\.json$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/osgi/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>.</p>"},{"location":"modules/manager/osgi/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)src/main/features/.+\\\\.json$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/osgi/#additional-information","title":"Additional Information","text":"<p>The <code>osgi</code> manager extracts dependencies from feature model definition files, typically located under <code>src/main/features</code>. It uses the <code>maven</code> datasource to find dependency updates.</p> <p>Artifact list extensions are not supported. For the definition of artifact list extensions, read section 159.7.3 of the OSGi R8 spec.</p> <p>References:</p> <ul> <li>OSGi compendium release 8, Feature Service Specification</li> <li>The Sling implementation of the feature model</li> </ul>"},{"location":"modules/manager/pip-compile/","title":"Automated Dependency Updates for Pip Compile","text":"<p>Renovate supports updating Pip Compile dependencies.</p>"},{"location":"modules/manager/pip-compile/#file-matching","title":"File Matching","text":"<p>Because file names for <code>pip-compile</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>pip-compile</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pip-compile/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pip-compile/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [],\n\"lockFileMaintenance\": {\n\"enabled\": true,\n\"branchTopic\": \"pip-compile-refresh\",\n\"commitMessageAction\": \"Refresh pip-compile outputs\"\n}\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#additional-information","title":"Additional Information","text":"<p>Due to limited functionality, the <code>pip-compile</code> manager should be considered in an \"alpha\" stage, which means it's not ready for production use for the majority of end users. We welcome feedback and bug reports!</p> <p>The current implementation has some limitations. Read the full document before you start using the <code>pip-compile</code> manager.</p>"},{"location":"modules/manager/pip-compile/#non-configured-filematch","title":"Non-configured fileMatch","text":"<p>The <code>pip-compile</code> manager has an empty array for default <code>fileMatch</code>, meaning it won't match any files ever by default. You can \"activate\" the manager by specifying a <code>fileMatch</code> pattern such as:</p> <pre><code>{\n\"pip-compile\": {\n\"fileMatch\": [\"(^|/)requirements\\\\.in$\"]\n}\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#assumption-of-intxt","title":"Assumption of <code>.in</code>/<code>.txt</code>","text":"<p>If Renovate matches/extracts a file, it assumes that the corresponding output file is found by swapping the <code>.in</code> for <code>.txt</code>. e.g. <code>requirements.in</code> =&gt; <code>requirements.txt</code> It will not work if files are in separate directories, including <code>input/requirements.in</code> and <code>output/requirements.txt</code>.</p> <p>If no <code>.in</code> suffix is found, then a <code>.txt</code> suffix is appended for the output file, e.g. <code>foo.file</code> would look for a corresponding <code>foo.file.txt</code>.</p> <p>We intend to make the mapping configurable in future iterations.</p>"},{"location":"modules/manager/pip-compile/#configuration-of-python-version","title":"Configuration of Python version","text":"<p>By default Renovate uses the latest version of Python. To get Renovate to use another version of Python, add a constraints` rule to the Renovate config:</p> <pre><code>{\n\"constraints\": {\n\"python\": \"==3.7\"\n}\n}\n</code></pre>"},{"location":"modules/manager/pip-compile/#pip-compile-arguments","title":"<code>pip-compile</code> arguments","text":"<p>Renovate reads the <code>requirements.txt</code> file and extracts these <code>pip-compile</code> arguments:</p> <ul> <li><code>--generate-hashes</code></li> <li><code>--allow-unsafe</code></li> <li><code>--no-emit-index-url</code></li> <li><code>--strip-extras</code></li> <li><code>--resolver</code></li> </ul>"},{"location":"modules/manager/pip_requirements/","title":"Automated Dependency Updates for Pip_requirements","text":"<p>Renovate supports updating Pip_requirements dependencies.</p>"},{"location":"modules/manager/pip_requirements/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)([\\w-]*)requirements\\.(txt|pip)$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pip_requirements/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/pip_requirements/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)([\\\\w-]*)requirements\\\\.(txt|pip)$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/pip_requirements/#additional-information","title":"Additional Information","text":"<p>Supports <code>requirements.txt</code> and <code>requirements.pip</code> files. The default file pattern is fairly flexible in an attempt to catch similarly named ones too but may be extended/changed.</p>"},{"location":"modules/manager/pip_requirements/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/pip_requirements/#feature-requests","title":"Feature requests","text":"<ul> <li>pip_requirements with private index and hashes raises hashin.PackageNotFoundError #12254</li> </ul>"},{"location":"modules/manager/pip_setup/","title":"Automated Dependency Updates for Pip_setup","text":"<p>Renovate supports updating Pip_setup dependencies.</p>"},{"location":"modules/manager/pip_setup/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)setup\\.py$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pip_setup/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pip_setup/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)setup\\\\.py$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/pip_setup/#additional-information","title":"Additional Information","text":"<p><code>setup.py</code> files are parsed by calling out to <code>python</code> and then using a mock to detect imported modules.</p>"},{"location":"modules/manager/pipenv/","title":"Automated Dependency Updates for Pipenv","text":"<p>Renovate supports updating Pipenv dependencies.</p>"},{"location":"modules/manager/pipenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Pipfile$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pipenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/pipenv/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Pipfile$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/pipenv/#additional-information","title":"Additional Information","text":"<p><code>Pipenv.lock</code> updating is supported.</p> <p>The following <code>depTypes</code> are supported by the Pipenv manager:</p> <ul> <li><code>packages</code></li> <li><code>dev-packages</code></li> </ul>"},{"location":"modules/manager/poetry/","title":"Automated Dependency Updates for Poetry","text":"<p>Renovate supports updating Poetry dependencies.</p>"},{"location":"modules/manager/poetry/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)pyproject\\.toml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/poetry/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/poetry/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)pyproject\\\\.toml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/poetry/#additional-information","title":"Additional Information","text":"<p>Both Poetry 0.x and 1.x versions are supported.</p> <p>Whenever the <code>pyproject.toml</code> file is updated, the Poetry lock file will be checked for updates as well.</p> <p>The following <code>depTypes</code> are supported by the Poetry manager:</p> <ul> <li><code>dependencies</code></li> <li><code>dev-dependencies</code></li> <li><code>extras</code></li> <li><code>&lt;group-name&gt;</code> (dynamic, based on the group name, per dependency groups documentation)</li> </ul>"},{"location":"modules/manager/poetry/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/poetry/#feature-requests","title":"Feature requests","text":"<ul> <li>Support git dependencies in Poetry manager #21848</li> <li>Support different Python versions for mono repo when same dependency update in one pull request #20615</li> <li>Add support for setting bumpVersion in Poetry projects (Python) #16704</li> <li>[poetry] detect if allow-prereleases=true #7922</li> </ul>"},{"location":"modules/manager/poetry/#bug-reports","title":"Bug reports","text":"<ul> <li>Explicit source of Poetry managed Python dependency is not supported #12003</li> </ul>"},{"location":"modules/manager/pre-commit/","title":"Automated Dependency Updates for Pre Commit","text":"<p>Renovate supports updating Pre Commit dependencies.</p>"},{"location":"modules/manager/pre-commit/#enabling","title":"Enabling","text":"<p>Pre Commit functionality is currently in beta testing, so you must opt-in to test it. To enable it, add a configuration like this to either your bot config or your <code>renovate.json</code>:</p> <pre><code>{\n  \"pre-commit\": {\n    \"enabled\": true\n  }\n}\n</code></pre> <p>If you find any bugs, please create a new discussion first. If you find that it works well, then let us know too.</p>"},{"location":"modules/manager/pre-commit/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.pre-commit-config\\.yaml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pre-commit/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>, <code>gitlab-tags</code>.</p>"},{"location":"modules/manager/pre-commit/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"pre-commit hook {{depName}}\",\n\"enabled\": false,\n\"fileMatch\": [\n\"(^|/)\\\\.pre-commit-config\\\\.yaml$\"\n],\n\"prBodyNotes\": [\n\"Note: The `pre-commit` manager in Renovate is not supported by the `pre-commit` maintainers or community. Please do not report any problems there, instead [create a Discussion in the Renovate repository](https://github.com/renovatebot/renovate/discussions/new) if you have any questions.\"\n]\n}\n</code></pre>"},{"location":"modules/manager/pre-commit/#additional-information","title":"Additional Information","text":"<p>Important note: The <code>pre-commit</code> manager is disabled by default and must be opted into through config. Renovate's approach to version updating is not fully aligned with <code>pre-commit autoupdate</code> and this has caused frustration for <code>pre-commit</code>'s creator/maintainer. Attempts to work with the <code>pre-commit</code> project to fix these gaps have been rejected, so we have chosen to disable the manager by default indefinitely. Please do not contact the <code>pre-commit</code> project/maintainer about any Renovate-related topic. To view a list of open issues related to the <code>pre-commit</code> manager in Renovate, see the filtered list using the <code>manager:pre-commit</code> label.</p> <p>When enabled, Renovate supports updating of Git dependencies within pre-commit configuration <code>.pre-commit-config.yaml</code> files or other YAML files that use the same format (via <code>fileMatch</code> configuration). Updates are performed if the files follow the conventional format used in typical pre-commit files:</p> <pre><code>repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\nrev: v1.0.0\nhooks:\n- id: some-hook-id\n</code></pre> <p>To enable the <code>pre-commit</code> manager, add the following config:</p> <pre><code>{\n\"pre-commit\": {\n\"enabled\": true\n}\n}\n</code></pre> <p>Alternatively, add <code>:enablePreCommit</code> to your <code>extends</code> array.</p>"},{"location":"modules/manager/pre-commit/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/pre-commit/#feature-requests","title":"Feature requests","text":"<ul> <li>Renovate <code>pre-commit</code> addition dependencies #20780</li> <li>pre-commit manager skips ssh repo with invalid-url #11514</li> <li>Pre-commit minimum version and docker entry #11166</li> </ul>"},{"location":"modules/manager/pub/","title":"Automated Dependency Updates for Pub","text":"<p>Renovate supports updating Pub dependencies.</p>"},{"location":"modules/manager/pub/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)pubspec\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pub/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>dart</code>.</p>"},{"location":"modules/manager/pub/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)pubspec\\\\.ya?ml$\"\n],\n\"versioning\": \"npm\"\n}\n</code></pre>"},{"location":"modules/manager/pub/#additional-information","title":"Additional Information","text":"<p>This manager is used to keep pubspec files up-to-date.</p>"},{"location":"modules/manager/puppet/","title":"Automated Dependency Updates for Puppet","text":"<p>Renovate supports updating Puppet dependencies.</p>"},{"location":"modules/manager/puppet/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Puppetfile$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/puppet/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>puppet-forge</code>, <code>github-tags</code>, <code>git-tags</code>.</p>"},{"location":"modules/manager/puppet/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Puppetfile$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/puppet/#additional-information","title":"Additional Information","text":"<p>simply keeps Puppetfiles updated</p>"},{"location":"modules/manager/puppet/#how-it-works","title":"How It Works","text":"<ol> <li>Renovate searches in each repository for any <code>Puppetfile</code> files</li> <li>Existing dependencies are extracted from the relevant sections of the file</li> <li>Renovate resolves the dependency on the provided forges (or uses <code>https://forgeapi.puppetlabs.com</code> as default)</li> <li>A PR is created with <code>Puppetfile</code> updated in the same commit</li> <li>If the source repository has either a \"changelog\" file or uses GitHub releases, then Release Notes for each version will be embedded in the generated PR</li> </ol>"},{"location":"modules/manager/puppet/#supported-puppetfile-formats","title":"supported Puppetfile formats","text":"<p>the manager extracts the deps from one Puppetfile</p> <p>the Puppetfile supports at the moment different ways to configure forges</p> <ol> <li>no forge defined</li> </ol> <pre><code>mod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\n</code></pre> <ol> <li>one forge defined: <code>forge \"https://forgeapi.puppetlabs.com\"</code></li> </ol> <pre><code>forge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n</code></pre> <ol> <li>multiple forges defined</li> </ol> <pre><code>forge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n\n# private forge\nforge \"https://forgeapi.example.com\"\n\nmod 'example/infra', '3.3.0'\n</code></pre> <ol> <li>github based version</li> </ol> <pre><code># tag based\nmod 'example/standalone_jar',\n:git =&gt; 'git@gitlab.example.de:puppet/example-standalone_jar',\n:tag =&gt; '0.9.0'\n</code></pre> <ol> <li>git based version</li> </ol> <pre><code># tag based\nmod 'stdlib',\n:git =&gt; 'git@gitlab.com:example/project_stdlib.git',\n:tag =&gt; '5.0.0'\n</code></pre>"},{"location":"modules/manager/puppet/#possible-improvements","title":"possible improvements","text":""},{"location":"modules/manager/puppet/#further-git-support","title":"further git-support","text":"<p>usually you can add the versions to a forge and use the already provided way of updating</p> <pre><code># branch based\nmod 'example/samba',\n:git    =&gt; 'https://github.com/example/puppet-samba',\n:branch =&gt; 'stable_version'\n</code></pre> <pre><code># ref based\nmod 'example/samba',\n:git =&gt; 'https://github.com/example/puppet-samba',\n:ref =&gt; 'stable_version'\n</code></pre>"},{"location":"modules/manager/pyenv/","title":"Automated Dependency Updates for Pyenv","text":"<p>Renovate supports updating Pyenv dependencies.</p>"},{"location":"modules/manager/pyenv/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.python-version$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/pyenv/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/pyenv/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.python-version$\"\n],\n\"versioning\": \"docker\"\n}\n</code></pre>"},{"location":"modules/manager/pyenv/#additional-information","title":"Additional Information","text":"<p>Simply keeps the <code>.python-version</code> file updated.</p>"},{"location":"modules/manager/regex/","title":"Custom Manager Support using Regex","text":"<p>With the <code>regex</code> manager you can configure Renovate so it finds dependencies that are not detected by its other built-in package managers.</p> <p>The <code>regex</code> manager is unique in Renovate because:</p> <ul> <li>It is configurable via regex named capture groups</li> <li>It can extract any <code>datasource</code></li> <li>By using the <code>regexManagers</code> config, you can create multiple \"regex managers\" for the same repository</li> </ul> <p>We have additional Handlebars helpers to help you perform common transformations on the regex manager's template fields. Also read the documentation for the <code>regexManagers</code> config option.</p>"},{"location":"modules/manager/regex/#required-fields","title":"Required Fields","text":"<p>The first two required fields are <code>fileMatch</code> and <code>matchStrings</code>:</p> <ul> <li><code>fileMatch</code> works the same as any manager</li> <li><code>matchStrings</code> is a <code>regexManagers</code> concept and is used for configuring a regular expression with named capture groups</li> </ul> <p>Before Renovate can look up a dependency and decide about updates, it needs this information about each dependency:</p> <ul> <li>The dependency's name</li> <li>Which <code>datasource</code> to use: npm, Docker, GitHub tags, and so on. For how to format this references see datasource overview</li> <li>Which version scheme to use: defaults to <code>semver-coerced</code>, but you may set another value like <code>pep440</code>. Supported versioning schemes can be found in the versioning overview</li> </ul> <p>Configuration-wise, it works like this:</p> <ul> <li>You must capture the <code>currentValue</code> of the dependency in a named capture group</li> <li>You must have either a <code>depName</code> capture group or a <code>depNameTemplate</code> config field</li> <li>You can optionally have a <code>packageName</code> capture group or a <code>packageNameTemplate</code> if it differs from <code>depName</code></li> <li>You must have either a <code>datasource</code> capture group or a <code>datasourceTemplate</code> config field</li> <li>You can optionally have a <code>depType</code> capture group or a <code>depTypeTemplate</code> config field</li> <li>You can optionally have a <code>versioning</code> capture group or a <code>versioningTemplate</code> config field. If neither are present, <code>semver-coerced</code> will be used as the default</li> <li>You can optionally have an <code>extractVersion</code> capture group or an <code>extractVersionTemplate</code> config field</li> <li>You can optionally have a <code>currentDigest</code> capture group.</li> <li>You can optionally have a <code>registryUrl</code> capture group or a <code>registryUrlTemplate</code> config field. If it's a valid URL, it will be converted to the <code>registryUrls</code> field as a single-length array.</li> <li>You can optionally have an <code>indentation</code> capture group. It must be either empty or whitespace only, otherwise it will be reset to an empty string.</li> </ul>"},{"location":"modules/manager/regex/#regular-expression-capture-groups","title":"Regular Expression Capture Groups","text":"<p>To be effective with the regex manager, you should understand regular expressions and named capture groups. But enough examples may compensate for lack of experience.</p> <p>Take this <code>Dockerfile</code> as an example:</p> <pre><code>FROM node:12\nENV YARN_VERSION=1.19.1\nRUN curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}\n</code></pre> <p>You would need to capture the <code>currentValue</code> with a named capture group, like this: <code>ENV YARN_VERSION=(?&lt;currentValue&gt;.*?)\\\\n</code>.</p> <p>If you're looking for an online regex testing tool that supports capture groups, try regex101.com. Be aware that backslashes (<code>'\\'</code>) of the resulting regex have to still be escaped e.g. <code>\\n\\s</code> --&gt; <code>\\\\n\\\\s</code>. You can use the Code Generator in the sidebar and copy the regex in the generated \"Alternative syntax\" comment into JSON.</p> <p>The <code>regex</code> manager uses RE2 which does not support backreferences and lookahead assertions. The <code>regex</code> manager matches are done per-file and not per-line, you should be aware when using the <code>^</code> and/or <code>$</code> regex assertions.</p>"},{"location":"modules/manager/regex/#configuration-templates","title":"Configuration templates","text":"<p>In many cases, named capture groups alone aren't enough and you'll need to give Renovate more information so it can look up a dependency. Continuing the above example with Yarn, here is the full Renovate config:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^Dockerfile$\"],\n\"matchStrings\": [\"ENV YARN_VERSION=(?&lt;currentValue&gt;.*?)\\\\n\"],\n\"depNameTemplate\": \"yarn\",\n\"datasourceTemplate\": \"npm\"\n}\n]\n}\n</code></pre>"},{"location":"modules/manager/regex/#advanced-capture","title":"Advanced Capture","text":"<p>Say your <code>Dockerfile</code> has many <code>ENV</code> variables that you want to keep up-to-date. But you don't want to write a <code>regexManagers</code> rule for each variable. Instead you enhance your <code>Dockerfile</code> like this:</p> <pre><code>ARG IMAGE=node:12@sha256:6e5264cd4cfaefd7174b2bc10c7f9a1c2b99d98d127fc57a802d264da9fb43bd\nFROM ${IMAGE}\n# renovate: datasource=github-tags depName=nodejs/node versioning=node\nENV NODE_VERSION=10.19.0\n # renovate: datasource=github-releases depName=composer/composer\nENV COMPOSER_VERSION=1.9.3\n# renovate: datasource=docker depName=docker versioning=docker\nENV DOCKER_VERSION=19.03.1\n# renovate: datasource=npm depName=yarn\nENV YARN_VERSION=1.19.1\n</code></pre> <p>This <code>Dockerfile</code> is meant as an example, your <code>Dockerfile</code> may be a lot bigger.</p> <p>You could configure Renovate to update the <code>Dockerfile</code> like this:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"^Dockerfile$\"],\n\"matchStrings\": [\n\"datasource=(?&lt;datasource&gt;.*?) depName=(?&lt;depName&gt;.*?)( versioning=(?&lt;versioning&gt;.*?))?\\\\sENV .*?_VERSION=(?&lt;currentValue&gt;.*)\\\\s\"\n],\n\"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n},\n{\n\"fileMatch\": [\"^Dockerfile$\"],\n\"matchStrings\": [\n\"ARG IMAGE=(?&lt;depName&gt;.*?):(?&lt;currentValue&gt;.*?)@(?&lt;currentDigest&gt;sha256:[a-f0-9]+)\\\\s\"\n],\n\"datasourceTemplate\": \"docker\"\n}\n]\n}\n</code></pre> <p>We could drop the <code>versioningTemplate</code> because Renovate defaults to <code>\u2206semver-coerced</code> versioning. But we included the <code>versioningTemplate</code> config option to show you why we call these fields templates: because they are compiled using Handlebars and so can be composed from values you collect in named capture groups.</p> <p>You should use triple brace <code>{{{ }}}</code> templates like <code>{{{versioning}}}</code> to be safe. This is because Handlebars escapes special characters with double braces (by default).</p> <p>By adding <code>renovate: datasource=</code> and <code>depName=</code> comments to the <code>Dockerfile</code> you only need one <code>regexManager</code> instead of four. The <code>Dockerfile</code> is documented better as well.</p> <p>The syntax in the example is arbitrary, and you can set your own syntax. If you do, update your <code>matchStrings</code> regex!</p> <p>You can use simple versions of such comments to increase readability.</p> <p>For example the <code>appVersion</code> property in a <code>Chart.yaml</code> of a Helm chart is always referenced to an Docker image. In such scenarios, some values can be hard-coded. For example:</p> <pre><code>apiVersion: v2\nname: amazon-eks-pod-identity-webhook\ndescription: A Kubernetes webhook for pods that need AWS IAM access\nversion: 1.0.3\ntype: application\n# renovate: image=amazon/amazon-eks-pod-identity-webhook\nappVersion: 'v0.4.0'\n</code></pre> <p>Using the <code>regexManagers</code> below, Renovate looks for available Docker tags of the image <code>amazon/amazon-eks-pod-identity-webhook</code>.</p> <pre><code>{\n\"regexManagers\": [\n{\n\"datasourceTemplate\": \"docker\",\n\"fileMatch\": [\"(^|/)Chart\\\\.yaml$\"],\n\"matchStrings\": [\n\"#\\\\s?renovate: image=(?&lt;depName&gt;.*?)\\\\s?appVersion:\\\\s?\\\\\\\"?(?&lt;currentValue&gt;[\\\\w+\\\\.\\\\-]*)\\\"\"\n]\n}\n]\n}\n</code></pre>"},{"location":"modules/manager/regex/#using-regexmanager-to-update-the-dependency-name-in-addition-to-version","title":"Using regexManager to update the dependency name in addition to version","text":""},{"location":"modules/manager/regex/#updating-gitlab-ci-include-dep-names","title":"Updating <code>gitlab-ci include</code> dep names","text":"<p>You can use the regex manager to update the <code>depName</code> and the version. This can be handy when the location of files referenced in gitlab-ci <code>includes:</code> fields has changed.</p> <p>You may need to set a second <code>matchString</code> for the new name to ensure the regex manager can detect the new value. For example:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\".*y[a]?ml$\"],\n\"matchStringsStrategy\": \"combination\",\n\"matchStrings\": [\n\"['\\\"]?(?&lt;depName&gt;/pipeline-fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?&lt;currentValue&gt;[\\\\d-]*)['\\\"]?\",\n\"['\\\"]?(?&lt;depName&gt;pipeline-solutions/gitlab/fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?&lt;currentValue&gt;[\\\\d-]*)['\\\"]?\"\n],\n\"depNameTemplate\": \"pipeline-solutions/gitlab/fragments/fragment-version-check\",\n\"autoReplaceStringTemplate\": \"'{{{depName}}}'\\n    ref: {{{newValue}}}\",\n\"datasourceTemplate\": \"gitlab-tags\",\n\"versioningTemplate\": \"gitlab-tags\"\n}\n]\n}\n</code></pre> <p>The config above will migrate:</p> <pre><code>- project: 'pipeline-fragments/docker-lint'\nref: 2-4-0\nfile: 'ci-include-docker-lint-base.yml'\n</code></pre> <p>To this:</p> <pre><code>- project: 'pipeline-solutions/gitlab/fragments/docker-lint'\nref: 2-4-1\nfile: 'ci-include-docker-lint-base.yml'\n</code></pre>"},{"location":"modules/manager/regex/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/regex/#feature-requests","title":"Feature requests","text":"<ul> <li>Allow naming of regex managers #21760</li> <li>Enable <code>versionBump</code> for Docker or Regex manager #13672</li> <li>Add a regex recursive strategy narrowing content at each recursion #12300</li> <li>initial digest pinning for regex manager #10993</li> <li>scheme: regexManagers properties #8853</li> </ul>"},{"location":"modules/manager/ruby-version/","title":"Automated Dependency Updates for Ruby Version","text":"<p>Renovate supports updating Ruby Version dependencies.</p>"},{"location":"modules/manager/ruby-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.ruby-version$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/ruby-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>ruby-version</code>.</p>"},{"location":"modules/manager/ruby-version/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.ruby-version$\"\n],\n\"versioning\": \"ruby\"\n}\n</code></pre>"},{"location":"modules/manager/ruby-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.ruby-version</code> files. Available versions will be determined from the official Ruby downloads page.</p>"},{"location":"modules/manager/ruby-version/#open-items","title":"Open items","text":"<p>The below list of bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/ruby-version/#bug-reports","title":"Bug reports","text":"<ul> <li>Upgrading bundler version fails #5022</li> </ul>"},{"location":"modules/manager/sbt/","title":"Automated Dependency Updates for Sbt","text":"<p>Renovate supports updating Sbt dependencies.</p>"},{"location":"modules/manager/sbt/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching any of the following regular expressions:</p> <pre><code>\\.sbt$\nproject/[^/]*\\.scala$\nproject/build\\.properties$\n</code></pre> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/sbt/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>maven</code>, <code>sbt-package</code>, <code>sbt-plugin</code>, <code>github-releases</code>.</p>"},{"location":"modules/manager/sbt/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"\\\\.sbt$\",\n\"project/[^/]*\\\\.scala$\",\n\"project/build\\\\.properties$\"\n],\n\"versioning\": \"ivy\"\n}\n</code></pre>"},{"location":"modules/manager/sbt/#additional-information","title":"Additional Information","text":"<p>Extracts Maven artifact dependencies for SBT.</p>"},{"location":"modules/manager/sbt/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/sbt/#feature-requests","title":"Feature requests","text":"<ul> <li>sbt: Support %%% dependencies (e.g. Scala.js) #19650</li> </ul>"},{"location":"modules/manager/sbt/#bug-reports","title":"Bug reports","text":"<ul> <li>Renovate updating wrong dependency with artifact version that doesn't exist #18937</li> <li>sbt manager does not pick up dependencies with <code>excludeAll ...</code> qualifier #13545</li> </ul>"},{"location":"modules/manager/setup-cfg/","title":"Automated Dependency Updates for Setup Cfg","text":"<p>Renovate supports updating Setup Cfg dependencies.</p>"},{"location":"modules/manager/setup-cfg/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)setup\\.cfg$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/setup-cfg/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>pypi</code>.</p>"},{"location":"modules/manager/setup-cfg/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)setup\\\\.cfg$\"\n],\n\"versioning\": \"pep440\"\n}\n</code></pre>"},{"location":"modules/manager/setup-cfg/#additional-information","title":"Additional Information","text":"<p>Updates dependencies for Python <code>setup.cfg</code> files.</p>"},{"location":"modules/manager/swift/","title":"Automated Dependency Updates for Swift Package Manager","text":"<p>Renovate supports updating Swift Package Manager dependencies.</p>"},{"location":"modules/manager/swift/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)Package\\.swift</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/swift/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>.</p>"},{"location":"modules/manager/swift/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)Package\\\\.swift\"\n],\n\"versioning\": \"swift\",\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/swift/#additional-information","title":"Additional Information","text":"<p>Anything other than <code>.exact(&lt;...&gt;)</code> or <code>exact:&lt;...&gt;</code> will be treated as range with respect to Swift specific. Because of this, some PR descriptions will look like <code>from: &lt;...&gt; =&gt; &lt;...&gt;</code>.</p> <p>Examples:</p> <pre><code>package(name: \"&lt;...&gt;\", .exact(\"1.2.3\"))   // =&gt; 1.2.3\npackage(name: \"&lt;...&gt;\", exact: \"1.2.3\")    // =&gt; 1.2.3\npackage(name: \"&lt;...&gt;\", from: \"1.2.3\")     // =&gt; from: \"2.0.0\"\npackage(name: \"&lt;...&gt;\", \"1.2.3\"...)        // =&gt; \"2.0.0\"...\npackage(name: \"&lt;...&gt;\", \"1.2.3\"...\"1.3.0\") // =&gt; \"1.2.3\"...\"2.0.0\"\npackage(name: \"&lt;...&gt;\", \"1.2.3\"..&lt;\"1.3.0\") // =&gt; \"1.2.3\"..&lt;\"2.0.0\"\npackage(name: \"&lt;...&gt;\", ...\"1.2.3\")        // =&gt; ...\"2.0.0\"\npackage(name: \"&lt;...&gt;\", ..&lt;\"1.2.3\")        // =&gt; ..&lt;\"2.0.0\"\n</code></pre>"},{"location":"modules/manager/swift/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/swift/#feature-requests","title":"Feature requests","text":"<ul> <li>Detect Swift git dependencies #18766</li> <li>Package.resolve isn't updated after update Package.swift #6924</li> </ul>"},{"location":"modules/manager/swift/#bug-reports","title":"Bug reports","text":"<ul> <li>When updating for SwiftPM, tag with prefix may be inserted to version #9077</li> </ul>"},{"location":"modules/manager/tekton/","title":"Automated Dependency Updates for Tekton","text":"<p>Renovate supports updating Tekton dependencies.</p>"},{"location":"modules/manager/tekton/#file-matching","title":"File Matching","text":"<p>Because file names for <code>tekton</code> cannot be easily determined automatically, Renovate will not attempt to match any <code>tekton</code> files by default. For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/tekton/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/tekton/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": []\n}\n</code></pre>"},{"location":"modules/manager/tekton/#additional-information","title":"Additional Information","text":"<p>Tekton is an open-source cloud-native Continuous Integration and Continuous Delivery/Deployment solution.</p> <p>Tekton uses Tasks to capture specific commands to be executed, and Pipelines to combine different Tasks, to achieve a goal, like building a container image. Tasks and Pipelines are defined as Kubernetes custom resources.</p> <p>The Tekton documentation is a great resource to learn more about the overall concepts and how to start using it.</p>"},{"location":"modules/manager/tekton/#distributing-tasks-and-pipeline-definitions","title":"Distributing Tasks and Pipeline definitions","text":"<p>There are different ways to distribute Task and Pipeline definitions. They can be created directly as a Kubernetes resource with standard tools like <code>kubectl</code>. Tasks and Pipeline definitions can also live outside the Kubernetes cluster and get fetched by Tekton when needed, this approach relies on Tekton resource references rather than the resource definition. The <code>tekton</code> manager focuses on providing updates to Tekton resource references.</p> <p>Right now, Renovate's Tekton manager only supports references that are Bundles. Read the Tekton Pipeline remote resolution docs for the different kinds of Tekton references and their corresponding resolvers.</p>"},{"location":"modules/manager/tekton/#using-a-tekton-bundle-reference","title":"Using a Tekton Bundle reference","text":"<p>There are three ways to use a Tekton Bundle reference:</p> <ol> <li>Via the Tekton Bundles Resolver</li> <li>Via the <code>tektoncd/resolution</code> project</li> <li>Via the <code>taskRun.spec.taskRef.bundle</code> and the <code>pipelineRun.spec.pipelineRef.bundle</code> attributes</li> </ol> <p>Renovate's Tekton manager supports all the methods listed above.</p>"},{"location":"modules/manager/tekton/#configuring-images-in-tekton-tasks","title":"Configuring images in Tekton Tasks","text":"<p>You can configure the container images that Tekton uses when it runs tasks. You may use these attributes to configure images in a:</p> <ol> <li>Task step</li> <li>Task stepTemplate</li> <li>Task sidecar</li> </ol> <p>You can define Tekton Tasks within these Tekton resources:</p> <ol> <li>Task</li> <li>TaskRun</li> <li>Pipeline</li> <li>PipelineRun</li> </ol> <p>Renovate's Tekton manager supports all the image attributes for the Tekton resources mentioned above.</p>"},{"location":"modules/manager/tekton/#set-your-own-filematch-pattern","title":"Set your own <code>fileMatch</code> pattern","text":"<p>The <code>tekton</code> manager does not have a default <code>fileMatch</code> pattern. This means it won't match any files until you set a <code>fileMatch</code> pattern. This is to avoid problems with unrelated YAML files since there is no well-established file name pattern for Tekton resources. As an example, the following config matches all the YAML files in a repository:</p> <pre><code>{\n\"tekton\": {\n\"fileMatch\": [\"\\\\.yaml$\", \"\\\\.yml$\"]\n}\n}\n</code></pre> <p>See our versioning documentation for details on the existing versioning rules and possible alterations.</p>"},{"location":"modules/manager/terraform/","title":"Automated Dependency Updates for Terraform","text":"<p>Renovate supports updating Terraform dependencies.</p>"},{"location":"modules/manager/terraform/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.tf$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/terraform/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>bitbucket-tags</code>, <code>docker</code>, <code>git-tags</code>, <code>github-tags</code>, <code>github-releases</code>, <code>helm</code>, <code>terraform-module</code>, <code>terraform-provider</code>.</p>"},{"location":"modules/manager/terraform/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"Terraform {{depName}}\",\n\"fileMatch\": [\n\"\\\\.tf$\"\n],\n\"pinDigests\": false\n}\n</code></pre>"},{"location":"modules/manager/terraform/#additional-information","title":"Additional Information","text":""},{"location":"modules/manager/terraform/#supported-dependencies","title":"Supported dependencies","text":"<p>Renovate supports updating the Terraform dependencies listed below. Check the tables to see where some dependencies can be hosted.</p>"},{"location":"modules/manager/terraform/#modules","title":"Modules","text":"Name Public hosting Private hosting GitTags yes yes GithubTags yes yes TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#providers","title":"Providers","text":"<p>Providers are deprecated in Terraform <code>0.13.0</code>.</p> Name Public hosting Private hosting TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#required_providers-block","title":"required_providers block","text":"<p>Needs Terraform <code>&gt;= 0.13.0</code>.</p> Name Public hosting Private hosting TerraformRegistry yes yes"},{"location":"modules/manager/terraform/#required_version","title":"required_version","text":"<p>Renovate can update the <code>required_version</code> attribute of the Terraform block.</p>"},{"location":"modules/manager/terraform/#helm_release","title":"helm_release","text":"<p>Renovate can update the version attribute of <code>helm_release</code> resources. This applies to both helm chart repositories and charts published in OCI registries.</p> Name Public hosting Private hosting chart repository yes yes"},{"location":"modules/manager/terraform/#docker","title":"Docker","text":"<p>Renovate can update image references of the Docker provider resources (<code>docker\\_\\*</code>).</p> Name Public hosting Private hosting Docker registry yes yes"},{"location":"modules/manager/terraform/#kubernetes","title":"Kubernetes","text":"<p>Renovate can update image references of Kubernetes provider resources (<code>kubernetes\\_\\*</code>).</p> Name Public hosting Private hosting Docker registry yes yes"},{"location":"modules/manager/terraform/#tfe_workspaces","title":"tfe_workspaces","text":"<p>Renovate can update tfe_workspaces. Renovate searches for the <code>terraform_version</code> argument.</p>"},{"location":"modules/manager/terraform/#range-constraints","title":"Range constraints","text":"<p>Renovate understands these Terraform range constraints:</p> Terraform range Notes <code>&gt;= 1.2.0</code> version <code>1.2.0</code> or newer <code>&lt;= 1.2.0</code> version <code>1.2.0</code> or older <code>~&gt; 1.2.0</code> any non-beta version <code>&gt;= 1.2.0</code> and <code>&lt; 1.3.0</code>, e.g. <code>1.2.X</code> <code>~&gt; 1.2</code> any non-beta version <code>&gt;= 1.2.0</code> and <code>&lt; 2.0.0</code>, e.g. <code>1.X.Y</code> <code>&gt;= 1.0.0, &lt;= 2.0.0</code> any version between <code>1.0.0</code> and <code>2.0.0</code> inclusive"},{"location":"modules/manager/terraform/#disabling-parts-of-the-manager","title":"Disabling parts of the manager","text":"<p>You can use these <code>depTypes</code> for fine-grained control, for example to disable parts of the Terraform manager.</p> Resource <code>depType</code> Notes Terraform provider <code>provider</code> required Terraform provider <code>required_provider</code> required Terraform version <code>required_version</code> This handles the <code>required_version</code> in terraform blocks TFE workspace <code>tfe_workspace</code> This handles the <code>terraform_version</code> argument in <code>tfe_workspace</code> resources Terraform module <code>module</code> Helm release <code>helm_release</code> Docker container <code>docker_container</code> Docker image <code>docker_image</code> Docker service <code>docker_service</code> Kubernetes CronJob <code>kubernetes_cron_job</code> Kubernetes CronJob v1 <code>kubernetes_cron_job_v1</code> Kubernetes DaemonSet <code>kubernetes_daemon_set</code> Kubernetes DaemonSet v1 <code>kubernetes_daemon_set_v1</code> Kubernetes Deployment <code>kubernetes_deployment</code> Kubernetes Deployment v1 <code>kubernetes_deployment_v1</code> Kubernetes Job <code>kubernetes_job</code> Kubernetes Job v1 <code>kubernetes_job_v1</code> Kubernetes Pod <code>kubernetes_pod</code> Kubernetes Pod v1 <code>kubernetes_pod_v1</code> Kubernetes Replication Controller <code>kubernetes_replication_controller</code> Kubernetes Replication Controller v1 <code>kubernetes_replication_controller_v1</code> Kubernetes StatefulSet <code>kubernetes_stateful_set</code> Kubernetes StatefulSet v1 <code>kubernetes_stateful_set_v1</code> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/terraform/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/terraform/#feature-requests","title":"Feature requests","text":"<ul> <li>Support .tf.json Terraform JSON #11997</li> <li>Terraform Rancher apps #10246</li> </ul>"},{"location":"modules/manager/terraform/#bug-reports","title":"Bug reports","text":"<ul> <li>Terraform Version: suggesting incorrect version updates when using complex range #17973</li> <li>Don't rewrite <code>constraints</code> in terraform lock file #15580</li> <li>terraform provider update fails when .terraform.lock.hcl does not contain a lock for the provider yet #14696</li> <li>Terraform provider: flapping branch state when combined with other updates #13363</li> </ul>"},{"location":"modules/manager/terraform-version/","title":"Automated Dependency Updates for Terraform Version","text":"<p>Renovate supports updating Terraform Version dependencies.</p>"},{"location":"modules/manager/terraform-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.terraform-version$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/terraform-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/terraform-version/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.terraform-version$\"\n],\n\"versioning\": \"hashicorp\",\n\"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n}\n</code></pre>"},{"location":"modules/manager/terraform-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.terraform-version</code> files. Available versions will be determined from the official Terraform downloads page.</p>"},{"location":"modules/manager/terraform-version/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/terraform-version/#feature-requests","title":"Feature requests","text":"<ul> <li>Support terraform-version version string like <code>latest:^1.3</code> #19160</li> </ul>"},{"location":"modules/manager/terragrunt/","title":"Automated Dependency Updates for Terragrunt","text":"<p>Renovate supports updating Terragrunt dependencies.</p>"},{"location":"modules/manager/terragrunt/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)terragrunt\\.hcl$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/terragrunt/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>git-tags</code>, <code>github-tags</code>, <code>terraform-module</code>.</p>"},{"location":"modules/manager/terragrunt/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"Terragrunt dependency {{depName}}\",\n\"fileMatch\": [\n\"(^|/)terragrunt\\\\.hcl$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/terragrunt/#additional-information","title":"Additional Information","text":"<p>Currently by default, Terragrunt support is limited to Terraform registry sources and GitHub sources that include SemVer refs, e.g. like <code>github.com/hashicorp/example?ref=v1.0.0</code>.</p> <p>You can create a custom versioning config to support non-SemVer references. For example, if you want to reference a tag like <code>module-v1.2.5</code>, a block like this would work:</p> <pre><code>{\n\"terragrunt\": {\n\"versioning\": \"regex:^((?&lt;compatibility&gt;.*)-v|v*)(?&lt;major&gt;\\\\d+)\\\\.(?&lt;minor&gt;\\\\d+)\\\\.(?&lt;patch&gt;\\\\d+)$\"\n}\n}\n</code></pre> <p>Pinned Terragrunt dependencies like the following will get a PR whenever there is a newer version available:</p> <pre><code>terraform {\nsource = \"github.com/hashicorp/example?ref=v1.0.0\"\n}\n</code></pre>"},{"location":"modules/manager/terragrunt/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/manager/terragrunt/#feature-requests","title":"Feature requests","text":"<ul> <li>Terragrunt manager to support gitlab repos as a module source #18444</li> <li>Support updating Terragrunt-generated <code>terraform.lock.hcl</code> files #13393</li> </ul>"},{"location":"modules/manager/terragrunt-version/","title":"Automated Dependency Updates for Terragrunt Version","text":"<p>Renovate supports updating Terragrunt Version dependencies.</p>"},{"location":"modules/manager/terragrunt-version/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.terragrunt-version$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/terragrunt-version/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/terragrunt-version/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.terragrunt-version$\"\n],\n\"versioning\": \"hashicorp\",\n\"extractVersion\": \"^v(?&lt;version&gt;.+)$\"\n}\n</code></pre>"},{"location":"modules/manager/terragrunt-version/#additional-information","title":"Additional Information","text":"<p>This will maintain <code>.terragrunt-version</code> files. Available versions will be determined from <code>gruntwork-io/terragrunt</code> GitHub releases.</p>"},{"location":"modules/manager/tflint-plugin/","title":"Automated Dependency Updates for Tflint Plugin","text":"<p>Renovate supports updating Tflint Plugin dependencies.</p>"},{"location":"modules/manager/tflint-plugin/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>\\.tflint\\.hcl$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/tflint-plugin/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-releases</code>.</p>"},{"location":"modules/manager/tflint-plugin/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"commitMessageTopic\": \"TFLint plugin {{depName}}\",\n\"fileMatch\": [\n\"\\\\.tflint\\\\.hcl$\"\n],\n\"extractVersion\": \"^v(?&lt;version&gt;.*)$\"\n}\n</code></pre>"},{"location":"modules/manager/tflint-plugin/#additional-information","title":"Additional Information","text":"<p>Renovate maintains your TFLint configuration file, and updates the plugins in the file.</p> <p>Supports plugins hosted in public repositories on github.com. This is because TFLint only supports public repositories.</p>"},{"location":"modules/manager/travis/","title":"Automated Dependency Updates for Travis","text":"<p>Renovate supports updating Travis dependencies.</p>"},{"location":"modules/manager/travis/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>^\\.travis\\.yml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/travis/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>github-tags</code>.</p>"},{"location":"modules/manager/travis/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"^\\\\.travis\\\\.yml$\"\n],\n\"major\": {\n\"enabled\": false\n},\n\"versioning\": \"node\"\n}\n</code></pre>"},{"location":"modules/manager/travis/#additional-information","title":"Additional Information","text":"<p>This manager is intended to keep Travis config files (<code>.travis.yml</code>) up-to-date, this file controls the CI build environment. Currently Renovate can only update the <code>node_js</code> section of this file.</p> <p>Renovate \"understands\" Travis's Build Matrix concept as well, so it will try to update all found Node.js versions to the latest LTS, e.g.</p> <pre><code>node_js:\n-  - 8.10.0\n-  - 10.10.0\n+  - 16.13.0\n+  - 16.13.0\n</code></pre> <p>Due to this, major updates for Travis are disabled by default. If you enable major updates and use a version matrix, then you will likely need to manually fix any major update PRs raised by Renovate. Here's how to enable major updates in your Renovate config:</p> <pre><code>{\n\"travis\": {\n\"major\": {\n\"enabled\": true\n}\n}\n}\n</code></pre>"},{"location":"modules/manager/velaci/","title":"Automated Dependency Updates for Vela","text":"<p>Renovate supports updating Vela dependencies.</p>"},{"location":"modules/manager/velaci/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>(^|/)\\.vela\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/velaci/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/velaci/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"(^|/)\\\\.vela\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/velaci/#additional-information","title":"Additional Information","text":"<p>Extracts Docker-type dependencies from VelaCI config files.</p> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/manager/woodpecker/","title":"Automated Dependency Updates for Woodpecker","text":"<p>Renovate supports updating Woodpecker dependencies.</p>"},{"location":"modules/manager/woodpecker/#file-matching","title":"File Matching","text":"<p>By default, Renovate will check any files matching the following regular expression: <code>^\\.woodpecker(?:/[^/]+)?\\.ya?ml$</code>.</p> <p>For details on how to extend a manager's <code>fileMatch</code> value, please follow this link.</p>"},{"location":"modules/manager/woodpecker/#supported-datasources","title":"Supported datasources","text":"<p>This manager supports extracting the following datasources: <code>docker</code>.</p>"},{"location":"modules/manager/woodpecker/#references-default-config","title":"References## Default config","text":"<pre><code>{\n\"fileMatch\": [\n\"^\\\\.woodpecker(?:/[^/]+)?\\\\.ya?ml$\"\n]\n}\n</code></pre>"},{"location":"modules/manager/woodpecker/#additional-information","title":"Additional Information","text":"<p>Extracts all Docker images from Woodpecker Pipeline YAML files.</p> <ul> <li>Woodpecker homepage</li> <li>Woodpecker Docs: Pipeline Syntax (section with dependencies)</li> <li><code>woodpecker-ci</code> JSON schema</li> </ul> <p>If you need to change the versioning format, read the versioning documentation to learn more.</p>"},{"location":"modules/platform/","title":"Renovate Platforms","text":"<p>Renovate aims to be platform-neutral, while also taking advantage of good platform-specific features.</p>"},{"location":"modules/platform/#supported-platforms","title":"Supported platforms","text":"<p>Supported values for <code>platform</code> are: <code>azure</code>, <code>bitbucket</code>, <code>bitbucket-server</code>, <code>codecommit</code>, <code>gitea</code>, <code>github</code>, <code>gitlab</code>.</p>"},{"location":"modules/platform/azure/","title":"Azure DevOps and Azure DevOps Server","text":""},{"location":"modules/platform/azure/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token for the bot account. Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Remember to set <code>platform=azure</code> somewhere in your Renovate config file.</p>"},{"location":"modules/platform/azure/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will use the merge strategy configured in the Azure Repos repository itself, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/azure/#running-renovate-in-azure-pipelines","title":"Running Renovate in Azure Pipelines","text":""},{"location":"modules/platform/azure/#setting-up-a-new-pipeline","title":"Setting up a new pipeline","text":"<p>Create a brand new pipeline within Azure DevOps, and select your source: </p> <p>Then select your repository.</p> <p>Within Configure your pipeline select: Starter pipeline </p> <p>Replace all content in the starter pipeline with:</p> <pre><code>schedules:\n- cron: '0 3 * * *'\ndisplayName: 'Every day at 3am'\nbranches:\ninclude: [main]\nalways: true\n\ntrigger: none\n\npool:\nvmImage: ubuntu-latest\n\nsteps:\n- task: npmAuthenticate@0\ninputs:\nworkingFile: .npmrc\n\n- bash: |\ngit config --global user.email 'bot@renovateapp.com'\ngit config --global user.name 'Renovate Bot'\nnpx --userconfig .npmrc renovate\nenv:\nTOKEN: $(System.AccessToken)\n</code></pre>"},{"location":"modules/platform/azure/#create-a-npmrc-file","title":"Create a .npmrc file","text":"<p>Create a <code>.npmrc</code> file in your repository:</p> <pre><code>registry=https://pkgs.dev.azure.com/YOUR-ORG/_packaging/YOUR-FEED/npm/registry/\nalways-auth=true\n</code></pre> <p>For the <code>registry</code> key, replace <code>YOUR-ORG</code> with your Azure DevOps organization and <code>YOUR-FEED</code> with your Azure Artifacts feed.</p>"},{"location":"modules/platform/azure/#create-a-configjs-file","title":"Create a config.js file","text":"<p>Create a <code>config.js</code> file in your repository:</p> <pre><code>module.exports = {\nplatform: 'azure',\nendpoint: 'https://dev.azure.com/YOUR-ORG/',\ntoken: process.env.TOKEN,\nhostRules: [\n{\nhostType: 'npm',\nmatchHost: 'pkgs.dev.azure.com',\nusername: 'apikey',\npassword: process.env.TOKEN,\n},\n],\nrepositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n</code></pre> <p>For the <code>endpoint</code> key, replace <code>YOUR-ORG</code> with your Azure DevOps organization. For the <code>repositories</code> key, replace <code>YOUR-PROJECT/YOUR-REPO</code> with your Azure DevOps project and repository.</p>"},{"location":"modules/platform/azure/#yarn-users","title":"Yarn users","text":"<p>To do a successful <code>yarn install</code> you need to match the URL of the registry fully. Use the <code>matchHost</code> config option to specify the full path to the registry.</p> <pre><code>module.exports = {\nplatform: 'azure',\nendpoint: 'https://myorg.visualstudio.com/',\ntoken: process.env.TOKEN,\nhostRules: [\n{\nmatchHost:\n'https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/',\ntoken: process.env.TOKEN,\nhostType: 'npm',\n},\n{\nmatchHost: 'github.com',\ntoken: process.env.GITHUB_COM_TOKEN,\n},\n],\nrepositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n</code></pre> <p>Put this in your repository's <code>.npmrc</code> file:</p> <pre><code>registry=https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/\nalways-auth=true\n</code></pre>"},{"location":"modules/platform/azure/#add-renovatejson-file","title":"Add renovate.json file","text":"<p>Additionally, you can create a <code>renovate.json</code> file (which holds the Renovate configuration) in the root of the repository you want to update. Read more about the Renovate configuration options</p>"},{"location":"modules/platform/azure/#using-a-single-pipeline-to-update-multiple-repositories","title":"Using a single pipeline to update multiple repositories","text":"<p>If you want to use a single Renovate pipeline to update multiple repositories you must take the following steps.</p> <p>Add the names of the repositories to <code>config.js</code>. Make sure that the \"Project Collection Build Service (YOUR-PROJECT)\" user has the following permissions on the repositories:</p> <ul> <li>Contribute</li> <li>Contribute to pull requests</li> <li>Create branch</li> </ul>"},{"location":"modules/platform/azure/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/azure/#feature-requests","title":"Feature requests","text":"<ul> <li>Azure Container Registry Managed Identity  #20200</li> <li>Support changelogs from Azure DevOps #18324</li> <li>Azure Devops: if autoApprove is on, reapprove PR if necessary #15664</li> <li>Implement the explicit <code>automergeStrategy</code> for the Azure DevOps platform. #10851</li> <li>Allow configuration to be stored in <code>.azuredevops</code> #10651</li> <li>Add connection check for Azure platform init #9593</li> <li>Support issues for Azure platform #9592</li> <li>Possibility to set mergeType when using azureAutoComplete #7310</li> <li>Select which status checks to apply for automerge in Azure Devops #4822</li> </ul>"},{"location":"modules/platform/azure/#bug-reports","title":"Bug reports","text":"<ul> <li>Azure platform automerge selects a merge strategy for a different target branch #21639</li> </ul>"},{"location":"modules/platform/bitbucket/","title":"Bitbucket Cloud","text":""},{"location":"modules/platform/bitbucket/#authentication","title":"Authentication","text":"<p>First, create an app password for the bot account. Give the bot app password the following permission scopes:</p> Permission Scope <code>account</code> Account: Read <code>team</code> Workspace membership: Read <code>issue:write</code> Issues: Write <code>pullrequest:write</code> Pull requests: Write <p>The bot also needs to validate the workspace membership status of pull-request reviewers, for that, create a new user group in the workspace with the Create repositories permission and add the bot user to it.</p> <p>Let Renovate use your app password by doing one of the following:</p> <ul> <li>Set your app password as a <code>password</code> in your <code>config.js</code> file</li> <li>Set your app password as an environment variable <code>RENOVATE_PASSWORD</code></li> <li>Set your app password when you run Renovate in the CLI with <code>--password=</code></li> </ul> <p>Remember to:</p> <ul> <li>Set the <code>username</code> for the bot account</li> <li>Set <code>platform=bitbucket</code> somewhere in your Renovate config file</li> </ul>"},{"location":"modules/platform/bitbucket/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding assignees to PRs not supported (does not seem to be a Bitbucket concept)</li> <li><code>automergeStrategy=rebase</code> not supported by Bitbucket Cloud, see Jira issue BCLOUD-16610</li> </ul>"},{"location":"modules/platform/bitbucket/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/bitbucket/#feature-requests","title":"Feature requests","text":"<ul> <li>Support Jira Cloud Issues for Bitbucket.org #20568</li> <li>Bitbucket Cloud: include Release Notes in Renovate PRs #14964</li> <li>Bitbucket Cloud: declined pull requests can neither be renamed not reopened #14243</li> <li>Check branch status in \"bitbucket.getPr()\" #9618</li> </ul>"},{"location":"modules/platform/bitbucket-server/","title":"Bitbucket Data Center and Server","text":""},{"location":"modules/platform/bitbucket-server/#authentication","title":"Authentication","text":"<p>First, create a HTTP access token for the bot account. Let Renovate use your HTTP access token by doing one of the following:</p> <ul> <li>Set your HTTP access token as a <code>password</code> in your <code>config.js</code> file</li> <li>Set your HTTP access token as an environment variable <code>RENOVATE_PASSWORD</code></li> <li>Set your HTTP access token when you run Renovate in the CLI with <code>--password=</code></li> </ul> <p>Remember to set <code>platform=bitbucket-server</code> somewhere in your Renovate config file.</p> <p>If you're not using <code>@renovate-bot</code> as username then set your custom <code>username</code> for the bot account.</p> <p>If you use MySQL or MariaDB you must set <code>unicodeEmoji</code> to <code>false</code> in the global bot config (<code>RENOVATE_CONFIG_FILE</code>) to prevent issues with emojis.</p>"},{"location":"modules/platform/bitbucket-server/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding assignees to PRs not supported (does not seem to be a Bitbucket concept)</li> <li>Adding/removing labels (Bitbucket limitation)</li> </ul>"},{"location":"modules/platform/bitbucket-server/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>Creating issues not implemented yet, used to alert users when there is a config error</li> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will implicitly use the merge strategy configured as 'default' in the Bitbucket Server repository itself, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/bitbucket-server/#testing","title":"Testing","text":"<p>If you want a test Bitbucket server locally rather than with your production server, Atlassian's Bitbucket Server Docker image is really convenient.</p> <p>In line with their instructions, the following commands bring up a new server:</p> <pre><code>docker volume create --name bitbucketVolume\ndocker run -v bitbucketVolume:/var/atlassian/application-data/bitbucket --name=\"bitbucket\" -d -p 7990:7990 -p 7999:7999 atlassian/bitbucket-server:5.12.3\n</code></pre> <p>Once it's running and initialized, the quickest way to testing with Renovate is:</p> <ol> <li>Create the admin user as prompted</li> <li>Create a new project and a repository for that project</li> <li>Make sure the repository has a package file in it for Renovate to find, e.g. <code>.nvmrc</code> or <code>package.json</code></li> <li>Create a dedicated Renovate user <code>@renovate-bot</code> and grant it write access to the project</li> <li>Note down the password for <code>@renovate-bot</code> and use it in the Renovate CLI</li> </ol> <p>At this point you should have a project ready for Renovate, and the <code>@renovate-bot</code> account ready to run on it. You can then run like this:</p> <pre><code>yarn start --platform=bitbucket-server --endpoint=http://localhost:7990 --git-fs=http --username=renovate-bot --password=abc123456789! --log-level=debug --autodiscover=true\n</code></pre> <p>Alternatively using env:</p> <pre><code>export RENOVATE_PLATFORM=bitbucket-server\nexport RENOVATE_ENDPOINT=http://localhost:7990\nexport RENOVATE_GIT_FS=http\nexport RENOVATE_USERNAME=renovate-bot\nexport RENOVATE_PASSWORD=abc123456789!\nexport LOG_LEVEL=debug\nyarn start --autodiscover=true\n</code></pre> <p>You should then get a \"Configure Renovate\" onboarding PR in any projects that <code>@renovate-bot</code> has been invited to.</p>"},{"location":"modules/platform/bitbucket-server/#supported-versions","title":"Supported versions","text":"<p>We support all Bitbucket Server versions which are not EOL. See Atlassian Support End of Life Policy for up-to-date versions.</p>"},{"location":"modules/platform/bitbucket-server/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/bitbucket-server/#feature-requests","title":"Feature requests","text":"<ul> <li>Add Authorization type of \"Bearer \" for Bitbucket Server #14900 <li>Implement PR target attribute #10938</li> <li>Implement the explicit <code>automergeStrategy</code> for the Bitbucket Server platform. #10867</li> <li>Add connection check for Bitbucket Server platform init #9595</li> <li>Support changelogs from bitbucket-server #3903</li>"},{"location":"modules/platform/codecommit/","title":"AWS CodeCommit","text":"<p>This feature is flagged as experimental</p> <p>Experimental features might be changed or even removed at any time. Subscribe to GitHub issue #2868 to be notified of any changes.</p>"},{"location":"modules/platform/codecommit/#authentication","title":"Authentication","text":""},{"location":"modules/platform/codecommit/#iam-role","title":"IAM Role","text":""},{"location":"modules/platform/codecommit/#machine-pre-requisites","title":"Machine pre-requisites","text":"<ol> <li><code>aws-cli</code> installed.</li> <li>Set up the environment with <code>git-credentials-helper</code>.    EC2/linux: EC2 codecommit git integration.</li> </ol> <p>windows: windows codecommit git integration.</p> <ol> <li>Set the environment variable <code>AWS_REGION</code>.</li> </ol>"},{"location":"modules/platform/codecommit/#codebuild-configuration","title":"Codebuild Configuration","text":"<p>add <code>git-credential-helper</code> to your <code>buildspec.yml</code>.</p> <pre><code>env: git-credential-helper:yes\n</code></pre>"},{"location":"modules/platform/codecommit/#iam-user","title":"IAM User","text":"<p>First, you must get an AWS IAM Access Key id and a Secret access key id</p> <p>Let Renovate use AWS CodeCommit authentication keys by doing one of the following:</p> <ul> <li>Set a Renovate configuration file - <code>config.js</code>:</li> </ul> <pre><code>username: AWS IAM access key id\npassword: AWS Secret access key\nendpoint: the URL endpoint e.g https://git-codecommit.us-east-1.amazonaws.com/\ntoken: AWS session token, if you have one\n</code></pre> <ul> <li>Set up the environment with all required AWS environment variables:</li> </ul> <pre><code>AWS_ACCESS_KEY_ID: AWS IAM access key id\nAWS_SECRET_ACCESS_KEY: AWS Secret access key\nAWS_REGION: the AWS region e.g us-east-1\nAWS_SESSION_TOKEN: AWS session token, if you have one\n</code></pre> <ul> <li>Set up AWS credentials using CLI parameters:</li> </ul> <pre><code>--username: AWS IAM access key id\n--password: AWS Secret access key\n--endpoint: the URL endpoint for example https://git-codecommit.us-east-1.amazonaws.com/\n--token: AWS session token, if you have one\n</code></pre>"},{"location":"modules/platform/codecommit/#permissions","title":"Permissions","text":"<p>Create a new AWS policy for renovate with these permissions, then attach it to the user/role.</p> <p>Change the <code>Resource</code> value to the resources you want to use.</p> <p>The policy json.</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Sid\": \"RenovatePolicy\",\n\"Effect\": \"Allow\",\n\"Action\": [\n\"codecommit:DeleteCommentContent\",\n\"codecommit:UpdatePullRequestDescription\",\n\"codecommit:GitPull\",\n\"codecommit:ListPullRequests\",\n\"codecommit:GetCommentsForPullRequest\",\n\"codecommit:ListRepositories\",\n\"codecommit:UpdatePullRequestTitle\",\n\"codecommit:GetFile\",\n\"codecommit:UpdateComment\",\n\"codecommit:GetRepository\",\n\"codecommit:CreatePullRequest\",\n\"codecommit:CreatePullRequestApprovalRule\",\n\"codecommit:GitPush\",\n\"codecommit:UpdatePullRequestStatus\",\n\"codecommit:GetPullRequest\"\n],\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre>"},{"location":"modules/platform/codecommit/#running-renovate","title":"Running Renovate","text":"<p>Set up a global configuration file (<code>config.js</code>), or use CLI parameters or environment variables, to run Renovate on CodeCommit:</p> <ul> <li>Set <code>platform: 'codecommit'</code></li> <li>Set <code>repositories: ['{repository, names, separated, by, comma}']</code>, or use Renovate\u2019s <code>autodiscover</code> feature</li> </ul> <p>Run Renovate and it will process your repositories.</p>"},{"location":"modules/platform/codecommit/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<p>These features are not supported:</p> <ul> <li>Adding assignees to PRs</li> <li>Auto-merge</li> <li><code>rebaseLabel</code> (request a rebase for Renovate)</li> </ul>"},{"location":"modules/platform/codecommit/#recommendations","title":"Recommendations","text":"<ul> <li>We recommend that you limit the number of open Renovate PRs by setting a <code>prConcurrentLimit</code></li> <li>Due to current platform limitations, if you close a PR but don\u2019t want for Renovate to recreate the PR, use package rules with the <code>\"enabled\": false</code> key</li> </ul>"},{"location":"modules/platform/codecommit/#example-configuration","title":"Example configuration","text":"<p>Here's an example <code>config.js</code>:</p> <pre><code>module.exports = {\nendpoint: 'https://git-codecommit.us-east-1.amazonaws.com/',\nplatform: 'codecommit',\nrepositories: ['abc/def', 'abc/ghi'],\nusername: 'ACCESS_KEY_ID_GOES_HERE',\npassword: 'SECRET_ACCESS_KEY_GOES_HERE',\ntoken: 'AWS_SESSION_TOKEN_GOES_HERE',\ngitAuthor: 'your_email@domain',\npackageRules: [\n{\nmatchPackageNames: ['package_name', 'package_name2'],\nenabled: false,\n},\n],\n};\n</code></pre>"},{"location":"modules/platform/codecommit/#codebuild-examples","title":"CodeBuild examples","text":"<p>Create a repository with <code>buildspec.yml</code>. This repository will be your BuildProject job repository to run Renovate on your repositories.</p>"},{"location":"modules/platform/codecommit/#renovate-docker-buildspecyml","title":"Renovate Docker <code>buildspec.yml</code>","text":"<pre><code>version: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:base\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - docker run --rm -e AWS_REGION -e RENOVATE_CONFIG -e RENOVATE_PLATFORM -e RENOVATE_REPOSITORIES -e LOG_LEVEL renovate/renovate\n</code></pre>"},{"location":"modules/platform/codecommit/#renovate-cli-buildspecyml","title":"Renovate CLI <code>buildspec.yml</code>","text":"<pre><code>version: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:base\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - npm install -g renovate\n      - renovate\n</code></pre>"},{"location":"modules/platform/codecommit/#notes","title":"Notes","text":"<p>In order to reduce Renovate BuildProject time and avoid <code>npm install</code>.</p> <p>We recommend you install Renovate on the BuildProject Renovate job repository.</p> <p>You can add <code>config.js</code> global config to the repository.</p> <p>You can add the BuildProject repository to the <code>RENOVATE_REPOSITORIES</code> variable and get updates on new Renovate versions.</p>"},{"location":"modules/platform/codecommit/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/codecommit/#feature-requests","title":"Feature requests","text":"<ul> <li>CodeCommit: support \"close to ignore\" for Pull Requests #19427</li> </ul>"},{"location":"modules/platform/gitea/","title":"Gitea and Forgejo","text":"<p>Renovate supports Gitea and the new fork Forgejo. Forgejo exists since <code>v1.18.0</code> and is currently fully compatible to Gitea.</p>"},{"location":"modules/platform/gitea/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token for the bot account. Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Remember to set <code>platform=gitea</code> somewhere in your Renovate config file. Either the account should have full name and email address set to allow Renovate to estabilish Git identity, or the <code>gitAuthor</code> config option should be set.</p>"},{"location":"modules/platform/gitea/#unsupported-platform-featuresconcepts","title":"Unsupported platform features/concepts","text":"<ul> <li>Adding reviewers to PRs not supported: Gitea versions older than <code>v1.14.0</code> do not have the required API.</li> <li>Setting <code>platformAutomerge</code> to use platform-native automerge for PRs not supported: Gitea versions older than v1.17.0 do not have the required API.</li> <li>Git upload filters: If you're using a Gitea version older than <code>v1.16.0</code> then you must enable clone filters.</li> </ul>"},{"location":"modules/platform/gitea/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>none</li> </ul>"},{"location":"modules/platform/gitea/#repo-autodiscover-sorting","title":"Repo autodiscover sorting","text":"<p>You can change the default server-side sort method and order for autodiscover API. Set those via <code>RENOVATE_X_AUTODISCOVER_REPO_SORT</code> and <code>RENOVATE_X_AUTODISCOVER_REPO_ORDER</code>. Read the Gitea swagger docs for more details.</p>"},{"location":"modules/platform/gitea/#open-items","title":"Open items","text":"<p>The below list of features were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/gitea/#feature-requests","title":"Feature requests","text":"<ul> <li>Gitea: use repo topic as a cache #18921</li> </ul>"},{"location":"modules/platform/github/","title":"GitHub and GitHub Enterprise Server","text":""},{"location":"modules/platform/github/#authentication","title":"Authentication","text":"<p>First, create a classic Personal Access Token for the bot account, select <code>repo</code> scope. Fine-grained Personal Access Tokens do not support the GitHub GraphQL API and cannot be used with Renovate.</p> <p>Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Remember to set <code>platform=github</code> somewhere in your Renovate config file.</p> <p>If you use GitHub Enterprise Server then <code>endpoint</code> must point to <code>https://github.enterprise.com/api/v3/</code>. You can choose where you want to set <code>endpoint</code>:</p> <ul> <li>In your <code>config.js</code> file</li> <li>In a environment variable</li> <li>In a CLI parameter</li> </ul> <p>Labels and forking mode</p> <p>If you're self-hosting Renovate on GitHub.com with GitHub Actions in forking mode, and want Renovate to apply labels then you must give the PAT <code>triage</code> level rights on <code>issues</code>. The <code>triage</code> level allows the PAT to apply/dismiss existing labels.</p>"},{"location":"modules/platform/github/#running-as-a-github-app","title":"Running as a GitHub App","text":"<p>Instead of a bot account with a Personal Access Token you can run <code>renovate</code> as a self-hosted GitHub App.</p> <p>When creating the GitHub App give it the following permissions:</p> Permission Scope Checks <code>read</code> + <code>write</code> Commit statuses <code>read</code> + <code>write</code> Contents <code>read</code> + <code>write</code> Issues <code>read</code> + <code>write</code> Pull requests <code>read</code> + <code>write</code> Workflows <code>read</code> + <code>write</code> Dependabot alerts <code>read</code> Members <code>read</code> Metadata <code>read</code> <p>Other values like Homepage URL, User authorization callback URL and webhooks can be disabled or filled with dummy values.</p> <p>Inside your <code>config.js</code> you need to set the following values, assuming the name of your app is <code>self-hosted-renovate</code>:</p> <p><code>username:\"self-hosted-renovate[bot]\"</code></p> <p>The slug name of your app with <code>[bot]</code> appended</p> <p><code>gitAuthor:\"Self-hosted Renovate Bot &lt;123456+self-hosted-renovate[bot]@users.noreply.github.enterprise.com&gt;\"</code></p> <p>The GitHub App associated email to match commits to the bot. It needs to have the user id and the username followed by the <code>users.noreply.</code>-domain of either github.com or the GitHub Enterprise Server. A way to get the user id of a GitHub app is to query the user API at <code>api.github.com/users/self-hosted-renovate[bot]</code> (github.com) or <code>github.enterprise.com/api/v3/users/self-hosted-renovate[bot]</code> (GitHub Enterprise Server).</p> <p><code>token:\"ghs_123exampletoken\"</code></p> <p>You must use a GitHub App Installation token.</p> <p>Previously, the token had to be prefixed with <code>x-access-token:</code>. We recommend you replace any prefixed tokens with normal tokens. We will drop support for prefixed tokens in the future.</p> <p>Any tokens that do not start with <code>ghs_</code> (for example tokens from GitHub Enterprise Server versions before version <code>3.2</code>) must be prefixed with <code>x-access-token:</code>.</p> <p>Note</p> <p>The installation tokens expire after 1 hour and need to be regenerated regularly. Alternatively as environment variable <code>RENOVATE_TOKEN</code>, or via CLI <code>--token=</code>.</p> <p><code>repositories: [\"orgname/repo-1\",\"orgname/repo-2\"]</code></p> <p>List of repositories to run on. Alternatively as comma-separated environment variable <code>RENOVATE_REPOSITORIES</code>. The GitHub App installation token is scoped at most to a single organization and running on multiple organizations requires multiple invocations of <code>renovate</code> with different <code>token</code> and <code>repositories</code> parameters.</p>"},{"location":"modules/platform/github/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will use the merge strategy configured in the GitHub repository itself, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/github/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/github/#feature-requests","title":"Feature requests","text":"<ul> <li>Allow user to set a certain commit body when enabling auto-merge on a PR #21451</li> <li>Default platformCommit to true when in app mode #21318</li> <li>GitHub: Lazy branch protection detection for automerge #19549</li> <li>Support github fine-grained token #18459</li> <li>Long-term caching for GitHub issues list #16079</li> <li>Find open PRs regardless of author #16078</li> <li>Implement the explicit <code>automergeStrategy</code> for the GitHub platform. #10869</li> <li>Assign authors mentioned in release notes #8605</li> <li>Allow assignees option to be a github team #7368</li> <li>Add the ability to assign PRs to a github project board #3616</li> </ul>"},{"location":"modules/platform/github/#bug-reports","title":"Bug reports","text":"<ul> <li>Handle rate limit exceeded response for github.initRepo #21861</li> <li>renovate should not try other automerge when blocked by code owner review  #21167</li> <li>GitHub PR creation fails silently with 422 #11481</li> <li>Lockfile maintenance branch not deleted automatically #7636</li> </ul>"},{"location":"modules/platform/gitlab/","title":"GitLab","text":""},{"location":"modules/platform/gitlab/#authentication","title":"Authentication","text":"<p>First, create a Personal Access Token for the bot account.</p> <p>For real runs, give the PAT these scopes:</p> <ul> <li><code>read_user</code></li> <li><code>api</code></li> <li><code>write_repository</code></li> <li><code>read_registry</code> (only if Renovate needs to access the GitLab Container registry)</li> </ul> <p>For dry runs, give the PAT these scopes:</p> <ul> <li><code>read_user</code></li> <li><code>read_api</code></li> <li><code>read_repository</code></li> <li><code>write_repository</code> (when using autodiscover)</li> <li><code>read_registry</code> (only if Renovate needs to access the GitLab Container registry)</li> </ul> <p>Let Renovate use your PAT by doing one of the following:</p> <ul> <li>Set your PAT as a <code>token</code> in your <code>config.js</code> file</li> <li>Set your PAT as an environment variable <code>RENOVATE_TOKEN</code></li> <li>Set your PAT when you run Renovate in the CLI with <code>--token=</code></li> </ul> <p>Remember to set <code>platform=gitlab</code> somewhere in your Renovate config file.</p> <p>If you're using a private GitLab container registry, you must:</p> <ul> <li>Set the <code>RENOVATE_HOST_RULES</code> CI variable to <code>[{\"matchHost\": \"${CI_REGISTRY}\",\"username\": \"${GITLAB_USER_NAME}\",\"password\": \"${RENOVATE_TOKEN}\"}]</code>.</li> <li>Make sure the user that owns the <code>RENOVATE_TOKEN</code> PAT is a member of the corresponding GitLab projects/groups with the right permissions.</li> <li>Make sure the <code>RENOVATE_TOKEN</code> PAT has the <code>read_registry</code> scope.</li> </ul>"},{"location":"modules/platform/gitlab/#features-awaiting-implementation","title":"Features awaiting implementation","text":"<ul> <li>The <code>automergeStrategy</code> configuration option has not been implemented for this platform, and all values behave as if the value <code>auto</code> was used. Renovate will accept the Merge Request without further configuration, and respect the strategy defined in the Merge Request, and this cannot be overridden yet</li> </ul>"},{"location":"modules/platform/gitlab/#server-version-dependent-features","title":"Server version dependent features","text":"<p>We use the GitLab version API to fetch the server version. You can use the experimental feature flag <code>RENOVATE_X_PLATFORM_VERSION</code> to set a specific server version. By setting the server version yourself, you save a API call that fetches the server version.</p> <ul> <li>Use <code>Draft:</code> MR prefix instead of <code>WIP:</code> prefix since <code>v13.2.0</code></li> <li>Do not truncate Markdown body to 25K chars since <code>v13.4.0</code></li> <li>Allow configure reviewers since <code>v13.9.0</code></li> </ul>"},{"location":"modules/platform/gitlab/#multiple-merge-request-assignees","title":"Multiple merge request assignees","text":"<p>Due to licensing restrictions multiple assignees are only available in GitLab Premium self-managed, GitLab Premium SaaS, and higher tiers. Because of a safeguard in GitLab's API if multiple assignees are set, but not available to the project, only the first assignee will be applied.</p>"},{"location":"modules/platform/gitlab/#open-items","title":"Open items","text":"<p>The below list of features and bugs were current when this page was generated on May 01, 2023.</p>"},{"location":"modules/platform/gitlab/#feature-requests","title":"Feature requests","text":"<ul> <li>Use GitLab platform token for container registry #17940</li> <li>Set assignees on PR creation for better Gitlab webhook events #17620</li> <li>Warning as thread instead of regular note for GitLab #15985</li> <li>Gitlab - autodiscover by groups #12635</li> <li>[GitLab] Change email source in <code>gitAuthor</code> #12532</li> <li>Remove Gitlab Approvers on MR creation #11106</li> <li>Implement the explicit <code>automergeStrategy</code> for the Gitlab platform. #10870</li> <li>Assign GitLab MRs on creation and not as update #9252</li> <li>Renovate does not help if the GitLab User does not have enough permissions for automerge #9135</li> <li>Conflict between Gitlab @ mentions feature and Fix Renovate Configuration issue #8030</li> <li>GitLab: Renovate cannot merge without <code>CODEOWNERS</code> approval #6473</li> <li>Support GitLab \"merge trains\" #5573</li> <li>Support private go modules on custom GitLab EE host #4601</li> <li>Feature request: GitLab forkMode #840</li> </ul>"},{"location":"modules/platform/gitlab/#bug-reports","title":"Bug reports","text":"<ul> <li>Release Notes replace all occurrences of PR with MR #20682</li> </ul>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/","title":"Maintaining aur packages with renovate","text":""},{"location":"user-stories/maintaining-aur-packages-with-renovate/#maintaining-aur-packages-with-renovate","title":"Maintaining AUR packages with Renovate","text":"<p>This article was written by Jamie Magee and originally published on Jamie Magee's blog.</p> <p>Note</p> <p>Jamie Magee helps to maintain Renovate. They obviously like Renovate, and want you to use it.</p> <p>One big advantage that Arch Linux has over other distributions, apart from being able to say \u201cBTW I use Arch.\u201d, is the Arch User Repository (AUR). It\u2019s a community-driven repository with over 80,000 packages. If you\u2019re looking for a package, chances are you'll find it in the AUR.</p> <p>Keeping all those packages up to date, takes a lot of manual effort by a lot of volunteers. People have created and used tools, like <code>urlwatch</code> and <code>aurpublish</code>, to let them know when upstream releases are cut and automate some parts of the process. I know I do. But I wanted to automate the entire process. I think Renovate can help here.</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#updating-versions-with-renovate","title":"Updating versions with Renovate","text":"<p>Renovate is an automated dependency update tool. You might have seen it opening pull requests on GitHub and making updates for npm or other package managers, but it\u2019s a lot more powerful than just that.</p> <p>Renovate has a couple of concepts that I need to explain first: datasources and managers. Datasources define where to look for new versions of a dependency. Renovate comes with over 50 different datasources, but the one that is important for AUR packages is the <code>git-tags</code> datasource. Managers are the Renovate concept for package managers. There isn\u2019t an AUR or <code>PKGBUILD</code> manager, but there is a regex manager that I can use.</p> <p>I can create a <code>renovate.json</code> configuration with the following regex manager configuration:</p> <pre><code>{\n\"regexManagers\": [\n{\n\"fileMatch\": [\"(^|/)PKGBUILD$\"],\n\"matchStrings\": [\n\"pkgver=(?&lt;currentValue&gt;.*) # renovate: datasource=(?&lt;datasource&gt;.*) depName=(?&lt;depName&gt;.*)\"\n],\n\"extractVersionTemplate\": \"^v?(?&lt;version&gt;.*)$\"\n}\n]\n}\n</code></pre> <p>Breaking that down:</p> <ul> <li>The <code>fileMatch</code> setting tells Renovate to look for any <code>PKGBUILD</code> files in a repository</li> <li>The <code>matchStrings</code> is the regex format to extract the version, datasource, and dependency name from the <code>PKGBUILD</code></li> <li>The <code>extractVersionTemplate</code> is to handle a \u201cv\u201d in front of any version number that is sometimes added to Git tags</li> </ul> <p>And here\u2019s an extract from the PKGBUILD for the bicep-bin AUR package that I maintain:</p> <pre><code>pkgver=0.15.31 # renovate: datasource=github-tags depName=Azure/bicep\n</code></pre> <p>Here I\u2019m configuring Renovate to use the <code>github-tags</code> datasource and to look in the <code>Azure/bicep</code> GitHub repository for new versions. That means it\u2019ll look in the list of tags for the <code>Azure/bicep</code> repository for any new versions. If Renovate finds any new versions, it\u2019ll automatically update the <code>PKGBUILD</code> and open a pull request with the updated version.</p> <p>So I\u2019ve automated the <code>PKGBUILD</code> update, but that\u2019s only half of the work. The checksums and <code>.SRCINFO</code> must be updated before pushing to the AUR. Unfortunately, Renovate can\u2019t do that (yet, see Renovate issue #16923), but GitHub Actions can!</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#updating-checksums-and-srcinfo-with-github-actions","title":"Updating checksums and <code>.SRCINFO</code> with GitHub Actions","text":"<p>Updating the checksums with <code>updpkgsums</code> is easy, and generating an updated <code>.SRCINFO</code> with <code>makepkg --printsrcinfo &gt; .SRCINFO</code> is straightforward too. But doing that for a whole repository of AUR packages is going to be a little trickier. So let me build up the GitHub actions workflow step-by-step.</p> <p>First, I only want to run this workflow on pull requests targeting the <code>main</code> branch.</p> <pre><code>on:\npull_request:\ntypes:\n- opened\n- synchronize\nbranches:\n- main\n</code></pre> <p>Next, I\u2019m going to need to check out the entire history of the repository, so I can compare the files changed in the latest commit with the Git history.</p> <pre><code>jobs:\nupdpkgsums:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0\nwith:\nfetch-depth: 0\nref: ${{ github.ref }}\n</code></pre> <p>Getting the package that changed in a pull request requires a little bit of shell magic.</p> <pre><code>- name: Find updated package\nrun: |\n#!/usr/bin/env bash\nset -euxo pipefail\n\necho \"pkgbuild=$(git diff --name-only origin/main origin/${GITHUB_HEAD_REF} \"*PKGBUILD\" | head -1 | xargs dirname)\" &gt;&gt; $GITHUB_ENV\n</code></pre> <p>Now I\u2019ve found the package that changed in the Renovate pull request, I can update the files.</p> <p>This step in the workflow uses a private GitHub Action that I have in my <code>aur-packages</code> repository. I\u2019m not going to break it down here, but at its core it runs <code>updpkgsums</code> and <code>makepkg --printsrcinfo &gt; .SRCINFO</code> with a little extra configuration required to run Arch Linux on GitHub Actions runners. You can check out the full code on GitHub.</p> <pre><code>- name: Validate package\nif: ${{ env.pkgbuild != '' }}\nuses: ./.github/actions/aur\nwith:\naction: 'updpkgsums'\npkgname: ${{ env.pkgbuild }}\n</code></pre> <p>Finally, once the <code>PKGBUILD</code> and <code>.SRCINFO</code> are updated I need to commit that change back to the pull request.</p> <pre><code>- name: Commit\nif: ${{ env.pkgbuild != '' }}\nuses: stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a # v4.16.0\nwith:\nfile_pattern: '*/PKGBUILD */.SRCINFO'\n</code></pre> <p>Check out this pull request for <code>bicep-bin</code> where Renovate opened a pull request, and my GitHub Actions workflow updated the <code>b2sums</code> in the <code>PKGBUILD</code> and updated the <code>.SRCINFO</code>.</p> <p>But why stop there? Let\u2019s talk about publishing.</p>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#publishing-to-the-aur","title":"Publishing to the AUR","text":"<p>Each AUR package is its own Git repository. So to update a package in the AUR, I only need to push a new commit with the updated <code>PKGBUILD</code> and <code>.SRCINFO</code>. Thankfully, KSXGitHub created the <code>github-actions-deploy-aur</code> GitHub Action to streamline the whole process.</p> <p>If I create a new GitHub Actions workflow to publish to the AUR, I can reuse the first two steps from my previous workflow to check out the repository and find the updated package. Then all I need to do is to use the <code>github-actions-deploy-aur</code> GitHub Action:</p> <pre><code>- name: Publish package\nuses: KSXGitHub/github-actions-deploy-aur@065b6056b25bdd43830d5a3f01899d0ff7169819 # v2.6.0\nif: ${{ env.pkgbuild != '' }}\nwith:\npkgname: ${{ env.pkgbuild }}\npkgbuild: ${{ env.pkgbuild }}/PKGBUILD\ncommit_username: ${{ secrets.AUR_USERNAME }}\ncommit_email: ${{ secrets.AUR_EMAIL }}\nssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}\n</code></pre>"},{"location":"user-stories/maintaining-aur-packages-with-renovate/#all-together-now","title":"All together now","text":"<p>If you own any AUR packages and want to automate some of the maintenance burden, check out my AUR packages template GitHub repository. It contains all of the steps I showed in this blog post. And if you want to see how it works in practice, check out my AUR packages GitHub repository.</p>"},{"location":"user-stories/swissquote/","title":"Swissquote","text":""},{"location":"user-stories/swissquote/#how-swissquote-is-keeping-software-dependencies-up-to-date-with-renovate","title":"How Swissquote is keeping software dependencies up-to-date with Renovate","text":"<p>This article was originally published on Medium by St\u00e9phane Goetz, Principal Software Engineer at Swissquote Bank.</p> <p>Swissquote has more than 1000 distinct applications running in production. They come in many different flavors including services, daemons, and webapps, and their age can be counted from days to more than a decade. While there are many topics of interest when talking about software maintenance, today\u2019s topic is software dependencies. We\u2019ll see in this article why it\u2019s important to keep them up-to-date and why it\u2019s not as simple as one may think.</p> <p>Software dependencies have been a heavily discussed topic in the past months. One aspect that\u2019s discussed a lot is security issues like the recent Log4Shell, Supply chain attacks, an expiring SSL Certificate. But there are also other aspects like bugs caused by your dependencies.</p> <p>Depending on third-party software is a sword of Damocles; you never know when a new issue will force you to drop everything to upgrade your software.</p> <p> </p> XKCD comic 2347 is always relevant when talking about dependencies. <p>Each software dependency is a risk. For example: SQL Injections, is the ORM you are using properly escaping the content you are passing to it? Will your current driver be able to connect to your database if it gets upgraded? Every dependency, while solving an issue for you, will also bring new risks to your software. How can you mitigate those risks?</p> <p>If the title of the article is of any help, the idea would be to keep your dependencies up-to-date to fix bugs, security issues, and more.</p>"},{"location":"user-stories/swissquote/#i-dont-feel-like-upgrading-what-if","title":"I don\u2019t feel like upgrading, what if?","text":"<p>But what if the upgrades do the complete opposite? What if the new version introduces a new security issue?</p> <p>For example, a new version of a dependency could be victim of a supply chain attack. If you never update your dependencies, you won\u2019t get the infected version. Sounds fair, right?</p> <p>It\u2019s a valid argument, but your application doesn\u2019t exist in a vacuum; many external factors could force you to upgrade at some point, and when it happens it\u2019s usually at the wrong time.</p> <p>Let\u2019s go through some examples.</p>"},{"location":"user-stories/swissquote/#an-external-factor-has-changed-forcing-you-to-change-your-app","title":"An external factor has changed, forcing you to change your app","text":"<p>Let\u2019s say the machine your apps runs on is obsolete and you need to move to another machine. This could be as simple as \u201cinstall app on machine; done\u201d but usually ends up with:</p> <ol> <li>The newer OS version prevents you from installing an outdated runtime</li> <li>You need to find a compatible runtime for your new hardware</li> <li>Your app\u2019s dependencies aren\u2019t compatible with your new runtime, you need to update them as well</li> </ol> <p>Instead of a single change, you now have a combination of changes, each can go wrong in a different way.</p>"},{"location":"user-stories/swissquote/#a-new-vulnerability-is-found-on-a-library-you-depend-on","title":"A new vulnerability is found on a library you depend on","text":"<p>As we\u2019ve covered at the beginning of the article this can happen and can be an all-hands-on-deck kind of situation. Imagine a legacy application; continuous integration is constantly failing \u2014 or worse it may not even exist. How long do you think it will take to deploy that single library update?</p>"},{"location":"user-stories/swissquote/#the-team-already-has-too-many-dependencies-in-too-many-different-versions","title":"The team already has too many dependencies in too many different versions","text":"<p>That\u2019s unfortunate, but it will happen if your team or company exists for long enough. Upgrading libraries is not only about bumping versions, sometimes it\u2019s also about replacing a library by another library.</p>"},{"location":"user-stories/swissquote/#how-do-you-see-your-dependencies","title":"How do you see your dependencies?","text":"<p>Look at your software as if it was a train. You are the locomotive and each wagon is a dependency, how long would your train be? Locomotives can pull dozens, even hundreds of wagons, but they eventually reach a limit. The situation is the same for your brain, each dependency adds to your cognitive load, at some point it\u2019s just too much. You are using three different libraries for caching? There is a chance you need to know how each library works, and your present and future teammates might have to know that too.</p> <p>Which of these two would you prefer to start with:</p> <ul> <li>A project that is fairly up-to-date where you can bump the dependency, run the deployment pipeline and go back to your day</li> <li>A project that wasn\u2019t touched in years; every dependency is outdated and Continuous Integration is red on all branches, if running at all</li> </ul> <p>Am I exaggerating with my examples? Maybe a little, but I have seen cases very close to those.</p> <p>Let me ask you some questions about your projects:</p> <ul> <li>How many times did you create a project and never upgrade its dependencies?</li> <li>How many times did you have to get back to an old project, and had to use a new library but couldn\u2019t because there is another library at an old version that isn\u2019t compatible?</li> <li>How fast can you upgrade a single dependency on all your applications?</li> </ul> <p>As time goes forward, projects come and go, you will most likely have decade-old, and recent ones. Some might be using the latest version of Java with the latest Spring, some with slightly outdated libraries and others might be using Stripes and libraries that have had no release in 7 years.</p> <p>Every company that\u2019s been around for sometime has that old project still running. People talk about it laughingly but become livid when a request comes to change anything in it.</p> <p> </p> There is a fix to make on that project, the last person working on it left three years ago."},{"location":"user-stories/swissquote/#dependencies-at-swissquote","title":"Dependencies at Swissquote","text":"<p>I\u2019ve identified three main approaches people use to upgrade their dependencies at Swissquote:</p> <ol> <li>Critical fixes only; update dependencies that have a CVE attached</li> <li>Opportunistic; also known as the boy scout rule, leave the project with more up-to-date dependencies than you found it</li> <li>Update your dependencies regularly; manually or with a tool</li> </ol>"},{"location":"user-stories/swissquote/#critical-fixes-only","title":"Critical fixes only","text":"<p>Every once in a while, a library gets an update that fixes a vulnerability. Our security team is on the lookout for critical vulnerabilities and will quickly warn all impacted teams if an update needs to be done.</p> <p>We also configured GitHub\u2019s Dependabot Alerts that will inform teams that a vulnerability has been discovered and which version they should upgrade to to be safe (more on this later).</p> <p>This approach, while it mostly works, can be very risky. If the project hasn\u2019t been touched for quite a while, the number of dependencies to update can be high depending on the vulnerability and the time to update will increase significantly.</p>"},{"location":"user-stories/swissquote/#opportunistic","title":"Opportunistic","text":"<p>This rule is simple, when you receive a task on a project, the first step is to upgrade its dependencies. Once that is done, you can go ahead with the implementation of your task.</p> <p>This approach is similar to fixing a bit of tech debt with every business project you take on, it helps to stay ahead in case a vulnerability comes up and keep a baseline for all your projects.</p>"},{"location":"user-stories/swissquote/#update-your-dependencies-regularly","title":"Update your dependencies regularly","text":"<p>This one sounds easy, every few weeks you check what\u2019s outdated, bump the versions and run your CI. If it succeeds, you push the change. Maybe there is even a way to automate that?</p>"},{"location":"user-stories/swissquote/#lets-give-renovate-a-try","title":"Let's give Renovate a try","text":"<p>One day in November 2019, I discovered that Renovate provides a Docker image that you can run on-premise with your own package registries. The app creates Pull Requests automatically to inform you of dependencies updates and the CI can then build it automatically so you know if it\u2019s safe to merge or not.</p> <p>On our first try, we enabled 30 repositories, a cron task was running every hour to create Pull Requests.</p> <p>We received 700 Pull Requests in the first month, it was a never ending Pull Request whack-a-mole: every time we merged one, another replaced it.</p> <p> </p> Me and my team merging Pull Requests. <p>The awesome thing with Renovate is that it\u2019s very configurable, and this configuration can be shared. Very early on we created a shared configuration for our team with some custom policies, here are a few things we decided to do:</p> <ul> <li>Group PRs for <code>minor</code> and <code>patch</code> dependencies</li> <li>Internal dependencies could create a PR anytime of the day</li> <li>Third party dependencies could create PRs only during the weekend</li> </ul> <p>This helped a lot to reduce the noise in PRs, the second month we got 400 Pull Requests, and on the third month only 200.</p>"},{"location":"user-stories/swissquote/#what-we-learned-from-automating-dependencies-updates","title":"What we learned from automating dependencies updates","text":"<ul> <li>You need to be confident that your code coverage will warn you in case of updates. At the beginning we missed quite a few breaking updates because the build was green but the application broke as soon as it was deployed</li> <li>Once you\u2019re confident enough, auto-merge is a must have. In our team we enabled Renovate on about 100 of our repositories and generally spend 1\u20132 hours per week to stay up-to-date</li> <li>\u201cOn the bleeding edge it\u2019s not the edge that\u2019s bleeding; it\u2019s you\u201d. When updating to a new major version as soon as it\u2019s released you might encounter some surprises. It happened to us a few times that a patch version breaks the library. Usually a fix came out the next day, but we still spent a few hours debugging why the update broke our applications. We\u2019ve opened quite a few Issues and sent some PRs to fix issues like this</li> <li>Updating dependencies is one thing, but when should you release them? As our team mostly provides libraries, we don\u2019t want to release them on every dependency upgrade (as this would create PRs downstream and create noise for them). We\u2019ve decided to release right after critical upgrades or contributions and a dashboard informs us when a repository hasn\u2019t been released for 30 days</li> </ul>"},{"location":"user-stories/swissquote/#a-word-on-renovate","title":"A word on Renovate","text":"<p>The next section could look like an ad or a sponsored post; it\u2019s not. We\u2019re just big fans of the product.</p> <p>The ease of getting started with Renovate\u2019s Docker image is what got us onboard easily. But what confirmed our choice is the insane crazy amount of features and configuration options.</p> <p>Some features and options we enjoy:</p> <ul> <li>Shared configurations (presets), we have a Swissquote default configuration we set for all repositories, each team can extend it with their own practices</li> <li>Integration with GitHub\u2019s Dependabot alerts to raise the priority and send security remediation PRs as soon as possible</li> <li>Each rule can be customized either globally or specified per package</li> <li>Works with your private package registry</li> <li>Supports more than 70 languages and package managers: Maven, Docker, npm, Docker Compose, Python</li> <li>If you are using dependencies in a custom way, there is a special regexManager that allows you to transform patterns into dependencies</li> </ul> <p>There is an on-premise option, but you can also have it as an app on GitHub.com. On our side, we\u2019re not using the on-premise but rather a custom scheduler using the open source Docker image.</p>"},{"location":"user-stories/swissquote/#some-stats-after-two-years-with-renovate","title":"Some stats after two years with Renovate","text":"<p>We started using Renovate Bot in 2019, using the (now deprecated) <code>renovate/pro</code> Docker image. We installed it as a GitHub app and some early adopters started to use it.</p> <p>Pretty quickly, we ran into the biggest limitation; this Docker image runs all repositories one after another. A single loop was taking hours and made it very difficult to check the logs as they weren\u2019t separated per repository.</p> <p>This is why we created our own scheduler; each hour, all repositories would be queued to run, and GitHub app events would schedule a single repository. We started to collect metrics and store the logs separately for each repository.</p> <p>Here is the dashboard for our current scheduler:</p> <p> </p> A dashboard we made at Swissquote to keep our Renovate runs in check, July 2022. <p>We don\u2019t force any team to use Renovate, each team can decide to opt-in and do it for each project separately.</p> <p>Some statistics:</p> <ul> <li>824 repositories enabled out of about 2000 active repositories</li> <li>8000 PRs were merged since we installed Renovate</li> <li>239 PRs were merged last month</li> <li>2 SSDs died on our Renovate machine with the number of projects to clone again and again</li> </ul>"},{"location":"user-stories/swissquote/#the-future-of-renovate-at-swissquote","title":"The future of Renovate at Swissquote","text":"<p>Not all teams are using Renovate at this stage, as some teams prefer to manually update their dependencies. We would like to enable Renovate for critical dependencies in all repositories and hope to make it useful and easy so other teams will adopt it for more dependencies.</p>"},{"location":"user-stories/swissquote/#how-should-i-get-started-with-renovate","title":"How should I get started with Renovate?","text":"<p>If this article convinced you, how should you get started?</p> <ol> <li>First, if you know your software is very outdated; don\u2019t enable Renovate right away, you will be swamped with Pull Requests, we\u2019ve been there and it\u2019s not a happy memory. First take the time to manually upgrade all that you can. <code>npm outdated</code>, <code>mvn versions:display-dependency-updates</code> or your package manager\u2019s equivalent of that command can help you get started, test your application and commit that</li> <li>You can now enable Renovate and will receive a Pull Request to add a configuration file, read this first PR carefully as it will explain what kind of PRs you are going to receive and when</li> <li>Make sure to pick a schedule, otherwise you will receive PRs at any time of the day. Our team schedules all third party dependencies on the weekend, automatically merging when the tests pass and we investigate the failing ones on Monday morning</li> <li>Group Pull Requests, if every PR has to go through CI, it can become quite heavy, once most PRs succeed, you can start grouping minor and patch updates so that you get a single PR per repository. Investigating issues becomes a bit trickier because of that. To give you some numbers out of 90 repositories enabled with Renovate, we have on average 4 PRs to investigate per week. Everything else is automatically merged</li> <li>Enable auto merging after some time, make sure your tests are solid and that you won\u2019t upgrade something that wasn\u2019t tested and will break once in production</li> </ol>"},{"location":"user-stories/swissquote/#is-all-this-effort-worth-it","title":"Is all this effort worth it?","text":"<p>The short answer is yes!</p> <p>It took us almost a year, way longer than we thought, to catch up with the latest version of everything in our technical stack. But once we were confident enough in our tests to enable automatic merging of Pull Requests we were satisfied with the work we did to update our software stack. We knew we would be ready when an unplanned change arrives.</p> <p>When that day came, in December 2021 with Log4Shell, it was a matter of hours to release the freshly merged Pull Requests, deploy the few applications we had, and notify the teams depending on our libraries. We were so quick to do it, in fact, that we had to do that three times with the chain of vulnerabilities that was found in Log4j that week.</p> <p>Keep in mind that keeping your dependencies up-to-date is not just about the tooling, it\u2019s also about having a process:</p> <ul> <li>When will you merge this PR?</li> <li>How will you handle the PR that doesn\u2019t build?</li> <li>The new major version of an external library that\u2019s not yet compatible with the rest of your libraries?</li> <li>When will you release this constant flow of library updates?</li> <li>Do you want PRs during the day? During the night? Or on weekends only?</li> </ul> <p>We know the answers for our situation, we\u2019ll let you decide what the answers are for you. </p>"}]}